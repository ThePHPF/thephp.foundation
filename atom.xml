<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[The PHP Foundation]]></title>
    <link href="https://thephp.foundation/atom.xml" rel="self"/>
    <link href="https://thephp.foundation/"/>
    <updated>2024-10-02T15:19:05+00:00</updated>
    <id>https://thephp.foundation/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[PHP Core Roundup #19]]></title>
            <link href="https://thephp.foundation/blog/2024/10/02/php-core-roundup-19/"/>
            <updated>2024-10-02T00:00:00+00:00</updated>
            <id>https://thephp.foundation/blog/2024/10/02/php-core-roundup-19/</id>
            <content type="html"><![CDATA[<p>Welcome back to the PHP Core Roundup series, we cover what's new and changing in PHP and provide an update on the recent proposals to change and discussions around them.</p>

<p>Our last update was almost a year ago, and that was because we felt the PHP Core Roundup posts were getting stale and our previous format was repetitive and had a lot of changes that made the posts excessively long.</p>

<h2 id="the-new-php-core-roundup-series">The New PHP Core Roundup Series</h2>

<p>Today, we are trying a new format that we got rid of text that looked like a mere changelog, to a post highlighting the general momentum of PHP development. This also means we might not get to celebrate and mention all the contributions from the PHP Foundation members and the other contributors as we did in previous posts.</p>

<p>Maintaining a mature, reliable, and widely used programming language that continues to get new features and improvements for almost 30 years involves a lot of work! Maintaining PHP documentation, php.net infrastructure, translations, triaging issues and security reports, bug fixes, mailing lists, reviewing RFCs, and packaging PHP only to name a few, we have PHP contributors and PHP Foundation members putting a commendable amount of effort into improving PHP!</p>

<p>While these PHP Core Roundup series may not write about these contributions often because we want to keep these posts exciting and resourceful, we want to spread love to all the contributors to the PHP ecosystem 💜.</p>

<h2 id="php-release-cycle-updates">PHP Release Cycle Updates</h2>

<p>In April, we voted and accepted an <a href="https://wiki.php.net/rfc/release_cycle_update">RFC</a> to update our Release Cycle policy.</p>

<p>The PHP Core team provided two years of active support, followed by only one year of security fixes. We now have a new release cycle that, from PHP 8.1 (released in 2021 November), all PHP versions now get <strong>two years of security fixes instead of one year</strong>. The two-year active support period remains the same.</p>

<p>Further, we have changed the active-support and End-Of-Life dates to align to December 31st of the calendar year. This makes the support and EOL dates more predictable.</p>

<p>Here are the updated active-support and EOL dates for the current line-up of PHP versions. Dates changed from the previously set dates are in bold.</p>

<table>
<thead>
<tr>
  <th align="center">PHP version</th>
  <th align="center">Release date</th>
  <th align="center">Active maintenance until</th>
  <th align="center">EOL date</th>
</tr>
</thead>
<tbody>
<tr>
  <td align="center">PHP 8.1</td>
  <td align="center">2021-11-25</td>
  <td align="center">2023-11-25</td>
  <td align="center"><strong>2025-12-31</strong></td>
</tr>
<tr>
  <td align="center">PHP 8.2</td>
  <td align="center">2022-12-08</td>
  <td align="center"><strong>2024-12-31</strong></td>
  <td align="center"><strong>2026-12-31</strong></td>
</tr>
<tr>
  <td align="center">PHP 8.3</td>
  <td align="center">2023-11-23</td>
  <td align="center"><strong>2025-12-31</strong></td>
  <td align="center"><strong>2027-12-31</strong></td>
</tr>
<tr>
  <td align="center">PHP 8.4</td>
  <td align="center">2024-11-21</td>
  <td align="center">2026-12-31</td>
  <td align="center">2028-12-31</td>
</tr>
<tr>
  <td align="center">PHP 8.5</td>
  <td align="center">2025-11</td>
  <td align="center">2027-12-31</td>
  <td align="center">2029-12-31</td>
</tr>
</tbody>
</table>

<h2 id="php-core-developments">PHP Core Developments</h2>

<p>A few days ago, PHP 8.4 reached its feature-freeze. PHP 8.4 is slated to be released on November 21st of this year.</p>

<p>The first release candidate for PHP 8.4 is already out — they are not production-ready, but they are available to try out and test PHP application on, either by compiling from <a href="https://github.com/php/php-src/tags">source</a>, using <a href="https://windows.php.net/qa/">Windows binaries</a>, or in <a href="https://hub.docker.com/_/php/tags?name=8.4-">Docker containers</a>.</p>

<h3 id="highlights-for-php-8.4">Highlights for PHP 8.4</h3>

<p>PHP 8.4 is an important release that brings major new features, several updates to the build dependencies and underlying libraries, and a fair bit of deprecations to iron out some of the legacy and undesirable behaviors and features in legacy PHP versions.</p>

<p>Using various approaches, each PHP version brings a lot of performance improvements and security tightening too. In PHP 8.4, we continue this in this direction with several minor internal improvements as well as noticeable improvements in JIT, and PHP extensions such as mbstring, BCMath, XML extensions, PCRE, and more.</p>

<p>Further, PHP 8.4 unbundles IMAP, Pspell, OCI, and pdo_oci extensions. It means if you wanted to continue using them, you'll have to install via PECL.</p>

<h3 id="property-hooks-and-asymmetric-visibility">Property Hooks and Asymmetric Visibility</h3>

<p>One of the most important features in PHP 8.4 is that you can now use <a href="https://wiki.php.net/rfc/property-hooks">property hooks</a> and declare property <a href="https://wiki.php.net/rfc/asymmetric-visibility">visibility separately</a> for get and set operations. Both of these features are thanks to the collaborative efforts of Ilija Tovilo and Larry Garfield. Ilija, funded by the foundation 💜, focused on the implementation. Meanwhile, Larry, a frequent contributor, worked on the specification and authored the RFC text.
Property hooks allow declaring virtual properties with "hooks" that get executed when the properties are accessed or set, and the hooks get called with the object in context, to run their own logic.</p>

<pre><code class="php">class User {
    public string $emailAddress {
        set {
            if (!filter_var($value, FILTER_VALIDATE_EMAIL)) {
                throw new ValueError('emailAddress property must be a valid email address');
            }
            $this-&gt;emailAddress = $value;
        }
    }
}

$user = new User();
$user-&gt;emailAddress = 'test@example.com'; // Allowed
$user-&gt;emailAddress = 'not an email address'; // Throws ValueError
</code></pre>

<p>Property hooks open up a vast possibilities to leading to less boilerplate code, improve readability, and make PHP classes and their APIs more intuitive.</p>

<p>The <a href="https://wiki.php.net/rfc/property-hooks">Property Hooks RFC</a> is perhaps our longest RFC ever, detailing use cases and syntax such as short functions, using them in constructor-promoted class properties, how a subclass can override or call parent property hooks, how they work with other mechanics such as readonly, magic methods, references, arrays, etc.</p>

<p>We will be covering more about details and mechaniscs of Property Hooks soon in future posts.</p>

<h3 id="asymmetric-visibility">Asymmetric Visibility</h3>

<p>Another useful feature added in PHP 8.4 is the ability to set different visibility scopes for get and set operations. This comes in situations where exposing a class property to be <em>read</em> is desired, but not to <em>write</em>.</p>

<pre><code class="php">class User {
    public private(set) int $userId;

    public function __construct() {
        $this-&gt;userId = 42; // e.g. set from a database value
    }
}

$user = new User();
echo $user-&gt;userId; // 42

$user-&gt;userId = 16; // Not allowed
// Error: Cannot modify private(set) property User::$userId from global scope
</code></pre>

<h3 id="improved-html5-parser">Improved HTML5 Parser</h3>

<p>The DOM Extension in PHP 8.4 received a massive feature-update as well. Previously, the DOM extension only offered libxml2 to parse HTML, which has not kept up with HTML5. The DOM extension now offers new <code>Dom\HTMLDocument</code> and <code>Dom\XMLDocument</code> classes with the former supporting HTML5-compliant parsing support.</p>

<p>There are lots of new improvements in this space, including not only the <a href="https://wiki.php.net/rfc/domdocument_html5_parser">HTML5 parsing support</a>, but also <a href="https://wiki.php.net/rfc/opt_in_dom_spec_compliance">DOM spec compliance</a> and several small <a href="https://wiki.php.net/rfc/dom_additions_84">additions</a> including adding support for CSS selectors.</p>

<h3 id="bcmath-extension-getting-%60number%60-class-and-new-functions">BCMath extension getting <code>Number</code> class and new functions</h3>

<p>The BCMath extension in PHP 8.4 now has classes with support for operator overloading support!</p>

<pre><code class="php">use BCMath\Number;  

$num1 = new Number('22');  
$num2 = new Number('7'); 
$num3 = new Number('100');

$result = ($num1 / $num2) + $num1 - $num2;
echo $result; // 18.1428571428
</code></pre>

<p>Now, instead of using BCMath functions such as <code>bcadd</code>, <code>bcsub</code>, <code>bcdiv</code>, etc, you can now simply use standard operators (<code>+</code>, <code>-</code>, <code>/</code>, etc.).</p>

<p>The new <code>BCMath\Number</code> class supports operator overloading, which cannot be done by userland PHP classes yet, but the BCMath extension implements it, so you can use them as if they were regular numbers.</p>

<p>The <code>BCMath\Number</code> class implements <code>Stringable</code> interface, so the objects can be used where a string is expected (like how the example above uses it with an <code>echo</code> call). Further, the class implements all <code>bc*</code> functions. For example, it's also possible to call <code>$num-&gt;add($num2)</code> or <code>$num-&gt;add('5')</code> and it returns a new <code>BCMath\Number</code> object without modifying the original object, which makes them immutable.</p>

<p>This comes from Saki Takamachi 💜, one of our new PHP Foundation members. She also made several new improvements including adding new <code>bcfloor</code>, <code>bcceil</code>, <code>bcround</code>, and <code>bcdivmod</code> functions.</p>

<h3 id="...-and-more%21">... and more!</h3>

<p>PHP 8.4 is shaping up to be an impactful version, with features such as property hooks and asymmetric visibility we mentioned above, and a healthy amount of deprecations including deprecating <a href="https://php.watch/versions/8.4/implicitly-marking-parameter-type-nullable-deprecated">implicitly nullable parameter declarations</a>.</p>

<p>Further, PHP 8.4 will be released after some popular Linux distro versions in server space reach their EOL date (such as Ubuntu 18.04 and RHEL/CentOS 7), so we took this opportunity to bump the minimum required dependency versions for Curl (>= 7.61.0), OpenSSL (>= 1.1.1). The PHP 8.4 mbstring extension is also updated to with the latest Unicode Character Database version 16 data.</p>

<p>See the lengthy <a href="https://github.com/php/php-src/blob/PHP-8.4/UPGRADING"><code>UPGRADING</code></a> file for a complete list of changes, but we will also be covering the important ones in the upcoming PHP Core Roundup posts.</p>

<h2 id="what%27s-in-the-making">What's in the making</h2>

<p>On September 30th, PHP 8.4 reached its feature-freeze, which means PHP 8.4 syntax and features are now fixed; PHP 8.4 will get ironed out and the first GA release is scheduled for November 21st.</p>

<h3 id="pie-%3A-php-installer-for-extensions">PIE : PHP Installer for Extensions</h3>

<p>PIE is a new initiative to be an eventual replacement for PECL. It's still under development, but it will be able to download, build, and install PIE-compatible extensions.</p>

<h3 id="real-time-benchmarking">Real-time benchmarking</h3>

<p>Máté Kocsis 💜 <a href="https://externals.io/message/116323">was</a> working on a real-time fully-automated and reproducible <a href="https://github.com/kocsismate/php-version-benchmarks?tab=readme-ov-file#introduction">benchmark</a> for PHP. It is now active (with daily results available <a href="https://github.com/php/real-time-benchmark-data">here</a>).</p>

<p>Using these test suits, we now have reliable data on the performance improvements or degradation in each PHP version.</p>

<hr />

<h2 id="support-php-foundation">Support PHP Foundation</h2>

<p>At The PHP Foundation, we support, promote, and advance the PHP language. We financially support ten PHP core developers to contribute to the PHP project. You can help support PHP Foundation on <a href="https://opencollective.com/phpfoundation">OpenCollective</a> or via <a href="https://github.com/sponsors/ThePHPF">GitHub Sponsors</a>.</p>

<p>A big thanks to all our sponsors — PHP Foundation is all of us!</p>

<p>Follow us on Twitter/X <a href="https://twitter.com/thephpf">@ThePHPF</a> or  <a href="https://phpc.social/@thephpf">Mastodon</a> to get the latest updates from the Foundation.</p>

<p>💜️ 🐘</p>

<blockquote>
  <p>PHP Roundup is prepared by Ayesh Karunaratne from <strong><a href="https://php.watch">PHP.Watch</a></strong>, a source for PHP News, Articles, Upcoming Changes, and more.</p>
</blockquote>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[The PHP Foundation Calls for Sponsors: Help&nbsp;Shape the Future of PHP]]></title>
            <link href="https://thephp.foundation/blog/2024/09/30/call-fo-sponsors/"/>
            <updated>2024-09-30T00:00:00+00:00</updated>
            <id>https://thephp.foundation/blog/2024/09/30/call-fo-sponsors/</id>
            <content type="html"><![CDATA[<p>Hey there, PHP enthusiasts and tech leaders&#33; It's that time of the year again when everyone's crunching numbers and deciding on budgets. We've got an opportunity for you to make a real impact on the PHP ecosystem. Let's dive in.</p>

<p><strong>Don't need convincing? <a href="https://thephp.foundation/sponsor/">Sponsor us now</a>!</strong></p>

<h2 id="join-us%5C%21-fund-the-future-of-web-development">Join us&#33; Fund the Future of Web Development</h2>

<p>We just opened applications for PHP core language contributors: <a href="https://thephp.foundation/blog/2024/09/17/application-form-2025/">The PHP Foundation application form for 2025 is now open</a>.</p>

<p>Here's the deal: <strong>the more sponsors we get, the more ambitious we can be with our plans</strong>. At a minimum, we finance maintenance and security support, but with more funding, we can continue high-reaching projects.</p>

<p>Your sponsorship could help us:</p>

<ul>
<li><strong>Tackle long-standing bugs</strong> that have been bothering developers for ages.</li>
<li><strong>Implement cool new features</strong> that will make PHP even more awesome.</li>
<li><strong>Improve performance and security</strong> (because who doesn't want a faster PHP).</li>
</ul>

<p>And if we get enough sponsors, we might even venture into some experimental territory. Your support could lead to the next big breakthrough in PHP development.</p>

<p><figure class="max-w-screen-md mx-auto text-center" id="quote-kévin-dunglas">
    <svg class="w-10 h-10 mx-auto mb-3 text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 14">
        <path d="M6 0H2a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v1a3 3 0 0 1-3 3H2a1 1 0 0 0 0 2h1a5.006 5.006 0 0 0 5-5V2a2 2 0 0 0-2-2Zm10 0h-4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v1a3 3 0 0 1-3 3h-1a1 1 0 0 0 0 2h1a5.006 5.006 0 0 0 5-5V2a2 2 0 0 0-2-2Z"/>
    </svg>
    <blockquote>
        <p class="text-xl italic text-gray-900">“To achieve exceptional performance and simplify application deployment, FrankenPHP pushes the PHP engine to its limits and uses it in atypical ways (ZTS, musl libc, specific timeout management...).<br />
<br />
This would not be possible without the excellent work done by the&nbsp;PHP&nbsp;Foundation's team: they correct the problems we report, continuously improve performance and make the engine always more generic and modular, which not only enables us to innovate in FrankenPHP, but also benefits the entire ecosystem by making PHP faster and more reliable.<br />
<br />
By sponsoring the foundation, you're investing in the future of PHP!”</p>
    </blockquote>
    <figcaption class="flex items-center justify-center mt-3 space-x-3 rtl:space-x-reverse">
        <img class="w-10 h-10 rounded-full" src="/assets/post-images/2024/report-2023/kevin_dunglas.png" alt="profile picture">
        <div class="flex items-center">
            <cite class="pl-0.5 font-medium text-gray-900">Kévin Dunglas, </cite>
            <cite class="pl-1 text-gray-500">author of <a href="https://frankenphp.dev/">FrankenPHP</a></cite>
        </div>
    </figcaption>
</figure>
</p>

<h2 id="2025%3A-the-year-php-turns-30-and-it%27s-going-to-be-epic%5C%21">2025: The Year PHP Turns 30 (and It's Going to Be Epic&#33;)</h2>

<p>PHP is turning 30 in 2025, and we're planning a special celebration&#33; By sponsoring the PHP Foundation, you'll be front and center for this milestone year. Here's what we've got cooking:</p>

<ul>
<li>A massive collaboration with the marketing teams from Laravel, JetBrains, and Zend by Perforce. It's like the Avengers of the PHP world coming together.</li>
<li>A much-needed facelift for php.net. Let's make it shine for PHP’s 30th birthday&#33;</li>
</ul>

<p>Imagine your company being visible as a part of this historic moment. Pretty cool, right?</p>

<h2 id="why-sponsor-the-php-foundation%3F">Why Sponsor the PHP Foundation?</h2>

<p>You might be wondering, "Why should I sponsor the PHP Foundation?" Let us list some of the reasons:</p>

<ol>
<li><strong>Visibility:</strong> Your brand will be seen by millions of developers worldwide. That's a lot of eyeballs.</li>
<li><strong>Influence:</strong> Help shape the future of one of the most widely used programming languages on the web.</li>
<li><strong>Security:</strong> Without sufficient funding, the PHP language will lack the resources to promptly address bugs your company runs into.</li>
<li><strong>Recruitment:</strong> Attract top PHP talent by showing your commitment to the language.</li>
<li><strong>Giving Back:</strong> If PHP has helped your business grow, here's your chance to return the favor.</li>
<li><strong>Tech Cred:</strong> Nothing says "we're serious about web development" like sponsoring a major programming language.</li>
</ol>

<h2 id="ready-to-jump-in%3F">Ready to Jump In?</h2>

<p>Here's how you can get started:</p>

<ol>
<li>Check out our sponsorship tiers on our website: <a href="https://thephp.foundation/sponsor/">thephp.foundation/sponsor</a>.</li>
<li>Reach out to us at <a href="&#109;&#x61;i&#108;&#x74;&#111;&#58;&#x63;&#111;&#x6e;&#x74;&#97;&#x63;t&#64;&#x74;&#104;&#101;&#x70;&#104;&#x70;&#x2e;&#102;&#x6f;&#x75;&#110;&#x64;a&#116;&#x69;&#111;&#110;">contact@thephp.foundation</a>.</li>
<li>Let's chat about how we can make this partnership beneficial for both of us.<br />
Office hours call: <a href="http://cal.com/pronskiy/php-foundation-office-hours">cal.com/pronskiy/php-foundation-office-hours</a></li>
</ol>

<h2 id="stay-in-the-loop">Stay in the Loop</h2>

<p>Don't miss out on any PHP Foundation news. Follow us on:</p>

<ul>
<li>LinkedIn: <a href="https://www.linkedin.com/company/phpfoundation">PHP Foundation</a></li>
<li>Twitter/X: <a href="https://x.com/thephpf">@ThePHPF</a></li>
<li>Mastodon: <a href="https://phpc.social/@thephpf">@thephpf@phpc.social</a></li>
</ul>

<p>And for those who prefer their news in their inbox, subscribe to our email newsletter. We send ~1–2 emails a month – just the good stuff about PHP and the Foundation.</p>

<p><div class="px-4 pt-3 border-b border-t -mx-4 border-gray-200">
    <div class="bg-white py-8">
        <div class="mx-auto grid max-w-7xl grid-cols-1 gap-10 lg:grid-cols-12 lg:gap-8">
            <div class="max-w-xl text-4xl font-medium tracking-tight text-gray-900 lg:col-span-6">
                Subscribe to The PHP Foundation newsletter
            </div>
            <form method="POST"
                  action="https://php-foundation.mailcoach.app/subscribe/9be4e2bd-f9d8-475c-b00e-2dcc4cf90056"
                  class="w-full max-w-md lg:col-span-6">
                <div class="flex gap-x-4">
                    <label for="email-address" class="sr-only">Email address</label>
                    <input id="email-address" name="email" type="email" autocomplete="email" required
                           class="min-w-0 flex-auto rounded-md border-0 px-3.5 py-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                           placeholder="Enter your email">
                    <button type="submit"
                            class="inline-block py-2 no-underline px-6 !text-white bg-[#7f52ff] rounded-3xl hover:bg-[rgba(127,82,255,.8)]">
                        Subscribe
                    </button>
                </div>
                <div class="mt-4 text-sm leading-6 text-gray-900">
                    No spam. We only send 1–2 emails per month.
                </div>
            </form>
        </div>
    </div>
</div>
</p>

<p>P.S. If you have any questions or wild ideas about how you'd like to support PHP, don't hesitate to reach out. We're all ears.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[The PHP Foundation application form for 2025 is now open]]></title>
            <link href="https://thephp.foundation/blog/2024/09/17/application-form-2025/"/>
            <updated>2024-09-17T00:00:00+00:00</updated>
            <id>https://thephp.foundation/blog/2024/09/17/application-form-2025/</id>
            <content type="html"><![CDATA[<p>The PHP Foundation is a non-profit organization, started in 2021 by Acquia, Automattic, Craft CMS, JetBrains, Laravel, PrestaShop, Private Packagist, Symfony, Tideways, and Zend by Perforce with a mission to support, advance, and develop the PHP language.</p>

<p>The foundation pays <a href="https://thephp.foundation/structure/#core_developers">10 developers</a> to work on the language. See what the foundation achieved in 2023 in the <a href="https://thephp.foundation/blog/2024/02/26/transparency-and-impact-report-2023/">Impact and transparency report</a>.</p>

<p>We’re opening a new round of applications for developer positions. We intend to decide on who we will hire by the end of October. If selected, you would start your work January 1st, 2025&#46;</p>

<p>The application form will be <strong>open until October 10, 2024</strong>.</p>

<p style="text-align: center;">
<a href="https://forms.gle/Ji7Vvj1y2bMf9pUz7" class="inline-block py-2 no-underline px-6 !text-white bg-[#7f52ff] rounded-3xl hover:bg-[rgba(127,82,255,.8)]">Apply</a>
</p>

<div class="alert">
    <span class="inline-block font-bold">Note: This is not a job for PHP developers or aspiring PHP developers.</span><br> 
The development of PHP is done in the С programming language, and requires proficiency in system programming.
</div>

<h2 id="note%3A-team-size-is-unlikely-to-grow">Note: Team size is unlikely to grow</h2>

<p>While we won’t rule out the possibility of expanding our team, it’s likely we won’t pay more than the current number of 10 developers. Mindful of our budget limitations, we may rather consider restructuring or adjusting our team to make space for any outstanding applications that better help us meet our goals.</p>

<h2 id="what-are-the-requirements%3F">What are the requirements?</h2>

<p>As before, we require previous experience in PHP core development. Ideally you should have all, but at least some of the following:</p>

<ul>
<li>Pull-requests / commits to <a href="https://github.com/php/php-src/">php/php-src</a></li>
<li>Experience in writing PHP extensions</li>
<li>Participation in PHP mailing lists</li>
<li>Contributions to other open-source projects</li>
</ul>

<p>This time, however, we have a clearer idea of the tasks that can be engaged in and so the pool of considered candidates will be wider.</p>

<h2 id="what-are-you-going-to-work-on%3F">What are you going to work on?</h2>

<p>Strategic areas we’d like you to work on:</p>

<ul>
<li>Security</li>
<li>Performance</li>
<li>Infrastructure</li>
<li>Web APIs (json, PDO, streams, etc.)</li>
</ul>

<p>This is not an exhaustive list. We encourage you to <strong>provide as detailed a description of what you want to work on as possible</strong>.</p>

<p>Our primary selection criterion is <strong>pragmatism</strong>. We place greater emphasis on solutions that improve the developer experience and benefit businesses that rely on PHP, rather than new syntax features.</p>

<p>Out of scope:</p>

<ul>
<li>Pure documentation work</li>
<li>PHP packages</li>
<li>Websites</li>
<li>Translations</li>
</ul>

<h2 id="what-does-working-for-the-php-foundation-look-like%3F">What does working for the PHP Foundation look like?</h2>

<p>Working for the PHP Foundation offers a lot of freedom, but it also requires discipline. Your work will roughly consist of the following:</p>

<ul>
<li>40% Triaging issues and fixing bugs</li>
<li>30% Working on strategic areas</li>
<li>20% Code reviews</li>
<li>&#62;10% Preparing RFCs and developing new language features</li>
</ul>

<p>As you can see, developing new RFCs is a fairly small part of the job. Most of the work is typical maintenance of an open source project.</p>

<p>We are a fully distributed team. You can work from any place<strong>&#42;</strong> and at any time. All communication is asynchronous via Slack, GitHub, and Email. We meet for synchronous calls 1-2 times a month.</p>

<p>Your work should be in line with the foundation’s mission statement, and we expect you to follow <a href="https://thephp.foundation/code-of-conduct/">the code of conduct</a>.</p>

<blockquote>
  <p><strong>PHP Foundation Mission Statement</strong></p>
  
  <p>The PHP Foundation is a collective of people and organizations relying on the PHP language. Its mission is to ensure the long-term prosperity of the PHP language. The PHP Foundation focuses on providing financial support and guidance to PHP language developers to support its goals of improving the language for its users, providing high-quality maintenance, and improving the PHP language project to retain current contributors and to integrate new contributors. The PHP Foundation aims to promote the public image of the PHP language in the interest of retaining existing and gaining new users and contributors.</p>
</blockquote>

<p><em><strong>&#42;</strong> We do not consider applications from persons residing in sanctioned territories.</em></p>

<h2 id="how-to-apply%3F">How to apply?</h2>

<p>Submit your application now and we will get back to you shortly. If you have any questions or suggestions, reach out to contact@thephp.foundation.</p>

<p style="text-align: center;">
<a href="https://forms.gle/Ji7Vvj1y2bMf9pUz7" target="_blank" class="inline-block py-2 no-underline px-6 !text-white bg-[#7f52ff] rounded-3xl hover:bg-[rgba(127,82,255,.8)]">Open submission form</a>
</p>

<iframe src="https://docs.google.com/forms/d/e/1FAIpQLSeYNVQoK2r9c6EtoMnDaIpLzDc95egt1a1mcfiHTovqMDhFuw/viewform?embedded=true" width="100%" height="1693" frameborder="0" marginheight="0" marginwidth="0">Loading…</iframe>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP Foundation Update, September 2024]]></title>
            <link href="https://thephp.foundation/blog/2024/09/12/php-foundation-update-september-2024/"/>
            <updated>2024-09-12T00:00:00+00:00</updated>
            <id>https://thephp.foundation/blog/2024/09/12/php-foundation-update-september-2024/</id>
            <content type="html"><![CDATA[<p><code>&lt;?= 'Hello world!';</code></p>

<p>Here are some updates we’d like to share with you.</p>

<h2 id="generics-research-progress">Generics Research Progress</h2>

<p>One of our most anticipated projects is the research into generics for PHP. In August, we published a <a href="https://thephp.foundation/blog/2024/08/19/state-of-generics-and-collections/">comprehensive report on the state of generics and collections in PHP</a>. This research is a crucial step towards potentially implementing generics in future PHP.  The further direction has not been decided yet, so we encourage the PHP community to review the report and provide feedback.</p>

<h2 id="welcoming-ben-marks-as-official-php-foundation-ambassador">Welcoming Ben Marks as Official PHP Foundation Ambassador</h2>

<p>We are thrilled to announce that <a href="https://www.linkedin.com/in/bhmarks/">Ben Marks</a> has stepped up as the official PHP Foundation ambassador. Ben is Director Global Market Development at Shopware, and  was a co-Founder of the Magento Association.</p>

<p>In this role, Ben will:</p>

<ul>
<li>Serve as a liaison between the Foundation and the broader PHP community.</li>
<li>Represent the Foundation at conferences and events.</li>
<li>Help communicate our initiatives and gather feedback from the community.</li>
</ul>

<p>We're confident that Ben's contributions will strengthen our connections within the PHP world and help us better serve the community's needs.</p>

<p>Please give Ben a warm welcome&#33;</p>

<h2 id="website-updates-in-progress">Website Updates in Progress</h2>

<p>We’d like to make sure our <strong><em><a href="https://thephp.foundation">thephp.foundation</a></em></strong> website provides clear information about what we do, how sponsors can support the foundation, and what are the benefits on top of supporting the PHP language maintenance and development. Please share what you think is missing on the website or is not clearly described. Roast the website so we can improve&#33;</p>

<h2 id="shout-out-to-our-sponsors">Shout-out to our Sponsors</h2>

<p>We want to extend a big thank you to all the individuals and organizations supporting The PHP Foundation. This time, we’d like to give special recognition to <a href="https://www.sovereigntechfund.de/">Sovereign Tech Fund</a> for their incredible investment this year. And a big thank you to <a href="https://cybozu.co.jp/en/">Cybozu</a>, <a href="http://Les-Tilleuls.coop">Les-Tilleuls.coop</a>, <a href="https://www.pixiv.net/en/">pixiv Inc.</a>, <a href="https://www.mercari.com/">Mercari Inc.</a>, <a href="https://aternos.gmbh/en/">Aternos GmbH</a>, <a href="https://en.ardennes-etape.be/">Ardennes-étape</a>, <a href="https://chstudio.fr/">CH Studio</a>, and <a href="https://spysystem.dk/">SPY</a>.</p>

<p>We’re also deeply grateful to our major sponsors for their continued commitment: <a href="https://automattic.com/">Automattic</a>, <a href="https://www.jetbrains.com/">JetBrains</a>, <a href="https://packagist.com/">Private Packagist</a>, <a href="https://craftcms.com/">Craft CMS</a>, <a href="https://www.zend.com/">Zend by Perforce</a>, <a href="https://tideways.com/">Tideways</a>, and <a href="https://symfony.com/">Symfony</a>.</p>

<p>Thank you so much to <a href="https://thephp.foundation/#sponsors">everyone who sponsored</a> – the PHP Foundation is all of us&#33;</p>

<p><br></p>

<p>That’s all for today. Follow us on X/Twitter <a href="https://twitter.com/thephpf">@ThePHPF</a>, Mastodon <a href="https://phpc.social/@thephpf">phpc.social/@thephpf</a>, and <a href="https://www.linkedin.com/company/phpfoundation/">LinkedIn</a> to get the latest updates from the PHP Foundation. 
💜🐘</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[State of Generics and Collections]]></title>
            <link href="https://thephp.foundation/blog/2024/08/19/state-of-generics-and-collections/"/>
            <updated>2024-08-19T00:00:00+00:00</updated>
            <id>https://thephp.foundation/blog/2024/08/19/state-of-generics-and-collections/</id>
            <content type="html"><![CDATA[<p>Generics have been on the list of wanted features for a long time by numerous PHP developers. The topic is often brought up in "What's New in PHP?" talks as well during Q&amp;A.</p>

<p>In this article we will be exploring the different approaches, and what their current state is.</p>

<ul>
<li><a href="#full-reified-generics">Full Reified generics</a></li>
<li><a href="#collections">Collections</a></li>
<li><a href="#other-alternatives">Other alternatives</a>

<ul>
<li><a href="#static-analysis">Static Analysis</a></li>
<li><a href="#erased-generic-type-declarations">Erased Generic Type Declarations</a></li>
<li><a href="#fully-erased-type-declarations">Fully Erased Type Declarations</a></li>
</ul></li>
<li><a href="#generic-arrays">Generic Arrays</a>

<ul>
<li><a href="#fluid-arrays">Fluid Arrays</a></li>
<li><a href="#static-arrays">Static Arrays</a></li>
</ul></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>

<h1 id="full-reified-generics">Full Reified generics</h1>

<p>With generics you can define classes with placeholders for the types of their properties and methods. These can then be specified when instances of the class are created. This enables code reusability and type safety across different data types.  "Reified" generics are implementations where the generic type information is defined and carried through to runtime, allowing for runtime enforcement of generic requirements.</p>

<p>As PHP syntax, this could look like:</p>

<pre><code>class Entry&lt;KeyType, ValueType&gt;
{
    public function __construct(protected KeyType $key, protected ValueType $value)
    {
    }

    public function getKey(): KeyType
    {
        return $this-&gt;key;
    }

    public function getValue(): ValueType
    {
        return $this-&gt;value;
    }
}

new Entry&lt;int, BlogPost&gt;(123, new BlogPost());
</code></pre>

<p>In the instantiated class, the generic type <code>KeyType</code> will be replaced with <code>int</code>, and each instance of <code>ValueType</code> with <code>BlogPost</code>, resulting in an object behaving like the following class definition:</p>

<pre><code>class IntBlogPostEntry
{
    public function __construct(protected int $key, protected BlogPost $value)
    {
    }

    public function getKey(): int
    {
        return $this-&gt;key;
    }

    public function getValue(): BlogPost
    {
        return $this-&gt;value;
    }
}
</code></pre>

<p>There have been a few attempts in the past to add this functionality to PHP as well. Nikita Popov attempted the <a href="https://github.com/PHPGenerics/php-generics-rfc/issues/45">most comprehensive experimental implementation</a> in 2020/2021, following up on <a href="https://wiki.php.net/rfc/generics">a draft RFC</a> from 2016, and a <a href="https://www.reddit.com/r/PHP/comments/j65968/comment/g83skiz/">reddit post</a> summarizing the remaining challenges.</p>

<p>At the start of this year, under the auspices of the PHP Foundation, Arnaud Le Blanc <a href="https://github.com/arnaud-lb/php-src/pull/4">restarted this effort</a>, using Nikita's work as a starting point. Although many technical issues have been addressed, plenty of them are still unresolved.</p>

<p>A key challenge is type inference. The use of generics tends to increase code verbosity because it requires type arguments to be specified each time a generic type is referenced. This is demonstrated in the following PHP code snippet:</p>

<pre><code>function f(List&lt;Entry&lt;int,BlogPost&gt;&gt; $entries): Map&lt;int, BlogPost&gt;
{
    return new Map&lt;int, BlogPost&gt;($entries);
}

function g(List&lt;BlogPostId&gt; $ids): List&lt;BlogPost&gt;
{
    return map&lt;int, BlogPostId, BlogPost&gt;($ids, $repository-&gt;find(...));
}
</code></pre>

<p>Type inference can reduce this verbosity by letting the compiler deduce the appropriate types automatically for us. For instance, in the examples above, the compiler might automatically determine the correct types for <code>new Map()</code> and <code>map()</code>. However, this is hard in PHP. Quoting Nikita, "primarily due to the very limited view of the codebase the PHP compiler has (it only sees one file at a time)".</p>

<p>Consider the following example:</p>

<pre><code>class Box&lt;T&gt;
{
    public function __construct(public T $value) {}
}

new Box(getValue());
</code></pre>

<p>In this scenario, the type of the getValue() expression is unknown until the function is loaded at runtime, making it impossible to infer <code>T</code> in <code>new Box(...)</code> during compilation.</p>

<p>We could assign <code>T</code> at runtime based on the return <em>value</em> of the function, but this would result in unstable typing. In the previous example the type of <code>new Box()</code> would depend on the <em>implementation</em> of the return value of <code>getValue()</code>, which may be too specific: combine that with the fact that Box is invariant, and this code would break very quickly when trying to do anything useful with the Box instance:</p>

<pre><code>interface ValueInterface {}
class A implements ValueInterface {}
class B implements ValueInterface {}

function getValue(): ValueInterface
{
    return new A();
}

function doSomething(Box&lt;ValueInterface&gt; $box)
{
}

$box = new Box(getValue()) // runtime: Box&lt;A&gt;, statically: Box&lt;ValueInterface&gt;
doSomething($box); // accepts Box&lt;ValueInterface&gt;, not Box&lt;A&gt;
</code></pre>

<p>Typing is most useful when it’s based on compile-time / static information that doesn’t depend on the implementation.</p>

<p>Note: In this example, <code>Box</code> is invariant, as it is often the case of generic classes. This means that <code>Box&lt;X&gt;</code> is neither a sub-type or a super-type of <code>Box&lt;Y&gt;</code> regardless of the relationship between <code>X</code> and <code>Y</code>, so <code>Box&lt;A&gt;</code> is not a sub-type of <code>Box&lt;ValueInterface&gt;</code>, and <code>doSomething()</code> can not accept a <code>Box&lt;A&gt;</code>.</p>

<p>A generic class is invariant when one of its type placeholders is used both in read (e.g. as a return type) and write (e.g. a parameter type) positions at the same time. A property type is both in read and write position.</p>

<p>To understand why, consider the following example:</p>

<pre><code>function changeValue(Box&lt;ValueInterface&gt; $box)
{
    $box-&gt;value = new B();
}
</code></pre>

<p>The <code>changeValue()</code> function accepts a <code>Box&lt;ValueInterface&gt;</code>, thus should be able to assign any sub-type of <code>ValueInterface</code> to <code>$box-&gt;value</code>. However, if we pass a <code>Box&lt;A&gt;</code> (with <code>A</code> a sub-type of <code>ValueInterface</code>), this contract breaks when we assign a value that is a sub-type of <code>ValueInterface</code> but not of <code>A</code>.</p>

<p>The common solution in other generic languages is to allow a type parameter to be marked variant in only one direction (typically "in" or "out"), provided it is used only in a parameter or return position, respectively.  That allows that type parameter to be contravariant or covariant, as appropriate.</p>

<h3 id="hybrid-approach-to-type-inference">Hybrid Approach to Type Inference</h3>

<p>To address these challenges, we explored a hybrid approach, that lets us implement static type inference of generic parameters without having the full information available at compile time. This approach represents unknown types as symbols at compile time (e.g. the type of the expression <code>getValue()</code> is represented as <code>fcall&lt;getValue&gt;</code>). Symbolic types can be resolved at runtime when needed after functions and classes have been loaded, at a fraction of the cost of running the entire analysis at runtime. This operation can be cached (in inline caches) for the duration of the request, and maybe in caches similar to the inheritance cache.</p>

<p>A proof of concept was implemented, and used to implement data-flow based, local, unidirectional type inference of generic type parameters, with the same behaviour as PHPStan/Psalm. The approach works, and could be used to experiment with other flavours of type inference.</p>

<h3 id="performance-considerations">Performance Considerations</h3>

<p>Another concern with generics is their impact on performance. Preliminary benchmarks indicated:</p>

<ul>
<li>Generics do not affect the performance of non-generic code.</li>
<li>Simple generic code shows a modest performance degradation of about 1-2% compared to specialized code.</li>
</ul>

<p>However, later exploration has shown that compound types (such as unions) can lead to super-linear time complexity in type checking, potentially resulting in more substantial performance drawbacks. For example, checking whether <code>A|B</code> accepts <code>B</code> is linear, but checking <code>Box&lt;A|B&gt;()</code> against <code>Box&lt;A|B&gt;()</code> is O(nm).</p>

<p>Super-linear complexity is also reached when merging compound types during the resolution of symbolic types.</p>

<h3 id="future-directions">Future Directions</h3>

<p>Ongoing challenges for reified generics include:</p>

<ul>
<li>Evaluating the effects of compound types and extreme cases</li>
<li>Implement type-checking inline caches, and research more sophisticated algorithms for checking compound types</li>
<li>Exploring eager-autoloading (preloading, but automatic), or inheritance-cache alike, to reduce the amount of symbolic types</li>
</ul>

<h1 id="collections">Collections</h1>

<p>One of the main use cases for generics that often gets brought up is the need for typed arrays. In PHP, the swiss-army knife array type can be used (and abused) for lots of reasons. But you can't currently enforce the types to be used as key or value.</p>

<p>In a parallel project, we have been working on a dedicated Collections syntax as a less-challenging alternative to full generics.</p>

<p>Collections would come in three flavours: sets, sequences, and dictionaries. Sets and Sequences only define a value type, whereas Dictionaries have key and value types. The syntax of these could be as follows:</p>

<pre><code>class Article
{
    public function __construct(public string $subject) {}
}

collection(Seq) Articles&lt;Article&gt;
{
}

collection(Dict) YearBooks&lt;int =&gt; Book&gt;
{
}
</code></pre>

<p>You can then instantiate sequences and collections like you would do with a normal class:</p>

<pre><code>$a1 = new Articles();
$b1 = new YearBooks();
</code></pre>

<p>Sequences and Dictionaries will automatically have <a href="https://github.com/php/php-src/compare/master...derickr:php-src:collections&#35;diff-eeb1e0848e9a25b7492398bf5ddf9be15995a67d44a23c336869bf9f36910d1b">many methods defined</a> on them, providing a base functionality like PHP already has with the myriad of <code>array_*</code> functions. If you use the defined methods to add or update elements in the collection, then the type for keys and values have to match the ones as defined on the collection.</p>

<p>In the example above, the <code>add()</code> method for the YearBooks dictionary then requires int to be used as key, and Book as value. For the main manipulation methods (add, get, unset, and isset), ArrayAccess style overloaded operations will also work, as well as potentially operator overloads.</p>

<p>One of the drawbacks of Collections is that you need to declare them. Following adopted practise, that would mean a single line declaration in a separate file for each collection.</p>

<p>Another concern is potentially higher memory usage, as for each class PHP will have to keep a corresponding class entry, including a list of all the associated methods.</p>

<p>And a third concern is that there is no instanceof/is-a relationship between collections of compatible types, for example:</p>

<pre><code>class A {}
class B extends A {}

seq As&lt;A&gt; {}
seq Bs&lt;B&gt; {}

new B() instanceof A // true
new Bs() instanceof As // false
</code></pre>

<p>Or:</p>

<pre><code>namespace Foo;
seq As&lt;A&gt; {}

namespace Bar;
seq As&lt;A&gt; {}

namespace;
new Foo\As instanceof Bar\As; // false
</code></pre>

<p>Collections, although less powerful, can be an alternative to generics in many use cases, but without much of the complexity. The implementation as outline above is also significantly easier. An <a href="https://github.com/derickr/php-src/tree/collections">experimental branch is also available</a>.  However, if full generics are found to be viable and supported, implementing Seq, Set, and Dict directly on standard generics would be significantly preferable.</p>

<p>Larry Garfield has <a href="https://github.com/Crell/php-rfcs/blob/master/collections/research-notes.md">conducted research</a> into other languages and how expansive their collection APIs are.  It's still in rough form, but the consensus seems to be "include everything", possibly broken up into discrete interfaces.  The rough recommendations at the end of the document suggest a likely way forward.</p>

<p>You can find a patch for collections at <a href="https://github.com/php/php-src/pull/15429">https://github.com/php/php-src/pull/15429</a></p>

<h1 id="other-alternatives">Other alternatives</h1>

<h2 id="static-analysis">Static Analysis</h2>

<p>Recent years have seen the emergence of static analysers. Both <a href="https://phpstan.org/blog/generics-in-php-using-phpdocs">PHPStan</a> and <a href="https://psalm.dev/docs/annotating_code/templated_annotations/">Psalm</a> support generics via doc block annotations, and are frequently used in open source libraries and private projects.</p>

<p>Here is an example of a generic Dict class when using PHPStan and Psalm:</p>

<pre><code>/**
 * @template Key
 * @template Value
 */
class Dict
{
    /**
     * @param array&lt;Key,Value&gt; $entries
     */
    public function __construct(private array $entries) {}

    /**
     * @param Key $key
     * @param Value $value
     */
    public function set($key, $value): self
    {
        $this-&gt;entries[$key] = $value;
        return $this;
    }
}

/** @param Dict&lt;string,string&gt; $dict */
function f($dict) {}

$dict = new Dict([1 =&gt; 'foo']);
$dict-&gt;set("foo", "bar"); // Static analyser error
$dict-&gt;set(1, "bar");     // Ok
f($dict);                 // Static analyser error
</code></pre>

<p>The docblock annotations are named “template” for historical reasons, but they implement a generics flavour very close to Java’s: Generic types are checked at static analysis time, and are not visible at runtime.</p>

<p>This offers some benefits of generics, such as type safety, with the following drawbacks:</p>

<ul>
<li>Docblocks can be verbose</li>
<li>Type checking requires running a separate tool (like PHPStan or Psalm)</li>
<li>Generic type information is entirely unavailable at runtime.</li>
<li>Generic type information is not enforced at runtime (so if you don't run a static analysis tool in advance, they accomplish nothing).</li>
</ul>

<h2 id="erased-generic-type-declarations">Erased Generic Type Declarations</h2>

<p>Seeing the difficulties with implementing reified generics in PHP core, it has been proposed to implement them only syntactically, leaving the task of type checking to static analysers.</p>

<p>In this alternative, the PHP syntax would be changed so that type declarations, class declarations, and function declarations accept generic syntax, but the PHP engine would not check them.</p>

<p>We can call these “Erased” type declarations because the engine will simply ignore them at runtime. This alternative could be implemented in various ways:</p>

<ul>
<li>As part of php-src</li>
<li>In an extension</li>
<li>In an autoloader</li>
<li>etc</li>
</ul>

<p>Here is what the same Dict class as above would look like:</p>

<pre><code>class Dict&lt;Key,Value&gt;
{
    public function __construct(private array&lt;Key,Value&gt; $entries) {}

    public function set(Key $key, Value $value): self
    {
        $this-&gt;entries[$key] = $value;
        return $this;
    }
}

function f(Dict&lt;string,string&gt; $dict) {}

$dict = new Dict([1 =&gt; 'foo']);
$dict-&gt;set("foo", "bar"); // Static analyser error
$dict-&gt;set(1, "bar");     // Ok
f($dict);                 // Static analyser error
</code></pre>

<p>This addresses the docblock verbosity issue of the Static Analysis alternative, but this introduces an inconsistency: Type declarations cause coercion, but erased generic type declarations will not.</p>

<p>Consider the following example:</p>

<pre><code>class StringList
{
    public function add(string $value)
    {
        $this-&gt;values[] = $value;
    }
}

class List&lt;T&gt;
{
    public function add(T $value)
    {
        $this-&gt;values[] = $value;
    }
}

$list = new StringList();
$list-&gt;add(123); // coerced to string

$list = new List&lt;string&gt;();
$list-&gt;add(123); // NOT coerced to string
</code></pre>

<p>In this scenario, the first call to <code>add()</code> will coerce the argument to string, but not the second one.</p>

<p>In languages like Java, which has erased generics on top of a traditional type system, the compiler does type checking, so inconsistencies like the above do not exist. However, in PHP these are unavoidable.</p>

<p>Another drawback of erased generics is they are not visible at runtime. This would prevent pattern matching from seeing generic type arguments, for example.</p>

<h2 id="fully-erased-type-declarations">Fully Erased Type Declarations</h2>

<p>One way to address the inconsistency issue of Erased Generics is to change all type declarations to be erased. This could be opt-in with a <code>declare()</code> statement:</p>

<pre><code>declare(types=erased);
</code></pre>

<p>In this alternative, the engine would stop checking types at runtime. In the previous example, both calls to <code>add()</code> would have the same behaviour: the value is not coerced. It is then up to the user to check types with an analyser.</p>

<p>This is not uncommon in mainstream interpreted languages, as all of Javascript (via TypeScript), Python, and Ruby have fully erased type declarations.</p>

<p>Letting users opt-in for fully erased typing and generics on a per-file basis would be another option to look at, and would make working with PHPStan/Psalm generics less verbose. Some additional benefits of this solution include:</p>

<ul>
<li>Short-term performance improvements due to the lack of type checking at runtime in opted-in code.</li>
<li>The potential for extending the type system with advanced types like non-empty-string, list, int<range>, class-string, conditional types, and more.</li>
</ul>

<p>However, there would also be significant downsides:</p>

<ul>
<li>It's unclear what impact erased types would have on reflection, or libraries that depend on reflection.</li>
<li>It would make type enforcement dependent on a developer actively choosing to run a static analysis tool, and the majority of the ecosystem right now doesn't use one to begin with.</li>
<li>It effectively creates a third "type mode" that developers would have to account for, in addition to strict and weak typing today.  (Since code with user-defined pseudo types wouldn't be compatible with the type-enforced modes.)</li>
<li>It would not actually resolve the "some types are enforced but not others" question, as anyone who wanted to use generics but not fully-erased types would still be left with partial-enforcement.</li>
<li>PHP is currently unique among major scripting languages for having enforced types. That's a benefit and market advantage we would lose.</li>
</ul>

<h1 id="generic-arrays">Generic Arrays</h1>

<p>This blog post discusses generic objects, but what about arrays?</p>

<h2 id="fluid-arrays">Fluid Arrays</h2>

<p>Arrays are copy on write: Modifying them creates a new copy (if they are referenced elsewhere), and modifies the copy instead. This makes arrays safe to pass around as you don’t need to worry about other functions modifying them (unless passed by reference).</p>

<p>From a typing perspective this means that the type of an array is always defined by its content, and this type can not change because modifying an array creates a new one.</p>

<p>From a generics perspective this is a very convenient property, as this makes arrays variant: They can have supertypes and subtypes, just like any (non-generic) class. In other words, the following code is type safe:</p>

<pre><code>class A {}
class B extends A {}

function f(array $a) {}
function g(array&lt;A&gt; $a) {}
function h(array&lt;B&gt; $a) {}

$array = [new B()];

f($array);
g($array);
h($array);
</code></pre>

<p>Usually, generic containers are invariant because their type placeholders are used in both read and write positions. This is not the case for arrays because they are semantically immutable / copy on write.</p>

<p>So the natural way to implement generic arrays is just as explained above: Let their content define their type. This is illustrated in the example below:</p>

<pre><code>$a = [1];       // array&lt;int&gt;
$b = [new A()]; // array&lt;A&gt;
$c = $b;        // array&lt;A&gt;
$c[] = new B(); // array&lt;A|B&gt;
$b;             // array&lt;A&gt;
</code></pre>

<p>This does provide type safety, because what matters is that types are checked at API boundaries—when passing arguments to functions, returning values, updating object properties:</p>

<pre><code>function f(array&lt;int&gt; $a) {}

$a = [1];
f($a); // ok

$b = [new A()];
f($b); // error
</code></pre>

<p>A PoC has been implemented, but the performance impact is still uncertain. Another issue is that supporting references and/or typed properties may not be possible.</p>

<h2 id="static-arrays">Static Arrays</h2>

<p>An alternative to Fluid Arrays is to fix the type at instantiation time:</p>

<pre><code>$a = array&lt;int&gt;(1); // array&lt;int&gt;
$a[] = new A();     // error
</code></pre>

<p>However, this alternative is very orthogonal to how arrays are used in PHP code today. It also makes arrays invariant:</p>

<pre><code>function f(array&lt;int&gt; $a) {}
function g(array $a) {}

$a = [1];

f($a); // ok
g($a); // error
</code></pre>

<p>To understand why <code>g($a)</code> is an error, remember the explanation about invariance in the Generics section. <code>g()</code> accepts an <code>array</code> (<code>array&lt;mixed&gt;</code>), which means it should be able to add an element of any type to it. However, if we pass an <code>array&lt;int&gt;</code> to it, this contract is broken. Therefore, <code>array</code> can not accept <code>array&lt;int&gt;</code>.</p>

<p>Invariance would make arrays very difficult to adopt, as a library can not start type hinting generic arrays without breaking user code, and users can not pass generic arrays to libraries until they start using generic arrays type declarations.</p>

<p>These pitfalls are why it may also be preferable to focus on object-based collections. Either with the custom syntax above described as Collections, or with the more complete full generics, as are present in most modern languages.  However, the two approaches are mutually-compatible.</p>

<h1 id="conclusion">Conclusion</h1>

<p>We hope to have explained in this article what different options are available for the implementation of generic objects, collections, or related features into PHP. More work is required, and ongoing, to determine which options are most desireable, or even feasible.</p>

<p>The next steps for investigation are:</p>

<ul>
<li>Further investigate type inference for reified generics.  If that turns out to be feasible with acceptable trade-offs, that is most likely the best option, and would imply building collections on top of them.</li>
<li>Determine if erased generics would have any additional drawbacks not noted here that would make them infeasible.</li>
<li>Determine if fully-erased types would have additional drawbacks not noted here that would make them infeasible.</li>
<li>Further develop an optimal feature set for collections, which would be applicable either in the dedicated syntax or as an application of generics (reified or erased).</li>
<li>Investigate the feasibility of using internal data structures in collections other than a hashmap (array) for better performance and simplicity.  (This would be a reason collections could not be done fully in user-space.)</li>
<li>Halt efforts on typed arrays, as our current thoughts are that it is probably not worth doing, due to the complexities of how arrays work, and the minimal functionality that it would bring.</li>
</ul>

<p>Right now, we’re focused on gathering feedback specifically related to the questions below, to help guide our next steps:</p>

<ul>
<li>If reified generics turn out to be infeasible, would erased generics be acceptable, or should that continue to be left to user-space tooling?</li>
<li>What generic features are acceptable to leave out to make the implementation more feasible?  (Eg, don't allow generics over union types; unioned generics are slow and we don't care; don't support in/out variance markers; etc.)</li>
<li>If erased generics are included, would that necessitate an official linter to validate them, or continue to leave that to user-space tooling?</li>
<li>If reified generics turn out to be infeasible, would the dedicated collections syntax shown here be acceptable?</li>
<li>Would "erased generics now, and we can <em>probably</em> convert them to reified in the future" be an acceptable strategy, if it is determined to be feasible?</li>
</ul>

<h1 id="discussions">Discussions</h1>

<ul>
<li><a href="https://externals.io/message/125049">PHP Internals mailing list</a></li>
<li><a href="https://www.reddit.com/r/PHP/comments/1ew7hik/state_of_generics_and_collections/">Reddit</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Joining Forces for Open Source Cybersecurity Standards]]></title>
            <link href="https://thephp.foundation/blog/2024/04/02/open-source-community-cra-compliance-initiative/"/>
            <updated>2024-04-02T00:00:00+00:00</updated>
            <id>https://thephp.foundation/blog/2024/04/02/open-source-community-cra-compliance-initiative/</id>
            <content type="html"><![CDATA[<p>The PHP Foundation, alongside leading open source organizations including the <a href="https://www.apache.org/">Apache Software Foundation</a>, <a href="https://www.blender.org/about/foundation/">Blender Foundation</a>, <a href="https://www.openssl.org/">OpenSSL Software Foundation</a>, <a href="https://www.python.org/psf-landing/">Python Software Foundation</a>, <a href="https://foundation.rust-lang.org/">Rust Foundation</a>, and <a href="https://www.eclipse.org/">Eclipse Foundation</a>, is excited to announce a collaborative initiative aimed at establishing common cybersecurity standards in alignment with the European Union’s <a href="https://digital-strategy.ec.europa.eu/en/library/cyber-resilience-act">Cyber Resilience Act (CRA)</a>.</p>

<p>This initiative, hosted by the Eclipse Foundation, will focus on creating specifications for secure software development rooted in open source best practices.</p>

<blockquote>
  <p>We hope that our specifications could inform the formal standardisation processes of at least one of the European Standards Organisations. Given the tight time horizon for implementation of the CRA, we believe that this immediate start will provide a constructive environment to host the technical discussions necessary for the stewards, contributors, and adopters of open source to meet the requirements set forth in these new regulations.</p>
</blockquote>

<p>At The PHP Foundation, we are committed to supporting the open source community, ensuring that the PHP language and its ecosystem are prepared for the upcoming regulatory changes.</p>

<p>For more information, see the <a href="https://eclipse-foundation.blog/2024/04/02/open-source-community-cra-compliance/">full announcement on the Eclipse Foundation website</a>.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[The PHP Foundation: Impact and Transparency Report 2023]]></title>
            <link href="https://thephp.foundation/blog/2024/02/26/transparency-and-impact-report-2023/"/>
            <updated>2024-02-26T00:00:00+00:00</updated>
            <id>https://thephp.foundation/blog/2024/02/26/transparency-and-impact-report-2023/</id>
            <content type="html"><![CDATA[<h2 id="executive-summary">Executive Summary</h2>

<p>At the beginning of 2024, The PHP Foundation is a collective of <strong>9 volunteer board members</strong>, <strong>1 full-time operations manager</strong> sponsored by JetBrains, and <strong>10 developers</strong> paid part-time/full-time who make more than half of the contributions to the PHP language and its extensions.</p>

<p>In 2023, The PHP Foundation received <strong>$418,669 in financial contributions</strong> from organizations and individuals.</p>

<p>The PHP Foundation’s main focus in 2023 was strengthening the maintenance of PHP core, the project that lives in the <a href="https://github.com/php/php-src">php/php-src</a> GitHub repository. This project is the home of the PHP language, where PHP’s interpreter is developed. Everyone who uses PHP benefits in one way or another from the work that is done in this repository.</p>

<p>The PHP Foundation demonstrates its growing impact on the language through an increased volume and velocity of code contributions and reviews. The 6 part-time and full-time developers contracted by The PHP Foundation were responsible for nearly half of the commits and reviews made in the PHP language.</p>

<p>Moreover, the foundation's presence and activities have led to heightened interest and activity in the PHP project overall, with the total number of <strong>contributions to the language growing by 79% compared to 2022</strong>.</p>

<p>At the end of 2023, the German government’s <strong>Sovereign Tech Fund chose to invest in The PHP Foundation’s mission</strong> by providing funding for a security audit and other long outstanding projects critical for the PHP ecosystem.</p>

<p>The foundation is <strong>expanding its development efforts in 2024</strong> by contracting 4 additional developers and increasing the number of hours that current contracted developers are working.</p>

<p>The foundation plans to spend up to $1,045,000, including compensation and fees. We are looking for additional sponsor contributions to allow us to continue these efforts in the next years.</p>

<p>In 2024, we aim to achieve the following strategic goals:</p>

<ul>
<li>Ensure sustainable sponsorship for the foundation.</li>
<li>Ensure that foundation developers focus on valuable tasks.</li>
<li>Promote PHP within the web development ecosystem.</li>
</ul>

<h2 id="the-php-foundation-mission">The PHP Foundation Mission</h2>

<p>The PHP Foundation was initiated by JetBrains, Automattic, Laravel, Acquia, Zend, Private Packagist, Symfony, Craft CMS, and Tideways. It was publicly <a href="https://blog.jetbrains.com/phpstorm/2021/11/the-php-foundation/">launched</a> on November 22, 2021.</p>

<p>Since 2021, many companies and individuals have joined the initiative. To make the priorities of the foundation more clear and aligned, we’ve <strong>updated the mission statement</strong>:</p>

<blockquote>
  <p>The PHP Foundation’s mission is to ensure the long-term prosperity of the PHP language. The PHP Foundation focuses on providing financial support and guidance to PHP language developers to support its goals of improving the language for its users, providing high-quality maintenance, and improving the PHP language project to retain current contributors and to integrate new contributors. The PHP Foundation aims to promote the public image of the PHP language in the interest of retaining existing and gaining new users and contributors.</p>
</blockquote>

<p><br>
So it defines 4 priorities of the foundation:</p>

<ol>
<li>Improve the language for users.</li>
<li>Provide high-quality maintenance.</li>
<li>Improve the project to retain current contributors and to integrate new contributors.</li>
<li>Promote the public image of PHP.</li>
</ol>

<h2 id="organizational-growth">Organizational Growth</h2>

<p>Many companies with a vested interest in PHP’s prosperity made a major financial contribution during the year. These are the companies that contributed $10,000 or more in 2023:</p>

<p><strong>JetBrains, Automattic, Private Packagist, Craft CMS, Tideways, pixiv Inc., Mercari Inc., Symfony Corp, Aternos GmbH, Sentry, Ardennes-étape, Zend by Perforce, Les-Tilleuls.coop, Cybozu.</strong></p>

<p>Overall, 718 organizations and individuals sponsored the foundation in 2023 <a href="https://opencollective.com/phpfoundation">on Open Collective</a> and <a href="https://github.com/sponsors/ThePHPF">GitHub Sponsors</a>.</p>

<h3 id="quotes">Quotes</h3>

<p>Here is what some of the prominent folks say about the foundation.</p>

<p><figure class="max-w-screen-md mx-auto text-center" id="quote-brandon-kelly">
    <svg class="w-10 h-10 mx-auto mb-3 text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 14">
        <path d="M6 0H2a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v1a3 3 0 0 1-3 3H2a1 1 0 0 0 0 2h1a5.006 5.006 0 0 0 5-5V2a2 2 0 0 0-2-2Zm10 0h-4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v1a3 3 0 0 1-3 3h-1a1 1 0 0 0 0 2h1a5.006 5.006 0 0 0 5-5V2a2 2 0 0 0-2-2Z"/>
    </svg>
    <blockquote>
        <p class="text-xl italic text-gray-900">“We’re proud supporters of the PHP Foundation here at Craft CMS. PHP has played such a huge role in our careers, and it’s an honor to be a part of its story.”</p>
    </blockquote>
    <figcaption class="flex items-center justify-center mt-3 space-x-3 rtl:space-x-reverse">
        <img class="w-10 h-10 rounded-full" src="/assets/post-images/2024/report-2023/brandon_kelly.jpg" alt="profile picture">
        <div class="flex items-center">
            <cite class="pl-0.5 font-medium text-gray-900">Brandon Kelly, </cite>
            <cite class="pl-1 text-gray-500">CEO at Craft CMS</cite>
        </div>
    </figcaption>
</figure>
</p>

<p><figure class="max-w-screen-md mx-auto text-center" id="quote-ben-marks">
    <svg class="w-10 h-10 mx-auto mb-3 text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 14">
        <path d="M6 0H2a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v1a3 3 0 0 1-3 3H2a1 1 0 0 0 0 2h1a5.006 5.006 0 0 0 5-5V2a2 2 0 0 0-2-2Zm10 0h-4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v1a3 3 0 0 1-3 3h-1a1 1 0 0 0 0 2h1a5.006 5.006 0 0 0 5-5V2a2 2 0 0 0-2-2Z"/>
    </svg>
    <blockquote>
        <p class="text-xl italic text-gray-900">“So much of our world - the content we consume (blogs, ecommerce, social media) -  is delivered via PHP applications, enabled by the continuing efforts of the PHP Foundation and the ecosystem it enables. The PHP ecosystem's success has a significant impact on all of our lives, and we at Shopware are therefore proud supporters of the PHP Foundation.”</p>
    </blockquote>
    <figcaption class="flex items-center justify-center mt-3 space-x-3 rtl:space-x-reverse">
        <img class="w-10 h-10 rounded-full" src="/assets/post-images/2024/report-2023/ben_marks.jpg" alt="profile picture">
        <div class="flex items-center">
            <cite class="pl-0.5 font-medium text-gray-900">Ben Marks, </cite>
            <cite class="pl-1 text-gray-500">Director Global Market Development at shopware AG</cite>
        </div>
    </figcaption>
</figure>
</p>

<p><figure class="max-w-screen-md mx-auto text-center" id="quote-kevin-dunglas">
    <svg class="w-10 h-10 mx-auto mb-3 text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 14">
        <path d="M6 0H2a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v1a3 3 0 0 1-3 3H2a1 1 0 0 0 0 2h1a5.006 5.006 0 0 0 5-5V2a2 2 0 0 0-2-2Zm10 0h-4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v1a3 3 0 0 1-3 3h-1a1 1 0 0 0 0 2h1a5.006 5.006 0 0 0 5-5V2a2 2 0 0 0-2-2Z"/>
    </svg>
    <blockquote>
        <p class="text-xl italic text-gray-900">“Les-Tilleuls.coop is proud to support the PHP Foundation. By maintaining the language, the foundation is ensuring the future of PHP and the web. By adding innovative new features, it simplifies knowledge sharing and, in the spirit of free software, makes it easier than ever for everyone to create independent sites and applications.”</p>
    </blockquote>
    <figcaption class="flex items-center justify-center mt-3 space-x-3 rtl:space-x-reverse">
        <img class="w-10 h-10 rounded-full" src="/assets/post-images/2024/report-2023/kevin_dunglas.png" alt="profile picture">
        <div class="flex items-center">
            <cite class="pl-0.5 font-medium text-gray-900">Kevin Dunglas, </cite>
            <cite class="pl-1 text-gray-500">Les-Tilleuls.coop, FrankenPHP</cite>
        </div>
    </figcaption>
</figure>
</p>

<p><figure class="max-w-screen-md mx-auto text-center" id="quote-matthew-weier-o&#039;phinney">
    <svg class="w-10 h-10 mx-auto mb-3 text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 14">
        <path d="M6 0H2a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v1a3 3 0 0 1-3 3H2a1 1 0 0 0 0 2h1a5.006 5.006 0 0 0 5-5V2a2 2 0 0 0-2-2Zm10 0h-4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v1a3 3 0 0 1-3 3h-1a1 1 0 0 0 0 2h1a5.006 5.006 0 0 0 5-5V2a2 2 0 0 0-2-2Z"/>
    </svg>
    <blockquote>
        <p class="text-xl italic text-gray-900">“As longtime contributors to the PHP project, both financially as well as by employing developers on the project, Zend by Perforce is pleased to sponsor the PHP Foundation and support its mission. Expanding the pool of maintainers and developers capable of evolving the language will help keep PHP relevant, and expand its reach in the web development ecosystem.”</p>
    </blockquote>
    <figcaption class="flex items-center justify-center mt-3 space-x-3 rtl:space-x-reverse">
        <img class="w-10 h-10 rounded-full" src="/assets/post-images/2024/report-2023/mwop.jpg" alt="profile picture">
        <div class="flex items-center">
            <cite class="pl-0.5 font-medium text-gray-900">Matthew Weier O&#039;Phinney, </cite>
            <cite class="pl-1 text-gray-500">Senior Product Manager, Zend by Perforce</cite>
        </div>
    </figcaption>
</figure>
</p>

<p><br></p>

<h2 id="the-sovereign-tech-fund-investment">The Sovereign Tech Fund Investment</h2>

<p>The <a href="https://sovereigntechfund.de/en/">Sovereign Tech Fund</a> (STF) supports the development, improvement, and maintenance of open digital infrastructure in the public interest. Its goal is to strengthen the open-source ecosystem sustainably, focusing on security, resilience, technological diversity, and the people behind the code. STF is funded by the German Federal Ministry for Economic Affairs and Climate Action (BMWK) and supported by the German Federal Agency for Disruptive Innovation GmbH (SPRIND).</p>

<p>We have collaborated with STF to create work plans for these specific projects:</p>

<h4 id="pecl-overhaul">PECL overhaul</h4>

<p>The current system for distributing PHP extensions, PECL/PEAR, is outdated and prone to supply-chain attacks, making it unreliable for average developers. This leads to the creation of redundant tools and new security issues.</p>

<p>We proposed to rewrite the PECL installer, replacing the messy pear code and the inefficient website.</p>

<p>Follow the progress of <strong>the new tool 🥧PIE</strong> here: <a href="https://github.com/ThePHPF/pie-design">https://github.com/ThePHPF/pie-design</a>.</p>

<h4 id="testing-tool-for-fpm">Testing tool for FPM</h4>

<p>Currently, the PHP project's testing framework lacks more specialized support for the automated testing of the FastCGI Process Manager (FPM), especially for issues that require higher load. We propose to develop an FPM/SAPI testing tool that can execute all applications and set expectations on the produced logs and server responses. This tool will be connected with a load testing tool (e.g., wrk) to simulate real-world usage and load.</p>

<p>The work has started in the <a href="https://github.com/bukka/wst">https://github.com/bukka/wst</a> repository with the plan to move it to the PHP GitHub organization when ready.</p>

<h4 id="security-audit">Security Audit</h4>

<p>PHP, like any other language, has its share of security issues. We are going to collaborate with a security research group for a comprehensive codebase audit and address the discovered issues. This will significantly improve the security of PHP and make it more reliable for developers and businesses.</p>

<p>The audit is being organized in partnership with <a href="https://ostif.org/">OSTIF</a>.</p>

<h4 id="documentation-improvements">Documentation improvements</h4>

<p>The current PHP documentation has several blind spots, with many functions and methods not covered at all. We propose to update and modernize the English PHP documentation, review and remove user comments, integrate 3v4l.org for interactive examples, and simplify the maintenance process. This will make PHP more accessible to new developers and serve as a reliable reference for experienced ones.</p>

<h2 id="the-php-foundation-governance">The PHP Foundation Governance</h2>

<p>In 2023, we renamed the Administration group to the <strong>Governing Board</strong> to avoid confusions and better align with industry standards.</p>

<p><a href="https://thephp.foundation/structure/#admins">The lineup</a> of the group has not changed and consists of veteran PHP community leaders, representatives of the founding companies, and other key stakeholders.</p>

<p>One notable change compared to the previous year is a full-time operations manager sponsored by JetBrains in addition to the financial contribution.</p>

<p>We aim to establish a level of involvement for other key stakeholders from the PHP world through the Advisory Board and other initiatives.</p>

<h2 id="the-advisory-board">The Advisory Board</h2>

<p>To keep major sponsors of PHP abreast of the latest happenings in the foundation and allow them to see the direct impact of their support, we announced the advisory board initiative <a href="https://thephp.foundation/blog/2023/03/31/php-foundation-update-march-2023/#a-new-benefit-for-major-sponsors-%E2%80%93-advisory-board-membership">in March</a>.</p>

<p>In addition to the <a href="https://thephp.foundation/structure/">Governing Board</a> representatives from Automattic, JetBrains, Private Packagist, Symfony, Tideways, and Zend by Perforce, the <strong>Advisory Board includes members from</strong> Moodle, Shopware, Laravel, Ardennes-étape, Les-Tilleuls.coop / API Platform, Aternos GmbH, PrestaShop, CraftCMS.</p>

<p>Your company can <strong><a href="https://thephp.foundation/join/">become a member</a></strong> by contributing a minimum of $12,000 to The PHP Foundation as at least a Silver Sponsor.</p>

<h2 id="the-php-foundation-staff">The PHP Foundation Staff</h2>

<h3 id="renewing-contracts">Renewing contracts</h3>

<p>In 2023, we had a team of 6 developers. All of them demonstrated a high quality of work and dedication to the mission of the foundation. We were happy to renew the contracts for 2024 as well as extend the total number of hours for developers requesting it.</p>

<p>We have also adjusted the compensation rates for developers to better reflect the market, as the rates had not changed since 2021.</p>

<p>We aim to review the rates every year based on the available funding and priorities.</p>

<h3 id="team-extension">Team extension</h3>

<p>As was mentioned in the previous transparency report, we aimed to extend the team. It did not happen in 2023 because one of the prospective developers could not join the team for personal reasons, and had to step down from PHP core development entirely. Again, this is <a href="https://blog.jetbrains.com/phpstorm/2021/11/the-php-foundation/#the_bus_factor">the Bus Factor at its worst</a>. However, we were able to extend the team starting with 2024.</p>

<p>We accepted applications for developer positions from September through October 2023. We received about 200 resumes, and we’ve chosen 4 developers with a proven track record of contributions to the PHP language and ecosystem.</p>

<p>We offered the new developers 6-month trial contracts so that the developers and the Governing Board can evaluate the results and then decide whether to continue the engagements.</p>

<h3 id="the-team-as-of-2024">The team as of 2024</h3>

<p>Starting from January, we now contract 10 developers to work on PHP:</p>

<ul>
<li><strong>Arnaud Le Blanc</strong> <a href="https://github.com/arnaud-lb">@arnaud-lb</a></li>
<li><strong>David Carlier</strong> <a href="https://github.com/devnexen">@devnexen</a></li>
<li><strong>Derick Rethans</strong> <a href="https://github.com/derickr">@derickr</a></li>
<li><strong>Gina Peter Banyard</strong> <a href="https://github.com/Girgias">@Girgias</a></li>
<li><strong>Ilija Tovilo</strong> <a href="https://github.com/iluuu1994">@iluuu1994</a></li>
<li><strong>Jakub Zelenka</strong> <a href="https://github.com/bukka">@bukka</a></li>
<li><strong>James Titcumb</strong> <a href="https://github.com/asgrim">@asgrim</a></li>
<li><strong>Máté Kocsis</strong> <a href="https://github.com/kocsismate">@kocsismate</a></li>
<li><strong>Saki Takamachi</strong> <a href="https://github.com/SakiTakamachi">@SakiTakamachi</a></li>
<li><strong>Shivam Mathur</strong> <a href="https://github.com/shivammathur">@shivammathur</a></li>
</ul>

<h3 id="team-timeline">Team timeline</h3>

<p>We established the following timeline for team review.</p>

<ul>
<li>January 2024: Developers start work according to the new contracts.</li>
<li>May 2024: Evaluate new developers, contracts are extended, expanded, or terminated after the first 6 months.</li>
<li>September 2024: Open applications for new developers, evaluate performance of the current group of developers.</li>
<li>October 2024: Evaluate applications, work out updates to compensation, decide on a budget.</li>
<li>November 2024: Renew contracts with existing developers, potentially sign contracts with new developers.</li>
</ul>

<p>And in 2025 we start the cycle again.</p>

<h2 id="retrospective%3A-goals-of-2023">Retrospective: Goals of 2023</h2>

<p>In the previous report, we outlined a few organizational and technical goals. Let’s look back and evaluate the results.</p>

<h3 id="organization-goals">Organization goals</h3>

<ul>
<li><strong>Extend the foundation developers team. ✅</strong><br/>
We did not grow in 2023 strictly speaking, but the work done in 2023 helped to build the ground for two contracted developers to go full-time, as well as to hire 4 new developers.<br/><br/></li>
<li><strong>Grow the community of the foundation. ✅</strong><br/>
The foundation’s Slack became a hub for the community and helped to move initiatives.<br/><br/></li>
<li><strong>Improve communication and provide clear benefits for sponsors. ✅</strong> <br/>
We created a <a href="https://thephp.foundation/join/#membership-deck">deck with benefits for sponsors</a> and started the advisory board initiative. <br/><br/></li>
<li><strong>Explore strategic partnerships and marketing opportunities. ✅ / ❌</strong><br/>
We received investment from the Sovereign Tech Fund and started collaboration with OSTIF.<br/>
We did not explore any marketing opportunities. And there is a room for many more strategic partnerships.</li>
</ul>

<h3 id="technical-goals">Technical goals</h3>

<ul>
<li><strong>Ongoing maintenance and development of the PHP core.  ✅</strong> <br/><br/></li>
<li><strong>Improve the quality of the ideas and RFCs coming from the foundation. ✅</strong><br/>
One of the examples here could be <a href="https://wiki.php.net/rfc/property-hooks">Property Hooks RFC</a>. Although it has not been voted on yet, we have put amazing work into it and consulted many different parties to make it as good as possible.<br/><br/></li>
<li><strong>Develop a high-level roadmap and vision for PHP changes sponsored by the foundation. ❌</strong><br/>
The roadmap and vision need further development and discussion. However, we conducted several pieces of research, both quantitative and qualitative. Some of these findings were shared at conferences where we participated, including PHPCon Poland, SymfonyCon, and Laracon EU. We plan to continue this work.</li>
</ul>

<h2 id="php-language-impact">PHP Language Impact</h2>

<p>On a daily basis, the PHP Foundation staff team contributes to the open-source repositories of the <a href="https://github.com/php">PHP GitHub organization</a>. The foundation team contributes in many forms: filing issues, reviewing pull requests, participating in discussions on mailing lists, triaging issues, submitting RFC proposals.</p>

<p>In this document, four categories of contributions are presented in more detail: commits to php-src, reviews of pull requests on php-src, submitted RFC documents, and documentation work.</p>

<h3 id="commits-to-php">Commits to PHP</h3>

<p>The following chart summarizes the number of commits made to the <a href="https://github.com/php/php-src">php/php-src</a> repository in 2023.</p>

<table>
<thead>
<tr>
  <th></th>
  <th>2022</th>
  <th>2023</th>
</tr>
</thead>
<tbody>
<tr>
  <td>Total by The PHP Foundation</td>
  <td>683</td>
  <td>784</td>
</tr>
<tr>
  <td>Total other</td>
  <td>885</td>
  <td>1588</td>
</tr>
</tbody>
</table>

<p><img src="/assets/post-images/2024/transparency-and-impact-report-2023/2024-02-26-transparency-and-impact-report-2023.md-1.svg" alt="Diagram 0" /></p>

<p>Note that the number of commits does not fairly represent the level of effort or the scope of the work. However, it can demonstrate the foundation's relative level of contribution to the PHP core through an objective metric.</p>

<h3 id="reviews">Reviews</h3>

<p>The diagram summarizes the number of pull request reviews made in the <a href="https://github.com/php/php-src">php/php-src</a> repository from January 1 to December 31, 2023.</p>

<table>
<thead>
<tr>
  <th></th>
  <th>2022</th>
  <th>2023</th>
</tr>
</thead>
<tbody>
<tr>
  <td>Total by The PHP Foundation</td>
  <td>283</td>
  <td>702</td>
</tr>
<tr>
  <td>Total other</td>
  <td>551</td>
  <td>416</td>
</tr>
</tbody>
</table>

<p><img src="/assets/post-images/2024/transparency-and-impact-report-2023/2024-02-26-transparency-and-impact-report-2023.md-2.svg" alt="Diagram 1" /></p>

<h3 id="rfcs">RFCs</h3>

<p>Below are the RFC proposals authored or co-authored by The PHP Foundation developers in 2023 (random order).</p>

<table>
<thead>
<tr>
  <th>RFC</th>
  <th>Proposed</th>
  <th>Status</th>
</tr>
</thead>
<tbody>
<tr>
  <td><a href="https://wiki.php.net/rfc/deprecate-implicitly-nullable-types">Deprecate implicitly nullable parameter types</a></td>
  <td>2023-12-20</td>
  <td>Under Discussion</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/deprecate_functions_with_overloaded_signatures">Deprecate functions with overloaded signatures</a></td>
  <td>2023-01-31</td>
  <td>Implemented</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/datetime-exceptions">More Appropriate Date/Time Exceptions</a></td>
  <td>2023-02-08</td>
  <td>Implemented</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/proper-range-semantics">Define proper semantics for range() function</a></td>
  <td>2023-03-13</td>
  <td>Implemented</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/typed_class_constants">Typed class constants</a></td>
  <td>2020-07-06</td>
  <td>Implemented</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/assert-string-eval-cleanup">Deprecate remains of string evaluated code assertions</a></td>
  <td>2023-05-31</td>
  <td>Implemented</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/saner-array-sum-product">Saner array_(sum&#124;product)()</a></td>
  <td>2023-01-14</td>
  <td>Implemented</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/saner-inc-dec-operators">Path to Saner Increment/Decrement operators</a></td>
  <td>2022-11-21</td>
  <td>Implemented</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/rfc1867-non-post">RFC1867 for non-POST HTTP verbs</a></td>
  <td>2023-10-06</td>
  <td>Implemented</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/unbundle_imap_pspell_oci8">Unbundle ext/imap, ext/pspell, ext/oci8, and ext/PDO_OCI</a></td>
  <td>2023-10-03</td>
  <td>Accepted</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/policy-repository">Policy Repository</a></td>
  <td>2023-12-04</td>
  <td>Implemented</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/access_scope_from_magic_accessors">Access Scope from Magic Accessors</a></td>
  <td>2023-01-19</td>
  <td>Withdrawn</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/deprecations_php_8_4">Deprecations for PHP 8.4</a></td>
  <td>2023-07-25</td>
  <td>Draft</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/file-descriptor-function">Add file_descriptor() function</a></td>
  <td>2023-01-16</td>
  <td>Under Discussion</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/core-autoloading">New core autoloading mechanism with support for function autoloading</a></td>
  <td>2023-04-03</td>
  <td>Under Discussion</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/property-hooks">Property hooks</a></td>
  <td>2023-01-03</td>
  <td>Under discussion</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/release_cycle_update">Release cycle update</a></td>
  <td>2023-11-05</td>
  <td>Under Discussion</td>
</tr>
</tbody>
</table>

<h3 id="release-maintenance">Release Maintenance</h3>

<p>Jakub Zelenka, one of the foundation developers, also volunteered to be a release manager for PHP 8.3. The PHP Foundation supported such an initiative.</p>

<h2 id="the-php-foundation-brand-%26-public-channels">The PHP Foundation brand &amp; public channels</h2>

<p>The PHP Foundation represents a community of core PHP developers and advocates for the PHP programming language. The channels listed below were used by the PHP Foundation for public communication:</p>

<ul>
<li>11,481 Twitter followers <a href="https://twitter.com/thephpf">https://twitter.com/thephpf</a></li>
<li>10,320 LinkedIn page followers <a href="https://www.linkedin.com/company/phpfoundation">https://www.linkedin.com/company/phpfoundation</a></li>
<li>684 Mastodon followers <a href="https://phpc.social/@thephpf">https://phpc.social/@thephpf</a></li>
</ul>

<p>The PHP Foundation members gave talks at multiple conferences throughout the year:</p>

<ul>
<li><a href="https://www.phpconference.co.uk/">PHP UK Conference</a> – Derick Rethans</li>
<li><a href="https://phpconference.com/">International PHP Conference</a> – Nils Adermann, Benjamin Eberlei</li>
<li><a href="https://froscon.org/en/">FrOSCon</a> – Sebastian Bergmann</li>
<li><a href="https://tek.phparch.com/">php&#91;tek&#93;</a> – Derick Rethans</li>
<li><a href="https://events.drupal.org/lille2023/session/php-foundation-0">DrupalCon Lille</a> - Nils Adermann</li>
<li><a href="https://php.bettercode.eu/">betterCode(PHP)</a> – Jakub Zalenka</li>
<li><a href="https://event.afup.org/">ForumPHP</a> – Gina P. Banyard</li>
<li><a href="https://2023.phpcon.pl/en/">PHPCon Poland</a> – Roman Pronskiy</li>
<li><a href="https://live.symfony.com/2023-brussels-con/">SymfonyCon</a> – Nicolas Grekas</li>
</ul>

<h2 id="official-recognition-on-the-php-website">Official Recognition on the PHP website</h2>

<p>The PHP Foundation is now officially endorsed on the php.net website. This was the result of a community vote on <a href="https://wiki.php.net/rfc/promote_php_foundation">RFC Promote the PHP Foundation</a>. Big thanks to Jim Winstead and the PHP community for this.</p>

<h2 id="financial-report">Financial report</h2>

<p>In 2023, The PHP Foundation was financially backed by organizations and individuals with the goal of paying a competitive salary to as many core developers as possible.</p>

<table>
<thead>
<tr>
  <th></th>
  <th>2021 - 2022</th>
  <th>2023</th>
</tr>
</thead>
<tbody>
<tr>
  <td>Total contributed to The PHP Foundation</td>
  <td>$ 712,484</td>
  <td>$ 478,767</td>
</tr>
<tr>
  <td>Fees *</td>
  <td>$ 90,273</td>
  <td>$ 60,098</td>
</tr>
<tr>
  <td>Total received</td>
  <td>$ 622,211</td>
  <td>$ 418,669</td>
</tr>
<tr>
  <td>Paid to developers</td>
  <td>$ 133,285</td>
  <td>$ 275,181</td>
</tr>
</tbody>
</table>

<p><br>
<em>* Fees include a 10%  Open Source Collective fiscal host fee (dealing with contracts, expense reviews and payments, bank account management, official registrations and dealing with government requirements, open collective platform development etc.), and 1-5% percent of payment processing fees, depending on the payment method used.</em></p>

<p>All incoming and outgoing <strong>transactions of The PHP Foundation are publicly available</strong> to view for anyone: <a href="https://opencollective.com/phpfoundation#category-BUDGET">https://opencollective.com/phpfoundation#category-BUDGET</a></p>

<p><img src="/assets/post-images/2024/report-2023/budget.png" alt="Budget" /></p>

<h3 id="expenses">Expenses</h3>

<p><a href="https://opencollective.com/phpfoundation/expenses">https://opencollective.com/phpfoundation/expenses</a></p>

<p><img src="/assets/post-images/2024/report-2023/expenses.png" alt="Expenses" /></p>

<h2 id="goals-for-2024">Goals for 2024</h2>

<p>Our foremost mission remains the same: <strong>maintain and develop the PHP language</strong>. We’d like PHP to be the best platform for users and for businesses creating web applications and APIs.</p>

<p>The main challenge for continuing the work of The PHP Foundation is to ensure sustainable sponsorship.</p>

<p>From a technical standpoint, the goal is to ensure that foundation developers work on valuable tasks.</p>

<h3 id="organization-goals">Organization goals</h3>

<ul>
<li>Onboard new major sponsors.</li>
<li>Explore strategic partnerships and marketing opportunities.</li>
<li>Further develop the Advisory Board initiative.</li>
<li>Grow the foundation's community.</li>
</ul>

<h3 id="technical-goals">Technical goals</h3>

<ul>
<li>Ongoing maintenance and development of the PHP core.</li>
<li>Deliver the STF projects.</li>
<li>Improve the quality of the ideas and RFCs coming from the foundation.</li>
<li>Conduct research and surveys to define priorities.</li>
<li>Develop a high-level roadmap for PHP changes sponsored by the foundation.</li>
</ul>

<h2 id="budget-plan-for-2024">Budget plan for 2024</h2>

<p>In 2024, two of our part-time developers extended commitment to go full-time, and we contracted 4 new developers.</p>

<p>We have also adjusted the compensation rates for developers to better reflect the market, as the rates had not changed since 2021. As a result, our budget significantly increased.</p>

<p>With this plan, we estimate our annual spending cap at approximately <strong>$840,000</strong> for developer compensation.</p>

<p>Additionally, we anticipate receiving <strong>€205,000</strong> from the STF investment. These funds will be allocated to developer reimbursements and our partnership with OSTIF.org for an external security audit.</p>

<p>Our collaboration with the OpenCollective platform has been positive, and we plan to continue operating under the umbrella of the Open Source Collective in 2024. This means that sponsorships we receive are reduced by 10% for Open Source Collective fees and 1–5% for payment processing fees.</p>

<h2 id="outro">Outro</h2>

<p>The PHP language is a living entity and, as such, requires continuous support to address developer issues, resolve security vulnerabilities, and has to evolve to meet the needs of the future.</p>

<p>Based on the strong second year of the foundation, we are excited to continue and multiply the efforts in the next years.</p>

<p>With your help, we continue the mission to support, advance, and develop the PHP language.</p>

<section class="text-center mt-6">
    <div class="mb-14">
        <a href="/join" target="_blank" class="inline-block text-xl py-2 no-underline px-6 !text-white bg-[#7f52ff] rounded-3xl hover:bg-[rgba(127,82,255,.8)]">
            Join The PHP Foundation
        </a>
    </div>
</section>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[The PHP Foundation
Team Update 2024]]></title>
            <link href="https://thephp.foundation/blog/2024/01/03/the-php-foundation-team-update-2024/"/>
            <updated>2024-01-03T00:00:00+00:00</updated>
            <id>https://thephp.foundation/blog/2024/01/03/the-php-foundation-team-update-2024/</id>
            <content type="html"><![CDATA[<p>Now in our third year, we're gearing up to grow our impact. This year, four more developers are joining the PHP Foundation to further advance PHP.</p>

<p>Since April 2022, the PHP Foundation has contracted six outstanding developers:</p>

<ul>
<li>Arnaud Le Blanc <a href="https://github.com/arnaud-lb">@arnaud-lb</a></li>
<li>Derick Rethans <a href="https://github.com/derickr">@derickr</a></li>
<li>Gina Peter Banyard <a href="https://github.com/Girgias">@Girgias</a></li>
<li>Ilija Tovilo <a href="https://github.com/iluuu1994">@iluuu1994</a></li>
<li>Jakub Zelenka <a href="https://github.com/bukka">@bukka</a></li>
<li>Máté Kocsis <a href="https://github.com/kocsismate">@kocsismate</a></li>
</ul>

<p>All of them started as part-time contributors, and since then have significantly grown their capacity and dedication to PHP core tasks. We consider it a big achievement that the team continues to collaborate effectively, accumulating more experience and knowledge, and expanding their PHP Core involvement.</p>

<h2 id="team-update-2024">Team Update 2024</h2>

<p>We are happy to announce a team expansion. Four talented developers are joining as part-time team members of the foundation.</p>

<ul>
<li>David Carlier <a href="https://github.com/devnexen">@devnexen</a></li>
<li>James Titcumb <a href="https://github.com/asgrim">@asgrim</a></li>
<li>Saki Takamachi <a href="https://github.com/SakiTakamachi">@SakiTakamachi</a></li>
<li>Shivam Mathur <a href="https://github.com/shivammathur">@shivammathur</a></li>
</ul>

<p>Please give them a warm welcome! We are looking forward to the great things we will accomplish together.</p>

<p>Happy New Year! 🎉🐘💜</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP Foundation Update, November 2023]]></title>
            <link href="https://thephp.foundation/blog/2023/11/27/php-foundation-update-november-2023/"/>
            <updated>2023-11-27T00:00:00+00:00</updated>
            <id>https://thephp.foundation/blog/2023/11/27/php-foundation-update-november-2023/</id>
            <content type="html"><![CDATA[<p><code>&lt;?php echo 'Hello world!';</code></p>

<p>This post provides insights into The PHP Foundation's recent activities.</p>

<blockquote>
  <p>My name is Roman Pronskiy. I’m employed by <a href="https://jetbrains.com/">JetBrains</a> to manage operations at the PHP Foundation. Reach out to me at pronskiy@thephp.foundation.</p>
  
  <p>You can find the full foundation structure <a href="https://thephp.foundation/structure/">here</a>, including all board members, developers, and the community.</p>
</blockquote>

<h2 id="team-growth">Team Growth</h2>

<p>In September, we initiated an open call for new developers to join the PHP Foundation by launching an <a href="https://thephp.foundation/blog/2023/09/06/application-form-2023/">application form</a>.</p>

<p>We received a total of 207 applications. From this pool, we selected a shortlist of 12 qualified candidates. Following a comprehensive review and input from existing foundation members, we further refined our selection to 4 outstanding individuals. We will soon announce the new members.</p>

<p>The primary focus for the new developers will be on the maintenance and modernization of PHP’s infrastructure — a critical step towards ensuring PHP being a robust and forward-looking language.</p>

<p>The public work undertaken by our developers can be followed in our monthly <a href="https://thephp.foundation/blog/tag/roundup/">"PHP Core Roundup"</a> series, which highlights the ongoing progress and developments within PHP core.</p>

<h2 id="advisory-board">Advisory Board</h2>

<p>For our major sponsors, we offer exclusive insights through occasional digests that provide a deeper dive into discussions, debates, and early-stage developments. This not only keeps our sponsors abreast of the latest happenings but also allows them to see the direct impact of their support. This is one of the benefits of being an Advisory Board member.</p>

<p>We announced the advisory board initiative <a href="https://thephp.foundation/blog/2023/03/31/php-foundation-update-march-2023/#a-new-benefit-for-major-sponsors-%E2%80%93-advisory-board-membership">in March</a>. Since then, 9 companies have joined the initiative with their representatives.</p>

<p>In addition to the <a href="https://thephp.foundation/structure/">Governing Board</a> that includes Automattic, JetBrains, Private Packagist, Symfony, Tideways, Zend by Perforce, and PHP fellows, we now welcome the Advisory Board members: Moodle, Shopware, Laravel, Ardennes-étape, Les-Tilleuls.coop / API Platform, Aternos GmbH, PrestaShop, CraftCMS.</p>

<p>There were several useful discussions within the group. Specifically, we’d like to highlight the one around <a href="https://wiki.php.net/rfc/property-hooks">Property Hooks RFC</a>. The Advisory Board feedback helped to shape the proposal design significantly.</p>

<p>By the way, you can already try property hooks on <a href="https://3v4l.org/">3v4l.org</a>, thanks to <a href="https://github.com/sponsors/SjonHortensius">Sjon Hortensius</a>.
<a href="https://3v4l.org/Y4KZn/rfc#vrfc.property-hooks"><img src="/assets/post-images/2023/3v4l-property-hooks.png"></a></p>

<h2 id="sovereign-tech-fund-invests-in-php">Sovereign Tech Fund invests in PHP</h2>

<p>The <a href="https://sovereigntechfund.de/en/">Sovereign Tech Fund</a> is an organization that supports the development, improvement, and maintenance of open digital infrastructure in the public interest. Its goal to strengthen the open-source ecosystem sustainably, focusing on security, resilience, technological diversity, and the people behind the code. STF is funded by the German Federal Ministry for Economic Affairs and Climate Action (BMWK) and supported by the German Federal Agency for Disruptive Innovation GmbH (SPRIND).</p>

<p>We have collaborated with STF to create work plans for these specific projects: PECL overhaul, Testing tool for FPM, Security Audit, and Documentation improvements.</p>

<p>We’ll share more details on each project early next year, and for now we are thrilled and grateful to the Sovereign Tech Fund for trusting us.</p>

<h2 id="security-audit-of-php-is-coming">Security audit of PHP is coming</h2>

<p>As mentioned above, STF is investing in PHP, and we are going to commission an audit of PHP's C code base. We expect security issues to be found. To mitigate possible bad perception, we aim to publish and fix the revealed security issues at the same time.</p>

<p>For this security audit, we are partnering with <a href="https://ostif.org/">The Open Source Technology Improvement Fund, Inc</a> (OSTIF), a corporate non-profit dedicated to securing critical open-source projects. They have a proven track record of audits for <a href="https://github.com/ostif-org/OSTIF/blob/main/Completed-Engagements.md">popular open-source projects</a> such as cURL, Git, Linux Kernel, OpenSSL, Node.js, and others.</p>

<h2 id="reports-schedule">Reports schedule</h2>

<p>Although we promised to prepare quarterly reports, that unfortunately did not happen to be feasible. So for 2023, we fall back to one yearly report. The 2023 transparency report will be published in December.</p>

<h2 id="meet-us-at-the-conferences">Meet us at the conferences</h2>

<p>You can meet our team at the following conferences in late 2023:</p>

<p><strong><a href="https://php.bettercode.eu/">betterCode(PHP)</a> – Nov 27</strong></p>

<p>Jakub Zalenka will give a talk: "PHP 8.3: Changes and future plans". <br> 
Besides Jakub, there will be talks from Niels Dossche and Sebastian Bergmann.</p>

<p><strong><a href="https://live.symfony.com/2023-brussels-con/">SymfonyCon Brussels</a> – Dec 7–8</strong></p>

<p>You’ll be able to meet and talk to our board members: Nils Adermann, Sebastian Bergmann, Nicolas Grekas, and Roman Pronskiy.</p>

<h2 id="thank-you-to-our-sponsors">Thank you to our sponsors</h2>

<p>Check out the <a href="https://thephp.foundation/#sponsors">Sponsors section</a> on our <a href="https://thephp.foundation/">website</a>. It shows all major contributors sorted by donation amount.</p>

<p>Big thanks to the <strong><a href="https://sentry.io/">Sentry</a></strong> team for sponsoring the PHP foundation!</p>

<p>Sentry is a popular application performance monitoring &amp; error tracking tool, and they <a href="https://blog.sentry.io/we-just-gave-500-000-dollars-to-open-source-maintainers/?utm_source=linkedin&amp;utm_content=blog-fundfest23-learnmore">just gave $500,000 to multiple open source maintainers</a>.</p>

<p><strong>Shout-out to non-financial sponsors</strong></p>

<p><a href="https://www.digitalocean.com/">Digital Ocean</a> has been supporting the PHP project for ages – <a href="https://www.php.net/">php.net</a> servers run on DigitalOcean boxes. We would like to express our gratitude to DigitalOcean for their ongoing support.</p>

<p>Big thanks to <a href="https://thephp.foundation/#sponsors">everyone</a> for your continued support – the PHP Foundation is all of us!</p>

<hr />

<p>That’s all for today. Follow us on Twitter <a href="https://twitter.com/thephpf">@ThePHPF</a> or Mastodon <a href="https://phpc.social/@thephpf">phpc.social/@thephpf</a> to get the latest updates from the PHP Foundation.
💜🐘</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP 8.3 Released!]]></title>
            <link href="https://thephp.foundation/blog/2023/11/23/php-83/"/>
            <updated>2023-11-23T00:00:00+00:00</updated>
            <id>https://thephp.foundation/blog/2023/11/23/php-83/</id>
            <content type="html"><![CDATA[<p><br /></p>

<object data="/assets/post-images/2023/php83/php83-fireworks.svg" type="image/svg+xml">
  <img src="/assets/post-images/2023/php83/php83-fireworks.svg" />
</object>

<p><br /></p>

<p><a href="https://www.php.net/releases/8.3">PHP 8.3</a> is here! Bringing a handful of new features, performance and functionality improvements, and a healthy amount of deprecations, PHP 8.3 was released today.</p>

<p>PHP 8.3 will continue to receive active support for two years, followed by one year of security updates. Similar to the PHP 8.2 upgrade, the PHP 8.3 upgrade will be smooth as backward compatiblity is maintained. While some functionality is deprecated, there are no syntax, API*, and remove functionality in this release.</p>

<h2 id="what%27s-in-php-8.3">What's in PHP 8.3</h2>

<p>Some of the major new features in PHP 8.3 include support for declaring a type for class constants, improvements to support deep-cloning of <code>readonly</code> properties, improvements to the new Random extension introduced in PHP 8.2, new <a href="https://www.php.net/manual/en/function.json-validate.php"><code>json_validate()</code></a>,<a href="https://www.php.net/manual/en/function.str-increment.php"><code>str_increment()</code></a>, and <a href="https://www.php.net/manual/en/function.str-decrement.php"><code>str_decrement()</code></a>, functions, and a noticeable amount of improvements in DateTime, DOM, and Intl extensions.</p>

<p>See the <a href="https://www.php.net/releases/8.3">PHP 8.3 release page</a> for what's new and changed in PHP 8.3.</p>

<blockquote>
  <p>(*) Note that some of the PHP core extensions now declare types for built-in class constants. This is technically a BC break in case child classes declare the same constants without type declaration, which is only supported in PHP 8.3.</p>
</blockquote>

<h2 id="upgrade-to-php-8.3">Upgrade to PHP 8.3</h2>

<p>PHP packages on software repositories such as Debian and Ubuntu repos maintained by <a href="https://launchpad.net/~ondrej">Ondřej Surý</a>, <a href="https://github.com/remicollet">Remi Collet</a> for Fedora/RHEL/EL already contain PHP 8.3 builds ready to install.</p>

<p>Windows builds for PHP 8.3 are available on <a href="https://windows.php.net/download/">windows.php.net</a></p>

<p><a href="https://hub.docker.com/_/php">Docker images</a> with PHP 8.3 will also be available on Docker hub in the coming days.</p>

<h2 id="php-8.3-release-in-numbers">PHP 8.3 Release in Numbers</h2>

<p>The PHP 8.3 release contains <strong>over 1200 code commits</strong> from <strong>114 awesome contributors</strong> to the <code>php-src</code> repository, and several more contributions to the documentation and its translations.</p>

<p>Contributions from the <strong>PHP Foundation members</strong> consist of over <strong>280 commits</strong>.</p>

<p>During the period from the PHP 8.2 release date and today, the <strong>PHP Internals mailing list has received over 2800 emails</strong>.</p>

<p>PHP RFCs, where major changes to PHP are proposed, discussed, and voted on, PHP 8.3 received <strong>23 RFCs that went to a vote</strong>, and <strong>18 RFCs passed</strong>. This includes a number includes "catch-all" RFCs such as Deprecations for PHP 8.3, where multiple changes were voted at the same time. Out of the 23 RFCs with votes, <strong>13 RFCs</strong> were either proposed or implemented by the <strong>PHP Foundation</strong> members.</p>

<p>The PHP documentation and php.net web site contributors have also made several impactful contributions to document the new features in PHP 8.3, prepare release pages, and more.</p>

<h2 id="%F0%9F%92%9C-thank-you-%F0%9F%92%9C">💜 Thank you 💜</h2>

<p>On behalf of the PHP Foundation, we take this post to thank everyone from this milestone in PHP. Your contributions to the PHP Foundation, code and documentation contributions, and several other ways of involvement and contributions help shape PHP to continue to be an exciting, feature-rich, and versatile programming language.</p>

<p>Thank you 💜</p>

<h2 id="php-8.4-outlook">PHP 8.4 Outlook</h2>

<p>PHP 8.4, scheduled for the end of 2024 is already taking shape. Even at the moment PHP 8.3 is released, there are three active RFC votes, and some major changes such as JIT-IR, a brand-new HTML 5 parser in the DOM extension based on <a href="https://github.com/lexbor/lexbor">Lexbor</a>, and Bcrypt default cost increasing already been implemented for PHP 8.4</p>

<p>We look forward to bringing you updates on our <a href="https://thephp.foundation/blog/tag/roundup/">PHP Core Roundup series</a> and our newsletter:</p>

<p><div class="px-4 pt-3 border-b border-t -mx-4 border-gray-200">
    <div class="bg-white py-8">
        <div class="mx-auto grid max-w-7xl grid-cols-1 gap-10 lg:grid-cols-12 lg:gap-8">
            <div class="max-w-xl text-4xl font-medium tracking-tight text-gray-900 lg:col-span-6">
                Subscribe to The PHP Foundation newsletter
            </div>
            <form method="POST"
                  action="https://php-foundation.mailcoach.app/subscribe/9be4e2bd-f9d8-475c-b00e-2dcc4cf90056"
                  class="w-full max-w-md lg:col-span-6">
                <div class="flex gap-x-4">
                    <label for="email-address" class="sr-only">Email address</label>
                    <input id="email-address" name="email" type="email" autocomplete="email" required
                           class="min-w-0 flex-auto rounded-md border-0 px-3.5 py-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                           placeholder="Enter your email">
                    <button type="submit"
                            class="inline-block py-2 no-underline px-6 !text-white bg-[#7f52ff] rounded-3xl hover:bg-[rgba(127,82,255,.8)]">
                        Subscribe
                    </button>
                </div>
                <div class="mt-4 text-sm leading-6 text-gray-900">
                    No spam. We only send 1–2 emails per month.
                </div>
            </form>
        </div>
    </div>
</div>
</p>

<hr />

<p>💜️ 🐘</p>

<blockquote>
  <p>PHP Roundup is prepared by Ayesh Karunaratne from <strong><a href="https://php.watch">PHP.Watch</a></strong>, a source for PHP News, Articles, Upcoming Changes, and more.</p>
</blockquote>
]]></content>
        </entry>
    </feed>