<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[The PHP Foundation]]></title>
    <link href="https://thephp.foundation/atom.xml" rel="self"/>
    <link href="https://thephp.foundation/"/>
    <updated>2024-08-20T18:14:03+00:00</updated>
    <id>https://thephp.foundation/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[State of Generics and Collections]]></title>
            <link href="https://thephp.foundation/blog/2024/08/19/state-of-generics-and-collections/"/>
            <updated>2024-08-19T00:00:00+00:00</updated>
            <id>https://thephp.foundation/blog/2024/08/19/state-of-generics-and-collections/</id>
            <content type="html"><![CDATA[<p>Generics have been on the list of wanted features for a long time by numerous PHP developers. The topic is often brought up in "What's New in PHP?" talks as well during Q&amp;A.</p>

<p>In this article we will be exploring the different approaches, and what their current state is.</p>

<ul>
<li><a href="#full-reified-generics">Full Reified generics</a></li>
<li><a href="#collections">Collections</a></li>
<li><a href="#other-alternatives">Other alternatives</a>

<ul>
<li><a href="#static-analysis">Static Analysis</a></li>
<li><a href="#erased-generic-type-declarations">Erased Generic Type Declarations</a></li>
<li><a href="#fully-erased-type-declarations">Fully Erased Type Declarations</a></li>
</ul></li>
<li><a href="#generic-arrays">Generic Arrays</a>

<ul>
<li><a href="#fluid-arrays">Fluid Arrays</a></li>
<li><a href="#static-arrays">Static Arrays</a></li>
</ul></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>

<h1 id="full-reified-generics">Full Reified generics</h1>

<p>With generics you can define classes with placeholders for the types of their properties and methods. These can then be specified when instances of the class are created. This enables code reusability and type safety across different data types.  "Reified" generics are implementations where the generic type information is defined and carried through to runtime, allowing for runtime enforcement of generic requirements.</p>

<p>As PHP syntax, this could look like:</p>

<pre><code>class Entry&lt;KeyType, ValueType&gt;
{
    public function __construct(protected KeyType $key, protected ValueType $value)
    {
    }

    public function getKey(): KeyType
    {
        return $this-&gt;key;
    }

    public function getValue(): ValueType
    {
        return $this-&gt;value;
    }
}

new Entry&lt;int, BlogPost&gt;(123, new BlogPost());
</code></pre>

<p>In the instantiated class, the generic type <code>KeyType</code> will be replaced with <code>int</code>, and each instance of <code>ValueType</code> with <code>BlogPost</code>, resulting in an object behaving like the following class definition:</p>

<pre><code>class IntBlogPostEntry
{
    public function __construct(protected int $key, protected BlogPost $value)
    {
    }

    public function getKey(): int
    {
        return $this-&gt;key;
    }

    public function getValue(): BlogPost
    {
        return $this-&gt;value;
    }
}
</code></pre>

<p>There have been a few attempts in the past to add this functionality to PHP as well. Nikita Popov attempted the <a href="https://github.com/PHPGenerics/php-generics-rfc/issues/45">most comprehensive experimental implementation</a> in 2020/2021, following up on <a href="https://wiki.php.net/rfc/generics">a draft RFC</a> from 2016, and a <a href="https://www.reddit.com/r/PHP/comments/j65968/comment/g83skiz/">reddit post</a> summarizing the remaining challenges.</p>

<p>At the start of this year, under the auspices of the PHP Foundation, Arnaud Le Blanc <a href="https://github.com/arnaud-lb/php-src/pull/4">restarted this effort</a>, using Nikita's work as a starting point. Although many technical issues have been addressed, plenty of them are still unresolved.</p>

<p>A key challenge is type inference. The use of generics tends to increase code verbosity because it requires type arguments to be specified each time a generic type is referenced. This is demonstrated in the following PHP code snippet:</p>

<pre><code>function f(List&lt;Entry&lt;int,BlogPost&gt;&gt; $entries): Map&lt;int, BlogPost&gt;
{
    return new Map&lt;int, BlogPost&gt;($entries);
}

function g(List&lt;BlogPostId&gt; $ids): List&lt;BlogPost&gt;
{
    return map&lt;int, BlogPostId, BlogPost&gt;($ids, $repository-&gt;find(...));
}
</code></pre>

<p>Type inference can reduce this verbosity by letting the compiler deduce the appropriate types automatically for us. For instance, in the examples above, the compiler might automatically determine the correct types for <code>new Map()</code> and <code>map()</code>. However, this is hard in PHP. Quoting Nikita, "primarily due to the very limited view of the codebase the PHP compiler has (it only sees one file at a time)".</p>

<p>Consider the following example:</p>

<pre><code>class Box&lt;T&gt;
{
    public function __construct(public T $value) {}
}

new Box(getValue());
</code></pre>

<p>In this scenario, the type of the getValue() expression is unknown until the function is loaded at runtime, making it impossible to infer <code>T</code> in <code>new Box(...)</code> during compilation.</p>

<p>We could assign <code>T</code> at runtime based on the return <em>value</em> of the function, but this would result in unstable typing. In the previous example the type of <code>new Box()</code> would depend on the <em>implementation</em> of the return value of <code>getValue()</code>, which may be too specific: combine that with the fact that Box is invariant, and this code would break very quickly when trying to do anything useful with the Box instance:</p>

<pre><code>interface ValueInterface {}
class A implements ValueInterface {}
class B implements ValueInterface {}

function getValue(): ValueInterface
{
    return new A();
}

function doSomething(Box&lt;ValueInterface&gt; $box)
{
}

$box = new Box(getValue()) // runtime: Box&lt;A&gt;, statically: Box&lt;ValueInterface&gt;
doSomething($box); // accepts Box&lt;ValueInterface&gt;, not Box&lt;A&gt;
</code></pre>

<p>Typing is most useful when it’s based on compile-time / static information that doesn’t depend on the implementation.</p>

<p>Note: In this example, <code>Box</code> is invariant, as it is often the case of generic classes. This means that <code>Box&lt;X&gt;</code> is neither a sub-type or a super-type of <code>Box&lt;Y&gt;</code> regardless of the relationship between <code>X</code> and <code>Y</code>, so <code>Box&lt;A&gt;</code> is not a sub-type of <code>Box&lt;ValueInterface&gt;</code>, and <code>doSomething()</code> can not accept a <code>Box&lt;A&gt;</code>.</p>

<p>A generic class is invariant when one of its type placeholders is used both in read (e.g. as a return type) and write (e.g. a parameter type) positions at the same time. A property type is both in read and write position.</p>

<p>To understand why, consider the following example:</p>

<pre><code>function changeValue(Box&lt;ValueInterface&gt; $box)
{
    $box-&gt;value = new B();
}
</code></pre>

<p>The <code>changeValue()</code> function accepts a <code>Box&lt;ValueInterface&gt;</code>, thus should be able to assign any sub-type of <code>ValueInterface</code> to <code>$box-&gt;value</code>. However, if we pass a <code>Box&lt;A&gt;</code> (with <code>A</code> a sub-type of <code>ValueInterface</code>), this contract breaks when we assign a value that is a sub-type of <code>ValueInterface</code> but not of <code>A</code>.</p>

<p>The common solution in other generic languages is to allow a type parameter to be marked variant in only one direction (typically "in" or "out"), provided it is used only in a parameter or return position, respectively.  That allows that type parameter to be contravariant or covariant, as appropriate.</p>

<h3 id="hybrid-approach-to-type-inference">Hybrid Approach to Type Inference</h3>

<p>To address these challenges, we explored a hybrid approach, that lets us implement static type inference of generic parameters without having the full information available at compile time. This approach represents unknown types as symbols at compile time (e.g. the type of the expression <code>getValue()</code> is represented as <code>fcall&lt;getValue&gt;</code>). Symbolic types can be resolved at runtime when needed after functions and classes have been loaded, at a fraction of the cost of running the entire analysis at runtime. This operation can be cached (in inline caches) for the duration of the request, and maybe in caches similar to the inheritance cache.</p>

<p>A proof of concept was implemented, and used to implement data-flow based, local, unidirectional type inference of generic type parameters, with the same behaviour as PHPStan/Psalm. The approach works, and could be used to experiment with other flavours of type inference.</p>

<h3 id="performance-considerations">Performance Considerations</h3>

<p>Another concern with generics is their impact on performance. Preliminary benchmarks indicated:</p>

<ul>
<li>Generics do not affect the performance of non-generic code.</li>
<li>Simple generic code shows a modest performance degradation of about 1-2% compared to specialized code.</li>
</ul>

<p>However, later exploration has shown that compound types (such as unions) can lead to super-linear time complexity in type checking, potentially resulting in more substantial performance drawbacks. For example, checking whether <code>A|B</code> accepts <code>B</code> is linear, but checking <code>Box&lt;A|B&gt;()</code> against <code>Box&lt;A|B&gt;()</code> is O(nm).</p>

<p>Super-linear complexity is also reached when merging compound types during the resolution of symbolic types.</p>

<h3 id="future-directions">Future Directions</h3>

<p>Ongoing challenges for reified generics include:</p>

<ul>
<li>Evaluating the effects of compound types and extreme cases</li>
<li>Implement type-checking inline caches, and research more sophisticated algorithms for checking compound types</li>
<li>Exploring eager-autoloading (preloading, but automatic), or inheritance-cache alike, to reduce the amount of symbolic types</li>
</ul>

<h1 id="collections">Collections</h1>

<p>One of the main use cases for generics that often gets brought up is the need for typed arrays. In PHP, the swiss-army knife array type can be used (and abused) for lots of reasons. But you can't currently enforce the types to be used as key or value.</p>

<p>In a parallel project, we have been working on a dedicated Collections syntax as a less-challenging alternative to full generics.</p>

<p>Collections would come in three flavours: sets, sequences, and dictionaries. Sets and Sequences only define a value type, whereas Dictionaries have key and value types. The syntax of these could be as follows:</p>

<pre><code>class Article
{
    public function __construct(public string $subject) {}
}

collection(Seq) Articles&lt;Article&gt;
{
}

collection(Dict) YearBooks&lt;int =&gt; Book&gt;
{
}
</code></pre>

<p>You can then instantiate sequences and collections like you would do with a normal class:</p>

<pre><code>$a1 = new Articles();
$b1 = new YearBooks();
</code></pre>

<p>Sequences and Dictionaries will automatically have <a href="https://github.com/php/php-src/compare/master...derickr:php-src:collections&#35;diff-eeb1e0848e9a25b7492398bf5ddf9be15995a67d44a23c336869bf9f36910d1b">many methods defined</a> on them, providing a base functionality like PHP already has with the myriad of <code>array_*</code> functions. If you use the defined methods to add or update elements in the collection, then the type for keys and values have to match the ones as defined on the collection.</p>

<p>In the example above, the <code>add()</code> method for the YearBooks dictionary then requires int to be used as key, and Book as value. For the main manipulation methods (add, get, unset, and isset), ArrayAccess style overloaded operations will also work, as well as potentially operator overloads.</p>

<p>One of the drawbacks of Collections is that you need to declare them. Following adopted practise, that would mean a single line declaration in a separate file for each collection.</p>

<p>Another concern is potentially higher memory usage, as for each class PHP will have to keep a corresponding class entry, including a list of all the associated methods.</p>

<p>And a third concern is that there is no instanceof/is-a relationship between collections of compatible types, for example:</p>

<pre><code>class A {}
class B extends A {}

seq As&lt;A&gt; {}
seq Bs&lt;B&gt; {}

new B() instanceof A // true
new Bs() instanceof As // false
</code></pre>

<p>Or:</p>

<pre><code>namespace Foo;
seq As&lt;A&gt; {}

namespace Bar;
seq As&lt;A&gt; {}

namespace;
new Foo\As instanceof Bar\As; // false
</code></pre>

<p>Collections, although less powerful, can be an alternative to generics in many use cases, but without much of the complexity. The implementation as outline above is also significantly easier. An <a href="https://github.com/derickr/php-src/tree/collections">experimental branch is also available</a>.  However, if full generics are found to be viable and supported, implementing Seq, Set, and Dict directly on standard generics would be significantly preferable.</p>

<p>Larry Garfield has <a href="https://github.com/Crell/php-rfcs/blob/master/collections/research-notes.md">conducted research</a> into other languages and how expansive their collection APIs are.  It's still in rough form, but the consensus seems to be "include everything", possibly broken up into discrete interfaces.  The rough recommendations at the end of the document suggest a likely way forward.</p>

<p>You can find a patch for collections at <a href="https://github.com/php/php-src/pull/15429">https://github.com/php/php-src/pull/15429</a></p>

<h1 id="other-alternatives">Other alternatives</h1>

<h2 id="static-analysis">Static Analysis</h2>

<p>Recent years have seen the emergence of static analysers. Both <a href="https://phpstan.org/blog/generics-in-php-using-phpdocs">PHPStan</a> and <a href="https://psalm.dev/docs/annotating_code/templated_annotations/">Psalm</a> support generics via doc block annotations, and are frequently used in open source libraries and private projects.</p>

<p>Here is an example of a generic Dict class when using PHPStan and Psalm:</p>

<pre><code>/**
 * @template Key
 * @template Value
 */
class Dict
{
    /**
     * @param array&lt;Key,Value&gt; $entries
     */
    public function __construct(private array $entries) {}

    /**
     * @param Key $key
     * @param Value $value
     */
    public function set($key, $value): self
    {
        $this-&gt;entries[$key] = $value;
        return $this;
    }
}

/** @param Dict&lt;string,string&gt; $dict */
function f($dict) {}

$dict = new Dict([1 =&gt; 'foo']);
$dict-&gt;set("foo", "bar"); // Static analyser error
$dict-&gt;set(1, "bar");     // Ok
f($dict);                 // Static analyser error
</code></pre>

<p>The docblock annotations are named “template” for historical reasons, but they implement a generics flavour very close to Java’s: Generic types are checked at static analysis time, and are not visible at runtime.</p>

<p>This offers some benefits of generics, such as type safety, with the following drawbacks:</p>

<ul>
<li>Docblocks can be verbose</li>
<li>Type checking requires running a separate tool (like PHPStan or Psalm)</li>
<li>Generic type information is entirely unavailable at runtime.</li>
<li>Generic type information is not enforced at runtime (so if you don't run a static analysis tool in advance, they accomplish nothing).</li>
</ul>

<h2 id="erased-generic-type-declarations">Erased Generic Type Declarations</h2>

<p>Seeing the difficulties with implementing reified generics in PHP core, it has been proposed to implement them only syntactically, leaving the task of type checking to static analysers.</p>

<p>In this alternative, the PHP syntax would be changed so that type declarations, class declarations, and function declarations accept generic syntax, but the PHP engine would not check them.</p>

<p>We can call these “Erased” type declarations because the engine will simply ignore them at runtime. This alternative could be implemented in various ways:</p>

<ul>
<li>As part of php-src</li>
<li>In an extension</li>
<li>In an autoloader</li>
<li>etc</li>
</ul>

<p>Here is what the same Dict class as above would look like:</p>

<pre><code>class Dict&lt;Key,Value&gt;
{
    public function __construct(private array&lt;Key,Value&gt; $entries) {}

    public function set(Key $key, Value $value): self
    {
        $this-&gt;entries[$key] = $value;
        return $this;
    }
}

function f(Dict&lt;string,string&gt; $dict) {}

$dict = new Dict([1 =&gt; 'foo']);
$dict-&gt;set("foo", "bar"); // Static analyser error
$dict-&gt;set(1, "bar");     // Ok
f($dict);                 // Static analyser error
</code></pre>

<p>This addresses the docblock verbosity issue of the Static Analysis alternative, but this introduces an inconsistency: Type declarations cause coercion, but erased generic type declarations will not.</p>

<p>Consider the following example:</p>

<pre><code>class StringList
{
    public function add(string $value)
    {
        $this-&gt;values[] = $value;
    }
}

class List&lt;T&gt;
{
    public function add(T $value)
    {
        $this-&gt;values[] = $value;
    }
}

$list = new StringList();
$list-&gt;add(123); // coerced to string

$list = new List&lt;string&gt;();
$list-&gt;add(123); // NOT coerced to string
</code></pre>

<p>In this scenario, the first call to <code>add()</code> will coerce the argument to string, but not the second one.</p>

<p>In languages like Java, which has erased generics on top of a traditional type system, the compiler does type checking, so inconsistencies like the above do not exist. However, in PHP these are unavoidable.</p>

<p>Another drawback of erased generics is they are not visible at runtime. This would prevent pattern matching from seeing generic type arguments, for example.</p>

<h2 id="fully-erased-type-declarations">Fully Erased Type Declarations</h2>

<p>One way to address the inconsistency issue of Erased Generics is to change all type declarations to be erased. This could be opt-in with a <code>declare()</code> statement:</p>

<pre><code>declare(types=erased);
</code></pre>

<p>In this alternative, the engine would stop checking types at runtime. In the previous example, both calls to <code>add()</code> would have the same behaviour: the value is not coerced. It is then up to the user to check types with an analyser.</p>

<p>This is not uncommon in mainstream interpreted languages, as all of Javascript (via TypeScript), Python, and Ruby have fully erased type declarations.</p>

<p>Letting users opt-in for fully erased typing and generics on a per-file basis would be another option to look at, and would make working with PHPStan/Psalm generics less verbose. Some additional benefits of this solution include:</p>

<ul>
<li>Short-term performance improvements due to the lack of type checking at runtime in opted-in code.</li>
<li>The potential for extending the type system with advanced types like non-empty-string, list, int<range>, class-string, conditional types, and more.</li>
</ul>

<p>However, there would also be significant downsides:</p>

<ul>
<li>It's unclear what impact erased types would have on reflection, or libraries that depend on reflection.</li>
<li>It would make type enforcement dependent on a developer actively choosing to run a static analysis tool, and the majority of the ecosystem right now doesn't use one to begin with.</li>
<li>It effectively creates a third "type mode" that developers would have to account for, in addition to strict and weak typing today.  (Since code with user-defined pseudo types wouldn't be compatible with the type-enforced modes.)</li>
<li>It would not actually resolve the "some types are enforced but not others" question, as anyone who wanted to use generics but not fully-erased types would still be left with partial-enforcement.</li>
<li>PHP is currently unique among major scripting languages for having enforced types. That's a benefit and market advantage we would lose.</li>
</ul>

<h1 id="generic-arrays">Generic Arrays</h1>

<p>This blog post discusses generic objects, but what about arrays?</p>

<h2 id="fluid-arrays">Fluid Arrays</h2>

<p>Arrays are copy on write: Modifying them creates a new copy (if they are referenced elsewhere), and modifies the copy instead. This makes arrays safe to pass around as you don’t need to worry about other functions modifying them (unless passed by reference).</p>

<p>From a typing perspective this means that the type of an array is always defined by its content, and this type can not change because modifying an array creates a new one.</p>

<p>From a generics perspective this is a very convenient property, as this makes arrays variant: They can have supertypes and subtypes, just like any (non-generic) class. In other words, the following code is type safe:</p>

<pre><code>class A {}
class B extends A {}

function f(array $a) {}
function g(array&lt;A&gt; $a) {}
function h(array&lt;B&gt; $a) {}

$array = [new B()];

f($array);
g($array);
h($array);
</code></pre>

<p>Usually, generic containers are invariant because their type placeholders are used in both read and write positions. This is not the case for arrays because they are semantically immutable / copy on write.</p>

<p>So the natural way to implement generic arrays is just as explained above: Let their content define their type. This is illustrated in the example below:</p>

<pre><code>$a = [1];       // array&lt;int&gt;
$b = [new A()]; // array&lt;A&gt;
$c = $b;        // array&lt;A&gt;
$c[] = new B(); // array&lt;A|B&gt;
$b;             // array&lt;A&gt;
</code></pre>

<p>This does provide type safety, because what matters is that types are checked at API boundaries—when passing arguments to functions, returning values, updating object properties:</p>

<pre><code>function f(array&lt;int&gt; $a) {}

$a = [1];
f($a); // ok

$b = [new A()];
f($b); // error
</code></pre>

<p>A PoC has been implemented, but the performance impact is still uncertain. Another issue is that supporting references and/or typed properties may not be possible.</p>

<h2 id="static-arrays">Static Arrays</h2>

<p>An alternative to Fluid Arrays is to fix the type at instantiation time:</p>

<pre><code>$a = array&lt;int&gt;(1); // array&lt;int&gt;
$a[] = new A();     // error
</code></pre>

<p>However, this alternative is very orthogonal to how arrays are used in PHP code today. It also makes arrays invariant:</p>

<pre><code>function f(array&lt;int&gt; $a) {}
function g(array $a) {}

$a = [1];

f($a); // ok
g($a); // error
</code></pre>

<p>To understand why <code>g($a)</code> is an error, remember the explanation about invariance in the Generics section. <code>g()</code> accepts an <code>array</code> (<code>array&lt;mixed&gt;</code>), which means it should be able to add an element of any type to it. However, if we pass an <code>array&lt;int&gt;</code> to it, this contract is broken. Therefore, <code>array</code> can not accept <code>array&lt;int&gt;</code>.</p>

<p>Invariance would make arrays very difficult to adopt, as a library can not start type hinting generic arrays without breaking user code, and users can not pass generic arrays to libraries until they start using generic arrays type declarations.</p>

<p>These pitfalls are why it may also be preferable to focus on object-based collections. Either with the custom syntax above described as Collections, or with the more complete full generics, as are present in most modern languages.  However, the two approaches are mutually-compatible.</p>

<h1 id="conclusion">Conclusion</h1>

<p>We hope to have explained in this article what different options are available for the implementation of generic objects, collections, or related features into PHP. More work is required, and ongoing, to determine which options are most desireable, or even feasible.</p>

<p>The next steps for investigation are:</p>

<ul>
<li>Further investigate type inference for reified generics.  If that turns out to be feasible with acceptable trade-offs, that is most likely the best option, and would imply building collections on top of them.</li>
<li>Determine if erased generics would have any additional drawbacks not noted here that would make them infeasible.</li>
<li>Determine if fully-erased types would have additional drawbacks not noted here that would make them infeasible.</li>
<li>Further develop an optimal feature set for collections, which would be applicable either in the dedicated syntax or as an application of generics (reified or erased).</li>
<li>Investigate the feasibility of using internal data structures in collections other than a hashmap (array) for better performance and simplicity.  (This would be a reason collections could not be done fully in user-space.)</li>
<li>Halt efforts on typed arrays, as our current thoughts are that it is probably not worth doing, due to the complexities of how arrays work, and the minimal functionality that it would bring.</li>
</ul>

<p>Right now, we’re focused on gathering feedback specifically related to the questions below, to help guide our next steps:</p>

<ul>
<li>If reified generics turn out to be infeasible, would erased generics be acceptable, or should that continue to be left to user-space tooling?</li>
<li>What generic features are acceptable to leave out to make the implementation more feasible?  (Eg, don't allow generics over union types; unioned generics are slow and we don't care; don't support in/out variance markers; etc.)</li>
<li>If erased generics are included, would that necessitate an official linter to validate them, or continue to leave that to user-space tooling?</li>
<li>If reified generics turn out to be infeasible, would the dedicated collections syntax shown here be acceptable?</li>
<li>Would "erased generics now, and we can <em>probably</em> convert them to reified in the future" be an acceptable strategy, if it is determined to be feasible?</li>
</ul>

<h1 id="discussions">Discussions</h1>

<ul>
<li><a href="https://externals.io/message/125049">PHP Internals mailing list</a></li>
<li><a href="https://www.reddit.com/r/PHP/comments/1ew7hik/state_of_generics_and_collections/">Reddit</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Joining Forces for Open Source Cybersecurity Standards]]></title>
            <link href="https://thephp.foundation/blog/2024/04/02/open-source-community-cra-compliance-initiative/"/>
            <updated>2024-04-02T00:00:00+00:00</updated>
            <id>https://thephp.foundation/blog/2024/04/02/open-source-community-cra-compliance-initiative/</id>
            <content type="html"><![CDATA[<p>The PHP Foundation, alongside leading open source organizations including the <a href="https://www.apache.org/">Apache Software Foundation</a>, <a href="https://www.blender.org/about/foundation/">Blender Foundation</a>, <a href="https://www.openssl.org/">OpenSSL Software Foundation</a>, <a href="https://www.python.org/psf-landing/">Python Software Foundation</a>, <a href="https://foundation.rust-lang.org/">Rust Foundation</a>, and <a href="https://www.eclipse.org/">Eclipse Foundation</a>, is excited to announce a collaborative initiative aimed at establishing common cybersecurity standards in alignment with the European Union’s <a href="https://digital-strategy.ec.europa.eu/en/library/cyber-resilience-act">Cyber Resilience Act (CRA)</a>.</p>

<p>This initiative, hosted by the Eclipse Foundation, will focus on creating specifications for secure software development rooted in open source best practices.</p>

<blockquote>
  <p>We hope that our specifications could inform the formal standardisation processes of at least one of the European Standards Organisations. Given the tight time horizon for implementation of the CRA, we believe that this immediate start will provide a constructive environment to host the technical discussions necessary for the stewards, contributors, and adopters of open source to meet the requirements set forth in these new regulations.</p>
</blockquote>

<p>At The PHP Foundation, we are committed to supporting the open source community, ensuring that the PHP language and its ecosystem are prepared for the upcoming regulatory changes.</p>

<p>For more information, see the <a href="https://eclipse-foundation.blog/2024/04/02/open-source-community-cra-compliance/">full announcement on the Eclipse Foundation website</a>.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[The PHP Foundation: Impact and Transparency Report 2023]]></title>
            <link href="https://thephp.foundation/blog/2024/02/26/transparency-and-impact-report-2023/"/>
            <updated>2024-02-26T00:00:00+00:00</updated>
            <id>https://thephp.foundation/blog/2024/02/26/transparency-and-impact-report-2023/</id>
            <content type="html"><![CDATA[<h2 id="executive-summary">Executive Summary</h2>

<p>At the beginning of 2024, The PHP Foundation is a collective of <strong>9 volunteer board members</strong>, <strong>1 full-time operations manager</strong> sponsored by JetBrains, and <strong>10 developers</strong> paid part-time/full-time who make more than half of the contributions to the PHP language and its extensions.</p>

<p>In 2023, The PHP Foundation received <strong>$418,669 in financial contributions</strong> from organizations and individuals.</p>

<p>The PHP Foundation’s main focus in 2023 was strengthening the maintenance of PHP core, the project that lives in the <a href="https://github.com/php/php-src">php/php-src</a> GitHub repository. This project is the home of the PHP language, where PHP’s interpreter is developed. Everyone who uses PHP benefits in one way or another from the work that is done in this repository.</p>

<p>The PHP Foundation demonstrates its growing impact on the language through an increased volume and velocity of code contributions and reviews. The 6 part-time and full-time developers contracted by The PHP Foundation were responsible for nearly half of the commits and reviews made in the PHP language.</p>

<p>Moreover, the foundation's presence and activities have led to heightened interest and activity in the PHP project overall, with the total number of <strong>contributions to the language growing by 79% compared to 2022</strong>.</p>

<p>At the end of 2023, the German government’s <strong>Sovereign Tech Fund chose to invest in The PHP Foundation’s mission</strong> by providing funding for a security audit and other long outstanding projects critical for the PHP ecosystem.</p>

<p>The foundation is <strong>expanding its development efforts in 2024</strong> by contracting 4 additional developers and increasing the number of hours that current contracted developers are working.</p>

<p>The foundation plans to spend up to $1,045,000, including compensation and fees. We are looking for additional sponsor contributions to allow us to continue these efforts in the next years.</p>

<p>In 2024, we aim to achieve the following strategic goals:</p>

<ul>
<li>Ensure sustainable sponsorship for the foundation.</li>
<li>Ensure that foundation developers focus on valuable tasks.</li>
<li>Promote PHP within the web development ecosystem.</li>
</ul>

<h2 id="the-php-foundation-mission">The PHP Foundation Mission</h2>

<p>The PHP Foundation was initiated by JetBrains, Automattic, Laravel, Acquia, Zend, Private Packagist, Symfony, Craft CMS, and Tideways. It was publicly <a href="https://blog.jetbrains.com/phpstorm/2021/11/the-php-foundation/">launched</a> on November 22, 2021.</p>

<p>Since 2021, many companies and individuals have joined the initiative. To make the priorities of the foundation more clear and aligned, we’ve <strong>updated the mission statement</strong>:</p>

<blockquote>
  <p>The PHP Foundation’s mission is to ensure the long-term prosperity of the PHP language. The PHP Foundation focuses on providing financial support and guidance to PHP language developers to support its goals of improving the language for its users, providing high-quality maintenance, and improving the PHP language project to retain current contributors and to integrate new contributors. The PHP Foundation aims to promote the public image of the PHP language in the interest of retaining existing and gaining new users and contributors.</p>
</blockquote>

<p><br>
So it defines 4 priorities of the foundation:</p>

<ol>
<li>Improve the language for users.</li>
<li>Provide high-quality maintenance.</li>
<li>Improve the project to retain current contributors and to integrate new contributors.</li>
<li>Promote the public image of PHP.</li>
</ol>

<h2 id="organizational-growth">Organizational Growth</h2>

<p>Many companies with a vested interest in PHP’s prosperity made a major financial contribution during the year. These are the companies that contributed $10,000 or more in 2023:</p>

<p><strong>JetBrains, Automattic, Private Packagist, Craft CMS, Tideways, pixiv Inc., Mercari Inc., Symfony Corp, Aternos GmbH, Sentry, Ardennes-étape, Zend by Perforce, Les-Tilleuls.coop, Cybozu.</strong></p>

<p>Overall, 718 organizations and individuals sponsored the foundation in 2023 <a href="https://opencollective.com/phpfoundation">on Open Collective</a> and <a href="https://github.com/sponsors/ThePHPF">GitHub Sponsors</a>.</p>

<h3 id="quotes">Quotes</h3>

<p>Here is what some of the prominent folks say about the foundation.</p>

<p><figure class="max-w-screen-md mx-auto text-center" id="quote-brandon-kelly">
    <svg class="w-10 h-10 mx-auto mb-3 text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 14">
        <path d="M6 0H2a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v1a3 3 0 0 1-3 3H2a1 1 0 0 0 0 2h1a5.006 5.006 0 0 0 5-5V2a2 2 0 0 0-2-2Zm10 0h-4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v1a3 3 0 0 1-3 3h-1a1 1 0 0 0 0 2h1a5.006 5.006 0 0 0 5-5V2a2 2 0 0 0-2-2Z"/>
    </svg>
    <blockquote>
        <p class="text-xl italic text-gray-900">“We’re proud supporters of the PHP Foundation here at Craft CMS. PHP has played such a huge role in our careers, and it’s an honor to be a part of its story.”</p>
    </blockquote>
    <figcaption class="flex items-center justify-center mt-3 space-x-3 rtl:space-x-reverse">
        <img class="w-10 h-10 rounded-full" src="/assets/post-images/2024/report-2023/brandon_kelly.jpg" alt="profile picture">
        <div class="flex items-center">
            <cite class="pl-0.5 font-medium text-gray-900">Brandon Kelly, </cite>
            <cite class="pl-0.5 text-gray-500">CEO at Craft CMS</cite>
        </div>
    </figcaption>
</figure>
</p>

<p><figure class="max-w-screen-md mx-auto text-center" id="quote-ben-marks">
    <svg class="w-10 h-10 mx-auto mb-3 text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 14">
        <path d="M6 0H2a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v1a3 3 0 0 1-3 3H2a1 1 0 0 0 0 2h1a5.006 5.006 0 0 0 5-5V2a2 2 0 0 0-2-2Zm10 0h-4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v1a3 3 0 0 1-3 3h-1a1 1 0 0 0 0 2h1a5.006 5.006 0 0 0 5-5V2a2 2 0 0 0-2-2Z"/>
    </svg>
    <blockquote>
        <p class="text-xl italic text-gray-900">“So much of our world - the content we consume (blogs, ecommerce, social media) -  is delivered via PHP applications, enabled by the continuing efforts of the PHP Foundation and the ecosystem it enables. The PHP ecosystem&#039;s success has a significant impact on all of our lives, and we at Shopware are therefore proud supporters of the PHP Foundation.”</p>
    </blockquote>
    <figcaption class="flex items-center justify-center mt-3 space-x-3 rtl:space-x-reverse">
        <img class="w-10 h-10 rounded-full" src="/assets/post-images/2024/report-2023/ben_marks.jpg" alt="profile picture">
        <div class="flex items-center">
            <cite class="pl-0.5 font-medium text-gray-900">Ben Marks, </cite>
            <cite class="pl-0.5 text-gray-500">Director Global Market Development at shopware AG</cite>
        </div>
    </figcaption>
</figure>
</p>

<p><figure class="max-w-screen-md mx-auto text-center" id="quote-kevin-dunglas">
    <svg class="w-10 h-10 mx-auto mb-3 text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 14">
        <path d="M6 0H2a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v1a3 3 0 0 1-3 3H2a1 1 0 0 0 0 2h1a5.006 5.006 0 0 0 5-5V2a2 2 0 0 0-2-2Zm10 0h-4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v1a3 3 0 0 1-3 3h-1a1 1 0 0 0 0 2h1a5.006 5.006 0 0 0 5-5V2a2 2 0 0 0-2-2Z"/>
    </svg>
    <blockquote>
        <p class="text-xl italic text-gray-900">“Les-Tilleuls.coop is proud to support the PHP Foundation. By maintaining the language, the foundation is ensuring the future of PHP and the web. By adding innovative new features, it simplifies knowledge sharing and, in the spirit of free software, makes it easier than ever for everyone to create independent sites and applications.”</p>
    </blockquote>
    <figcaption class="flex items-center justify-center mt-3 space-x-3 rtl:space-x-reverse">
        <img class="w-10 h-10 rounded-full" src="/assets/post-images/2024/report-2023/kevin_dunglas.png" alt="profile picture">
        <div class="flex items-center">
            <cite class="pl-0.5 font-medium text-gray-900">Kevin Dunglas, </cite>
            <cite class="pl-0.5 text-gray-500">Les-Tilleuls.coop, FrankenPHP</cite>
        </div>
    </figcaption>
</figure>
</p>

<p><figure class="max-w-screen-md mx-auto text-center" id="quote-matthew-weier-o&#039;phinney">
    <svg class="w-10 h-10 mx-auto mb-3 text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 14">
        <path d="M6 0H2a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v1a3 3 0 0 1-3 3H2a1 1 0 0 0 0 2h1a5.006 5.006 0 0 0 5-5V2a2 2 0 0 0-2-2Zm10 0h-4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v1a3 3 0 0 1-3 3h-1a1 1 0 0 0 0 2h1a5.006 5.006 0 0 0 5-5V2a2 2 0 0 0-2-2Z"/>
    </svg>
    <blockquote>
        <p class="text-xl italic text-gray-900">“As longtime contributors to the PHP project, both financially as well as by employing developers on the project, Zend by Perforce is pleased to sponsor the PHP Foundation and support its mission. Expanding the pool of maintainers and developers capable of evolving the language will help keep PHP relevant, and expand its reach in the web development ecosystem.”</p>
    </blockquote>
    <figcaption class="flex items-center justify-center mt-3 space-x-3 rtl:space-x-reverse">
        <img class="w-10 h-10 rounded-full" src="/assets/post-images/2024/report-2023/mwop.jpg" alt="profile picture">
        <div class="flex items-center">
            <cite class="pl-0.5 font-medium text-gray-900">Matthew Weier O&#039;Phinney, </cite>
            <cite class="pl-0.5 text-gray-500">Senior Product Manager, Zend by Perforce</cite>
        </div>
    </figcaption>
</figure>
</p>

<p><br></p>

<h2 id="the-sovereign-tech-fund-investment">The Sovereign Tech Fund Investment</h2>

<p>The <a href="https://sovereigntechfund.de/en/">Sovereign Tech Fund</a> (STF) supports the development, improvement, and maintenance of open digital infrastructure in the public interest. Its goal is to strengthen the open-source ecosystem sustainably, focusing on security, resilience, technological diversity, and the people behind the code. STF is funded by the German Federal Ministry for Economic Affairs and Climate Action (BMWK) and supported by the German Federal Agency for Disruptive Innovation GmbH (SPRIND).</p>

<p>We have collaborated with STF to create work plans for these specific projects:</p>

<h4 id="pecl-overhaul">PECL overhaul</h4>

<p>The current system for distributing PHP extensions, PECL/PEAR, is outdated and prone to supply-chain attacks, making it unreliable for average developers. This leads to the creation of redundant tools and new security issues.</p>

<p>We proposed to rewrite the PECL installer, replacing the messy pear code and the inefficient website.</p>

<p>Follow the progress of <strong>the new tool 🥧PIE</strong> here: <a href="https://github.com/ThePHPF/pie-design">https://github.com/ThePHPF/pie-design</a>.</p>

<h4 id="testing-tool-for-fpm">Testing tool for FPM</h4>

<p>Currently, the PHP project's testing framework lacks more specialized support for the automated testing of the FastCGI Process Manager (FPM), especially for issues that require higher load. We propose to develop an FPM/SAPI testing tool that can execute all applications and set expectations on the produced logs and server responses. This tool will be connected with a load testing tool (e.g., wrk) to simulate real-world usage and load.</p>

<p>The work has started in the <a href="https://github.com/bukka/wst">https://github.com/bukka/wst</a> repository with the plan to move it to the PHP GitHub organization when ready.</p>

<h4 id="security-audit">Security Audit</h4>

<p>PHP, like any other language, has its share of security issues. We are going to collaborate with a security research group for a comprehensive codebase audit and address the discovered issues. This will significantly improve the security of PHP and make it more reliable for developers and businesses.</p>

<p>The audit is being organized in partnership with <a href="https://ostif.org/">OSTIF</a>.</p>

<h4 id="documentation-improvements">Documentation improvements</h4>

<p>The current PHP documentation has several blind spots, with many functions and methods not covered at all. We propose to update and modernize the English PHP documentation, review and remove user comments, integrate 3v4l.org for interactive examples, and simplify the maintenance process. This will make PHP more accessible to new developers and serve as a reliable reference for experienced ones.</p>

<h2 id="the-php-foundation-governance">The PHP Foundation Governance</h2>

<p>In 2023, we renamed the Administration group to the <strong>Governing Board</strong> to avoid confusions and better align with industry standards.</p>

<p><a href="https://thephp.foundation/structure/#admins">The lineup</a> of the group has not changed and consists of veteran PHP community leaders, representatives of the founding companies, and other key stakeholders.</p>

<p>One notable change compared to the previous year is a full-time operations manager sponsored by JetBrains in addition to the financial contribution.</p>

<p>We aim to establish a level of involvement for other key stakeholders from the PHP world through the Advisory Board and other initiatives.</p>

<h2 id="the-advisory-board">The Advisory Board</h2>

<p>To keep major sponsors of PHP abreast of the latest happenings in the foundation and allow them to see the direct impact of their support, we announced the advisory board initiative <a href="https://thephp.foundation/blog/2023/03/31/php-foundation-update-march-2023/#a-new-benefit-for-major-sponsors-%E2%80%93-advisory-board-membership">in March</a>.</p>

<p>In addition to the <a href="https://thephp.foundation/structure/">Governing Board</a> representatives from Automattic, JetBrains, Private Packagist, Symfony, Tideways, and Zend by Perforce, the <strong>Advisory Board includes members from</strong> Moodle, Shopware, Laravel, Ardennes-étape, Les-Tilleuls.coop / API Platform, Aternos GmbH, PrestaShop, CraftCMS.</p>

<p>Your company can <strong><a href="https://thephp.foundation/join/">become a member</a></strong> by contributing a minimum of $12,000 to The PHP Foundation as at least a Silver Sponsor.</p>

<h2 id="the-php-foundation-staff">The PHP Foundation Staff</h2>

<h3 id="renewing-contracts">Renewing contracts</h3>

<p>In 2023, we had a team of 6 developers. All of them demonstrated a high quality of work and dedication to the mission of the foundation. We were happy to renew the contracts for 2024 as well as extend the total number of hours for developers requesting it.</p>

<p>We have also adjusted the compensation rates for developers to better reflect the market, as the rates had not changed since 2021.</p>

<p>We aim to review the rates every year based on the available funding and priorities.</p>

<h3 id="team-extension">Team extension</h3>

<p>As was mentioned in the previous transparency report, we aimed to extend the team. It did not happen in 2023 because one of the prospective developers could not join the team for personal reasons, and had to step down from PHP core development entirely. Again, this is <a href="https://blog.jetbrains.com/phpstorm/2021/11/the-php-foundation/#the_bus_factor">the Bus Factor at its worst</a>. However, we were able to extend the team starting with 2024.</p>

<p>We accepted applications for developer positions from September through October 2023. We received about 200 resumes, and we’ve chosen 4 developers with a proven track record of contributions to the PHP language and ecosystem.</p>

<p>We offered the new developers 6-month trial contracts so that the developers and the Governing Board can evaluate the results and then decide whether to continue the engagements.</p>

<h3 id="the-team-as-of-2024">The team as of 2024</h3>

<p>Starting from January, we now contract 10 developers to work on PHP:</p>

<ul>
<li><strong>Arnaud Le Blanc</strong> <a href="https://github.com/arnaud-lb">@arnaud-lb</a></li>
<li><strong>David Carlier</strong> <a href="https://github.com/devnexen">@devnexen</a></li>
<li><strong>Derick Rethans</strong> <a href="https://github.com/derickr">@derickr</a></li>
<li><strong>Gina Peter Banyard</strong> <a href="https://github.com/Girgias">@Girgias</a></li>
<li><strong>Ilija Tovilo</strong> <a href="https://github.com/iluuu1994">@iluuu1994</a></li>
<li><strong>Jakub Zelenka</strong> <a href="https://github.com/bukka">@bukka</a></li>
<li><strong>James Titcumb</strong> <a href="https://github.com/asgrim">@asgrim</a></li>
<li><strong>Máté Kocsis</strong> <a href="https://github.com/kocsismate">@kocsismate</a></li>
<li><strong>Saki Takamachi</strong> <a href="https://github.com/SakiTakamachi">@SakiTakamachi</a></li>
<li><strong>Shivam Mathur</strong> <a href="https://github.com/shivammathur">@shivammathur</a></li>
</ul>

<h3 id="team-timeline">Team timeline</h3>

<p>We established the following timeline for team review.</p>

<ul>
<li>January 2024: Developers start work according to the new contracts.</li>
<li>May 2024: Evaluate new developers, contracts are extended, expanded, or terminated after the first 6 months.</li>
<li>September 2024: Open applications for new developers, evaluate performance of the current group of developers.</li>
<li>October 2024: Evaluate applications, work out updates to compensation, decide on a budget.</li>
<li>November 2024: Renew contracts with existing developers, potentially sign contracts with new developers.</li>
</ul>

<p>And in 2025 we start the cycle again.</p>

<h2 id="retrospective%3A-goals-of-2023">Retrospective: Goals of 2023</h2>

<p>In the previous report, we outlined a few organizational and technical goals. Let’s look back and evaluate the results.</p>

<h3 id="organization-goals">Organization goals</h3>

<ul>
<li><strong>Extend the foundation developers team. ✅</strong><br/>
We did not grow in 2023 strictly speaking, but the work done in 2023 helped to build the ground for two contracted developers to go full-time, as well as to hire 4 new developers.<br/><br/></li>
<li><strong>Grow the community of the foundation. ✅</strong><br/>
The foundation’s Slack became a hub for the community and helped to move initiatives.<br/><br/></li>
<li><strong>Improve communication and provide clear benefits for sponsors. ✅</strong> <br/>
We created a <a href="https://thephp.foundation/join/#membership-deck">deck with benefits for sponsors</a> and started the advisory board initiative. <br/><br/></li>
<li><strong>Explore strategic partnerships and marketing opportunities. ✅ / ❌</strong><br/>
We received investment from the Sovereign Tech Fund and started collaboration with OSTIF.<br/>
We did not explore any marketing opportunities. And there is a room for many more strategic partnerships.</li>
</ul>

<h3 id="technical-goals">Technical goals</h3>

<ul>
<li><strong>Ongoing maintenance and development of the PHP core.  ✅</strong> <br/><br/></li>
<li><strong>Improve the quality of the ideas and RFCs coming from the foundation. ✅</strong><br/>
One of the examples here could be <a href="https://wiki.php.net/rfc/property-hooks">Property Hooks RFC</a>. Although it has not been voted on yet, we have put amazing work into it and consulted many different parties to make it as good as possible.<br/><br/></li>
<li><strong>Develop a high-level roadmap and vision for PHP changes sponsored by the foundation. ❌</strong><br/>
The roadmap and vision need further development and discussion. However, we conducted several pieces of research, both quantitative and qualitative. Some of these findings were shared at conferences where we participated, including PHPCon Poland, SymfonyCon, and Laracon EU. We plan to continue this work.</li>
</ul>

<h2 id="php-language-impact">PHP Language Impact</h2>

<p>On a daily basis, the PHP Foundation staff team contributes to the open-source repositories of the <a href="https://github.com/php">PHP GitHub organization</a>. The foundation team contributes in many forms: filing issues, reviewing pull requests, participating in discussions on mailing lists, triaging issues, submitting RFC proposals.</p>

<p>In this document, four categories of contributions are presented in more detail: commits to php-src, reviews of pull requests on php-src, submitted RFC documents, and documentation work.</p>

<h3 id="commits-to-php">Commits to PHP</h3>

<p>The following chart summarizes the number of commits made to the <a href="https://github.com/php/php-src">php/php-src</a> repository in 2023.</p>

<table>
<thead>
<tr>
  <th></th>
  <th>2022</th>
  <th>2023</th>
</tr>
</thead>
<tbody>
<tr>
  <td>Total by The PHP Foundation</td>
  <td>683</td>
  <td>784</td>
</tr>
<tr>
  <td>Total other</td>
  <td>885</td>
  <td>1588</td>
</tr>
</tbody>
</table>

<p><img src="/assets/post-images/2024/transparency-and-impact-report-2023/2024-02-26-transparency-and-impact-report-2023.md-1.svg" alt="Diagram 0" /></p>

<p>Note that the number of commits does not fairly represent the level of effort or the scope of the work. However, it can demonstrate the foundation's relative level of contribution to the PHP core through an objective metric.</p>

<h3 id="reviews">Reviews</h3>

<p>The diagram summarizes the number of pull request reviews made in the <a href="https://github.com/php/php-src">php/php-src</a> repository from January 1 to December 31, 2023.</p>

<table>
<thead>
<tr>
  <th></th>
  <th>2022</th>
  <th>2023</th>
</tr>
</thead>
<tbody>
<tr>
  <td>Total by The PHP Foundation</td>
  <td>283</td>
  <td>702</td>
</tr>
<tr>
  <td>Total other</td>
  <td>551</td>
  <td>416</td>
</tr>
</tbody>
</table>

<p><img src="/assets/post-images/2024/transparency-and-impact-report-2023/2024-02-26-transparency-and-impact-report-2023.md-2.svg" alt="Diagram 1" /></p>

<h3 id="rfcs">RFCs</h3>

<p>Below are the RFC proposals authored or co-authored by The PHP Foundation developers in 2023 (random order).</p>

<table>
<thead>
<tr>
  <th>RFC</th>
  <th>Proposed</th>
  <th>Status</th>
</tr>
</thead>
<tbody>
<tr>
  <td><a href="https://wiki.php.net/rfc/deprecate-implicitly-nullable-types">Deprecate implicitly nullable parameter types</a></td>
  <td>2023-12-20</td>
  <td>Under Discussion</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/deprecate_functions_with_overloaded_signatures">Deprecate functions with overloaded signatures</a></td>
  <td>2023-01-31</td>
  <td>Implemented</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/datetime-exceptions">More Appropriate Date/Time Exceptions</a></td>
  <td>2023-02-08</td>
  <td>Implemented</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/proper-range-semantics">Define proper semantics for range() function</a></td>
  <td>2023-03-13</td>
  <td>Implemented</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/typed_class_constants">Typed class constants</a></td>
  <td>2020-07-06</td>
  <td>Implemented</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/assert-string-eval-cleanup">Deprecate remains of string evaluated code assertions</a></td>
  <td>2023-05-31</td>
  <td>Implemented</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/saner-array-sum-product">Saner array_(sum&#124;product)()</a></td>
  <td>2023-01-14</td>
  <td>Implemented</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/saner-inc-dec-operators">Path to Saner Increment/Decrement operators</a></td>
  <td>2022-11-21</td>
  <td>Implemented</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/rfc1867-non-post">RFC1867 for non-POST HTTP verbs</a></td>
  <td>2023-10-06</td>
  <td>Implemented</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/unbundle_imap_pspell_oci8">Unbundle ext/imap, ext/pspell, ext/oci8, and ext/PDO_OCI</a></td>
  <td>2023-10-03</td>
  <td>Accepted</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/policy-repository">Policy Repository</a></td>
  <td>2023-12-04</td>
  <td>Implemented</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/access_scope_from_magic_accessors">Access Scope from Magic Accessors</a></td>
  <td>2023-01-19</td>
  <td>Withdrawn</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/deprecations_php_8_4">Deprecations for PHP 8.4</a></td>
  <td>2023-07-25</td>
  <td>Draft</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/file-descriptor-function">Add file_descriptor() function</a></td>
  <td>2023-01-16</td>
  <td>Under Discussion</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/core-autoloading">New core autoloading mechanism with support for function autoloading</a></td>
  <td>2023-04-03</td>
  <td>Under Discussion</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/property-hooks">Property hooks</a></td>
  <td>2023-01-03</td>
  <td>Under discussion</td>
</tr>
<tr>
  <td><a href="https://wiki.php.net/rfc/release_cycle_update">Release cycle update</a></td>
  <td>2023-11-05</td>
  <td>Under Discussion</td>
</tr>
</tbody>
</table>

<h3 id="release-maintenance">Release Maintenance</h3>

<p>Jakub Zelenka, one of the foundation developers, also volunteered to be a release manager for PHP 8.3. The PHP Foundation supported such an initiative.</p>

<h2 id="the-php-foundation-brand-%26-public-channels">The PHP Foundation brand &amp; public channels</h2>

<p>The PHP Foundation represents a community of core PHP developers and advocates for the PHP programming language. The channels listed below were used by the PHP Foundation for public communication:</p>

<ul>
<li>11,481 Twitter followers <a href="https://twitter.com/thephpf">https://twitter.com/thephpf</a></li>
<li>10,320 LinkedIn page followers <a href="https://www.linkedin.com/company/phpfoundation">https://www.linkedin.com/company/phpfoundation</a></li>
<li>684 Mastodon followers <a href="https://phpc.social/@thephpf">https://phpc.social/@thephpf</a></li>
</ul>

<p>The PHP Foundation members gave talks at multiple conferences throughout the year:</p>

<ul>
<li><a href="https://www.phpconference.co.uk/">PHP UK Conference</a> – Derick Rethans</li>
<li><a href="https://phpconference.com/">International PHP Conference</a> – Nils Adermann, Benjamin Eberlei</li>
<li><a href="https://froscon.org/en/">FrOSCon</a> – Sebastian Bergmann</li>
<li><a href="https://tek.phparch.com/">php&#91;tek&#93;</a> – Derick Rethans</li>
<li><a href="https://events.drupal.org/lille2023/session/php-foundation-0">DrupalCon Lille</a> - Nils Adermann</li>
<li><a href="https://php.bettercode.eu/">betterCode(PHP)</a> – Jakub Zalenka</li>
<li><a href="https://event.afup.org/">ForumPHP</a> – Gina P. Banyard</li>
<li><a href="https://2023.phpcon.pl/en/">PHPCon Poland</a> – Roman Pronskiy</li>
<li><a href="https://live.symfony.com/2023-brussels-con/">SymfonyCon</a> – Nicolas Grekas</li>
</ul>

<h2 id="official-recognition-on-the-php-website">Official Recognition on the PHP website</h2>

<p>The PHP Foundation is now officially endorsed on the php.net website. This was the result of a community vote on <a href="https://wiki.php.net/rfc/promote_php_foundation">RFC Promote the PHP Foundation</a>. Big thanks to Jim Winstead and the PHP community for this.</p>

<h2 id="financial-report">Financial report</h2>

<p>In 2023, The PHP Foundation was financially backed by organizations and individuals with the goal of paying a competitive salary to as many core developers as possible.</p>

<table>
<thead>
<tr>
  <th></th>
  <th>2021 - 2022</th>
  <th>2023</th>
</tr>
</thead>
<tbody>
<tr>
  <td>Total contributed to The PHP Foundation</td>
  <td>$ 712,484</td>
  <td>$ 478,767</td>
</tr>
<tr>
  <td>Fees *</td>
  <td>$ 90,273</td>
  <td>$ 60,098</td>
</tr>
<tr>
  <td>Total received</td>
  <td>$ 622,211</td>
  <td>$ 418,669</td>
</tr>
<tr>
  <td>Paid to developers</td>
  <td>$ 133,285</td>
  <td>$ 275,181</td>
</tr>
</tbody>
</table>

<p><br>
<em>* Fees include a 10%  Open Source Collective fiscal host fee (dealing with contracts, expense reviews and payments, bank account management, official registrations and dealing with government requirements, open collective platform development etc.), and 1-5% percent of payment processing fees, depending on the payment method used.</em></p>

<p>All incoming and outgoing <strong>transactions of The PHP Foundation are publicly available</strong> to view for anyone: <a href="https://opencollective.com/phpfoundation#category-BUDGET">https://opencollective.com/phpfoundation#category-BUDGET</a></p>

<p><img src="/assets/post-images/2024/report-2023/budget.png" alt="Budget" /></p>

<h3 id="expenses">Expenses</h3>

<p><a href="https://opencollective.com/phpfoundation/expenses">https://opencollective.com/phpfoundation/expenses</a></p>

<p><img src="/assets/post-images/2024/report-2023/expenses.png" alt="Expenses" /></p>

<h2 id="goals-for-2024">Goals for 2024</h2>

<p>Our foremost mission remains the same: <strong>maintain and develop the PHP language</strong>. We’d like PHP to be the best platform for users and for businesses creating web applications and APIs.</p>

<p>The main challenge for continuing the work of The PHP Foundation is to ensure sustainable sponsorship.</p>

<p>From a technical standpoint, the goal is to ensure that foundation developers work on valuable tasks.</p>

<h3 id="organization-goals">Organization goals</h3>

<ul>
<li>Onboard new major sponsors.</li>
<li>Explore strategic partnerships and marketing opportunities.</li>
<li>Further develop the Advisory Board initiative.</li>
<li>Grow the foundation's community.</li>
</ul>

<h3 id="technical-goals">Technical goals</h3>

<ul>
<li>Ongoing maintenance and development of the PHP core.</li>
<li>Deliver the STF projects.</li>
<li>Improve the quality of the ideas and RFCs coming from the foundation.</li>
<li>Conduct research and surveys to define priorities.</li>
<li>Develop a high-level roadmap for PHP changes sponsored by the foundation.</li>
</ul>

<h2 id="budget-plan-for-2024">Budget plan for 2024</h2>

<p>In 2024, two of our part-time developers extended commitment to go full-time, and we contracted 4 new developers.</p>

<p>We have also adjusted the compensation rates for developers to better reflect the market, as the rates had not changed since 2021. As a result, our budget significantly increased.</p>

<p>With this plan, we estimate our annual spending cap at approximately <strong>$840,000</strong> for developer compensation.</p>

<p>Additionally, we anticipate receiving <strong>€205,000</strong> from the STF investment. These funds will be allocated to developer reimbursements and our partnership with OSTIF.org for an external security audit.</p>

<p>Our collaboration with the OpenCollective platform has been positive, and we plan to continue operating under the umbrella of the Open Source Collective in 2024. This means that sponsorships we receive are reduced by 10% for Open Source Collective fees and 1–5% for payment processing fees.</p>

<h2 id="outro">Outro</h2>

<p>The PHP language is a living entity and, as such, requires continuous support to address developer issues, resolve security vulnerabilities, and has to evolve to meet the needs of the future.</p>

<p>Based on the strong second year of the foundation, we are excited to continue and multiply the efforts in the next years.</p>

<p>With your help, we continue the mission to support, advance, and develop the PHP language.</p>

<section class="text-center mt-6">
    <div class="mb-14">
        <a href="/join" target="_blank" class="inline-block text-xl py-2 no-underline px-6 !text-white bg-[#7f52ff] rounded-3xl hover:bg-[rgba(127,82,255,.8)]">
            Join The PHP Foundation
        </a>
    </div>
</section>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[The PHP Foundation
Team Update 2024]]></title>
            <link href="https://thephp.foundation/blog/2024/01/03/the-php-foundation-team-update-2024/"/>
            <updated>2024-01-03T00:00:00+00:00</updated>
            <id>https://thephp.foundation/blog/2024/01/03/the-php-foundation-team-update-2024/</id>
            <content type="html"><![CDATA[<p>Now in our third year, we're gearing up to grow our impact. This year, four more developers are joining the PHP Foundation to further advance PHP.</p>

<p>Since April 2022, the PHP Foundation has contracted six outstanding developers:</p>

<ul>
<li>Arnaud Le Blanc <a href="https://github.com/arnaud-lb">@arnaud-lb</a></li>
<li>Derick Rethans <a href="https://github.com/derickr">@derickr</a></li>
<li>Gina Peter Banyard <a href="https://github.com/Girgias">@Girgias</a></li>
<li>Ilija Tovilo <a href="https://github.com/iluuu1994">@iluuu1994</a></li>
<li>Jakub Zelenka <a href="https://github.com/bukka">@bukka</a></li>
<li>Máté Kocsis <a href="https://github.com/kocsismate">@kocsismate</a></li>
</ul>

<p>All of them started as part-time contributors, and since then have significantly grown their capacity and dedication to PHP core tasks. We consider it a big achievement that the team continues to collaborate effectively, accumulating more experience and knowledge, and expanding their PHP Core involvement.</p>

<h2 id="team-update-2024">Team Update 2024</h2>

<p>We are happy to announce a team expansion. Four talented developers are joining as part-time team members of the foundation.</p>

<ul>
<li>David Carlier <a href="https://github.com/devnexen">@devnexen</a></li>
<li>James Titcumb <a href="https://github.com/asgrim">@asgrim</a></li>
<li>Saki Takamachi <a href="https://github.com/SakiTakamachi">@SakiTakamachi</a></li>
<li>Shivam Mathur <a href="https://github.com/shivammathur">@shivammathur</a></li>
</ul>

<p>Please give them a warm welcome! We are looking forward to the great things we will accomplish together.</p>

<p>Happy New Year! 🎉🐘💜</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP Foundation Update, November 2023]]></title>
            <link href="https://thephp.foundation/blog/2023/11/27/php-foundation-update-november-2023/"/>
            <updated>2023-11-27T00:00:00+00:00</updated>
            <id>https://thephp.foundation/blog/2023/11/27/php-foundation-update-november-2023/</id>
            <content type="html"><![CDATA[<p><code>&lt;?php echo 'Hello world!';</code></p>

<p>This post provides insights into The PHP Foundation's recent activities.</p>

<blockquote>
  <p>My name is Roman Pronskiy. I’m employed by <a href="https://jetbrains.com/">JetBrains</a> to manage operations at the PHP Foundation. Reach out to me at pronskiy@thephp.foundation.</p>
  
  <p>You can find the full foundation structure <a href="https://thephp.foundation/structure/">here</a>, including all board members, developers, and the community.</p>
</blockquote>

<h2 id="team-growth">Team Growth</h2>

<p>In September, we initiated an open call for new developers to join the PHP Foundation by launching an <a href="https://thephp.foundation/blog/2023/09/06/application-form-2023/">application form</a>.</p>

<p>We received a total of 207 applications. From this pool, we selected a shortlist of 12 qualified candidates. Following a comprehensive review and input from existing foundation members, we further refined our selection to 4 outstanding individuals. We will soon announce the new members.</p>

<p>The primary focus for the new developers will be on the maintenance and modernization of PHP’s infrastructure — a critical step towards ensuring PHP being a robust and forward-looking language.</p>

<p>The public work undertaken by our developers can be followed in our monthly <a href="https://thephp.foundation/blog/tag/roundup/">"PHP Core Roundup"</a> series, which highlights the ongoing progress and developments within PHP core.</p>

<h2 id="advisory-board">Advisory Board</h2>

<p>For our major sponsors, we offer exclusive insights through occasional digests that provide a deeper dive into discussions, debates, and early-stage developments. This not only keeps our sponsors abreast of the latest happenings but also allows them to see the direct impact of their support. This is one of the benefits of being an Advisory Board member.</p>

<p>We announced the advisory board initiative <a href="https://thephp.foundation/blog/2023/03/31/php-foundation-update-march-2023/#a-new-benefit-for-major-sponsors-%E2%80%93-advisory-board-membership">in March</a>. Since then, 9 companies have joined the initiative with their representatives.</p>

<p>In addition to the <a href="https://thephp.foundation/structure/">Governing Board</a> that includes Automattic, JetBrains, Private Packagist, Symfony, Tideways, Zend by Perforce, and PHP fellows, we now welcome the Advisory Board members: Moodle, Shopware, Laravel, Ardennes-étape, Les-Tilleuls.coop / API Platform, Aternos GmbH, PrestaShop, CraftCMS.</p>

<p>There were several useful discussions within the group. Specifically, we’d like to highlight the one around <a href="https://wiki.php.net/rfc/property-hooks">Property Hooks RFC</a>. The Advisory Board feedback helped to shape the proposal design significantly.</p>

<p>By the way, you can already try property hooks on <a href="https://3v4l.org/">3v4l.org</a>, thanks to <a href="https://github.com/sponsors/SjonHortensius">Sjon Hortensius</a>.
<a href="https://3v4l.org/Y4KZn/rfc#vrfc.property-hooks"><img src="/assets/post-images/2023/3v4l-property-hooks.png"></a></p>

<h2 id="sovereign-tech-fund-invests-in-php">Sovereign Tech Fund invests in PHP</h2>

<p>The <a href="https://sovereigntechfund.de/en/">Sovereign Tech Fund</a> is an organization that supports the development, improvement, and maintenance of open digital infrastructure in the public interest. Its goal to strengthen the open-source ecosystem sustainably, focusing on security, resilience, technological diversity, and the people behind the code. STF is funded by the German Federal Ministry for Economic Affairs and Climate Action (BMWK) and supported by the German Federal Agency for Disruptive Innovation GmbH (SPRIND).</p>

<p>We have collaborated with STF to create work plans for these specific projects: PECL overhaul, Testing tool for FPM, Security Audit, and Documentation improvements.</p>

<p>We’ll share more details on each project early next year, and for now we are thrilled and grateful to the Sovereign Tech Fund for trusting us.</p>

<h2 id="security-audit-of-php-is-coming">Security audit of PHP is coming</h2>

<p>As mentioned above, STF is investing in PHP, and we are going to commission an audit of PHP's C code base. We expect security issues to be found. To mitigate possible bad perception, we aim to publish and fix the revealed security issues at the same time.</p>

<p>For this security audit, we are partnering with <a href="https://ostif.org/">The Open Source Technology Improvement Fund, Inc</a> (OSTIF), a corporate non-profit dedicated to securing critical open-source projects. They have a proven track record of audits for <a href="https://github.com/ostif-org/OSTIF/blob/main/Completed-Engagements.md">popular open-source projects</a> such as cURL, Git, Linux Kernel, OpenSSL, Node.js, and others.</p>

<h2 id="reports-schedule">Reports schedule</h2>

<p>Although we promised to prepare quarterly reports, that unfortunately did not happen to be feasible. So for 2023, we fall back to one yearly report. The 2023 transparency report will be published in December.</p>

<h2 id="meet-us-at-the-conferences">Meet us at the conferences</h2>

<p>You can meet our team at the following conferences in late 2023:</p>

<p><strong><a href="https://php.bettercode.eu/">betterCode(PHP)</a> – Nov 27</strong></p>

<p>Jakub Zalenka will give a talk: "PHP 8.3: Changes and future plans". <br> 
Besides Jakub, there will be talks from Niels Dossche and Sebastian Bergmann.</p>

<p><strong><a href="https://live.symfony.com/2023-brussels-con/">SymfonyCon Brussels</a> – Dec 7–8</strong></p>

<p>You’ll be able to meet and talk to our board members: Nils Adermann, Sebastian Bergmann, Nicolas Grekas, and Roman Pronskiy.</p>

<h2 id="thank-you-to-our-sponsors">Thank you to our sponsors</h2>

<p>Check out the <a href="https://thephp.foundation/#sponsors">Sponsors section</a> on our <a href="https://thephp.foundation/">website</a>. It shows all major contributors sorted by donation amount.</p>

<p>Big thanks to the <strong><a href="https://sentry.io/">Sentry</a></strong> team for sponsoring the PHP foundation!</p>

<p>Sentry is a popular application performance monitoring &amp; error tracking tool, and they <a href="https://blog.sentry.io/we-just-gave-500-000-dollars-to-open-source-maintainers/?utm_source=linkedin&amp;utm_content=blog-fundfest23-learnmore">just gave $500,000 to multiple open source maintainers</a>.</p>

<p><strong>Shout-out to non-financial sponsors</strong></p>

<p><a href="https://www.digitalocean.com/">Digital Ocean</a> has been supporting the PHP project for ages – <a href="https://www.php.net/">php.net</a> servers run on DigitalOcean boxes. We would like to express our gratitude to DigitalOcean for their ongoing support.</p>

<p>Big thanks to <a href="https://thephp.foundation/#sponsors">everyone</a> for your continued support – the PHP Foundation is all of us!</p>

<hr />

<p>That’s all for today. Follow us on Twitter <a href="https://twitter.com/thephpf">@ThePHPF</a> or Mastodon <a href="https://phpc.social/@thephpf">phpc.social/@thephpf</a> to get the latest updates from the PHP Foundation.
💜🐘</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP 8.3 Released!]]></title>
            <link href="https://thephp.foundation/blog/2023/11/23/php-83/"/>
            <updated>2023-11-23T00:00:00+00:00</updated>
            <id>https://thephp.foundation/blog/2023/11/23/php-83/</id>
            <content type="html"><![CDATA[<p><br /></p>

<object data="/assets/post-images/2023/php83/php83-fireworks.svg" type="image/svg+xml">
  <img src="/assets/post-images/2023/php83/php83-fireworks.svg" />
</object>

<p><br /></p>

<p><a href="https://www.php.net/releases/8.3">PHP 8.3</a> is here! Bringing a handful of new features, performance and functionality improvements, and a healthy amount of deprecations, PHP 8.3 was released today.</p>

<p>PHP 8.3 will continue to receive active support for two years, followed by one year of security updates. Similar to the PHP 8.2 upgrade, the PHP 8.3 upgrade will be smooth as backward compatiblity is maintained. While some functionality is deprecated, there are no syntax, API*, and remove functionality in this release.</p>

<h2 id="what%27s-in-php-8.3">What's in PHP 8.3</h2>

<p>Some of the major new features in PHP 8.3 include support for declaring a type for class constants, improvements to support deep-cloning of <code>readonly</code> properties, improvements to the new Random extension introduced in PHP 8.2, new <a href="https://www.php.net/manual/en/function.json-validate.php"><code>json_validate()</code></a>,<a href="https://www.php.net/manual/en/function.str-increment.php"><code>str_increment()</code></a>, and <a href="https://www.php.net/manual/en/function.str-decrement.php"><code>str_decrement()</code></a>, functions, and a noticeable amount of improvements in DateTime, DOM, and Intl extensions.</p>

<p>See the <a href="https://www.php.net/releases/8.3">PHP 8.3 release page</a> for what's new and changed in PHP 8.3.</p>

<blockquote>
  <p>(*) Note that some of the PHP core extensions now declare types for built-in class constants. This is technically a BC break in case child classes declare the same constants without type declaration, which is only supported in PHP 8.3.</p>
</blockquote>

<h2 id="upgrade-to-php-8.3">Upgrade to PHP 8.3</h2>

<p>PHP packages on software repositories such as Debian and Ubuntu repos maintained by <a href="https://launchpad.net/~ondrej">Ondřej Surý</a>, <a href="https://github.com/remicollet">Remi Collet</a> for Fedora/RHEL/EL already contain PHP 8.3 builds ready to install.</p>

<p>Windows builds for PHP 8.3 are available on <a href="https://windows.php.net/download/">windows.php.net</a></p>

<p><a href="https://hub.docker.com/_/php">Docker images</a> with PHP 8.3 will also be available on Docker hub in the coming days.</p>

<h2 id="php-8.3-release-in-numbers">PHP 8.3 Release in Numbers</h2>

<p>The PHP 8.3 release contains <strong>over 1200 code commits</strong> from <strong>114 awesome contributors</strong> to the <code>php-src</code> repository, and several more contributions to the documentation and its translations.</p>

<p>Contributions from the <strong>PHP Foundation members</strong> consist of over <strong>280 commits</strong>.</p>

<p>During the period from the PHP 8.2 release date and today, the <strong>PHP Internals mailing list has received over 2800 emails</strong>.</p>

<p>PHP RFCs, where major changes to PHP are proposed, discussed, and voted on, PHP 8.3 received <strong>23 RFCs that went to a vote</strong>, and <strong>18 RFCs passed</strong>. This includes a number includes "catch-all" RFCs such as Deprecations for PHP 8.3, where multiple changes were voted at the same time. Out of the 23 RFCs with votes, <strong>13 RFCs</strong> were either proposed or implemented by the <strong>PHP Foundation</strong> members.</p>

<p>The PHP documentation and php.net web site contributors have also made several impactful contributions to document the new features in PHP 8.3, prepare release pages, and more.</p>

<h2 id="%F0%9F%92%9C-thank-you-%F0%9F%92%9C">💜 Thank you 💜</h2>

<p>On behalf of the PHP Foundation, we take this post to thank everyone from this milestone in PHP. Your contributions to the PHP Foundation, code and documentation contributions, and several other ways of involvement and contributions help shape PHP to continue to be an exciting, feature-rich, and versatile programming language.</p>

<p>Thank you 💜</p>

<h2 id="php-8.4-outlook">PHP 8.4 Outlook</h2>

<p>PHP 8.4, scheduled for the end of 2024 is already taking shape. Even at the moment PHP 8.3 is released, there are three active RFC votes, and some major changes such as JIT-IR, a brand-new HTML 5 parser in the DOM extension based on <a href="https://github.com/lexbor/lexbor">Lexbor</a>, and Bcrypt default cost increasing already been implemented for PHP 8.4</p>

<p>We look forward to bringing you updates on our <a href="https://thephp.foundation/blog/tag/roundup/">PHP Core Roundup series</a> and our newsletter:</p>

<p><div class="px-4 pt-3 border-b border-t -mx-4 border-gray-200">
    <div class="bg-white py-8">
        <div class="mx-auto grid max-w-7xl grid-cols-1 gap-10 lg:grid-cols-12 lg:gap-8">
            <div class="max-w-xl text-4xl font-medium tracking-tight text-gray-900 lg:col-span-6">
                Subscribe to PHP Core Roundup newsletter
            </div>
            <form method="POST"
                  action="https://php-foundation.mailcoach.app/subscribe/9be4e2bd-f9d8-475c-b00e-2dcc4cf90056"
                  class="w-full max-w-md lg:col-span-6">
                <div class="flex gap-x-4">
                    <label for="email-address" class="sr-only">Email address</label>
                    <input id="email-address" name="email" type="email" autocomplete="email" required
                           class="min-w-0 flex-auto rounded-md border-0 px-3.5 py-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                           placeholder="Enter your email">
                    <button type="submit"
                            class="inline-block py-2 no-underline px-6 !text-white bg-[#7f52ff] rounded-3xl hover:bg-[rgba(127,82,255,.8)]">
                        Subscribe
                    </button>
                </div>
                <div class="mt-4 text-sm leading-6 text-gray-900">
                    We care about your data.
                    Read our <a href="https://thephp.foundation/privacy-policy"
                                class="font-semibold text-indigo-600 hover:text-indigo-500 no-underline">privacy policy</a>.
                </div>
            </form>
        </div>
    </div>
</div>
</p>

<hr />

<p>💜️ 🐘</p>

<blockquote>
  <p>PHP Roundup is prepared by Ayesh Karunaratne from <strong><a href="https://php.watch">PHP.Watch</a></strong>, a source for PHP News, Articles, Upcoming Changes, and more.</p>
</blockquote>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP Core Roundup #18]]></title>
            <link href="https://thephp.foundation/blog/2023/11/01/php-core-roundup-18/"/>
            <updated>2023-11-01T00:00:00+00:00</updated>
            <id>https://thephp.foundation/blog/2023/11/01/php-core-roundup-18/</id>
            <content type="html"><![CDATA[<p>Welcome back to <a href="/blog/tag/roundup/">PHP Core Roundup</a> series! This is where we highlight and celebrate the improvements made to PHP during the month past by the PHP development team and members of the PHP Foundation.</p>

<blockquote>
  <p>The PHP Foundation is a collective of PHP contributors, veterans, and companies that collaborate to ensure the long-term sustainability of the PHP programming language. The foundation currently supports six contributors focused on PHP's maintenance, debt reduction, and feature development. These contributors work closely with others on coding, documentation, and discussions.</p>
  
  <p>Started over a year ago, the PHP Core Roundup series offers a summary of the latest developments, discussions, and news about PHP Core, contributed by both PHP Foundation members and other participants. This post is the thirteenth in the PHP Core Roundup series.</p>
</blockquote>

<p><div class="px-4 pt-3 border-b border-t -mx-4 border-gray-200">
    <div class="bg-white py-8">
        <div class="mx-auto grid max-w-7xl grid-cols-1 gap-10 lg:grid-cols-12 lg:gap-8">
            <div class="max-w-xl text-4xl font-medium tracking-tight text-gray-900 lg:col-span-6">
                Subscribe to PHP Core Roundup newsletter
            </div>
            <form method="POST"
                  action="https://php-foundation.mailcoach.app/subscribe/9be4e2bd-f9d8-475c-b00e-2dcc4cf90056"
                  class="w-full max-w-md lg:col-span-6">
                <div class="flex gap-x-4">
                    <label for="email-address" class="sr-only">Email address</label>
                    <input id="email-address" name="email" type="email" autocomplete="email" required
                           class="min-w-0 flex-auto rounded-md border-0 px-3.5 py-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                           placeholder="Enter your email">
                    <button type="submit"
                            class="inline-block py-2 no-underline px-6 !text-white bg-[#7f52ff] rounded-3xl hover:bg-[rgba(127,82,255,.8)]">
                        Subscribe
                    </button>
                </div>
                <div class="mt-4 text-sm leading-6 text-gray-900">
                    We care about your data.
                    Read our <a href="https://thephp.foundation/privacy-policy"
                                class="font-semibold text-indigo-600 hover:text-indigo-500 no-underline">privacy policy</a>.
                </div>
            </form>
        </div>
    </div>
</div>
</p>

<h2 id="releases">Releases</h2>

<p>The PHP development team released two new versions in October 2023:</p>

<p><strong><a href="https://www.php.net/ChangeLog-8.php#8.2.12">PHP 8.2.12</a></strong> and <strong><a href="https://www.php.net/ChangeLog-8.php#8.1.25">PHP 8.1.25</a></strong></p>

<p>These releases include several bug fixes and improvements, notably in areas such as Core, CLI, CType, DOM, Fileinfo, Filter, Hash, Intl, MySQLnd, Opcache, PCRE, SimpleXML, Streams, XML, and XSL.</p>

<h2 id="recent-rfcs-and-mailing-list-discussions">Recent RFCs and Mailing List Discussions</h2>

<blockquote>
  <p>Changes and improvements to PHP are discussed, reported, and voted on by the PHP Foundation Team, the PHP development team, and contributors. Bug reports are made to the PHP <a href="https://github.com/php/php-src/issues">issue tracker</a>, changes are discussed in <a href="https://www.php.net/mailing-lists.php">mailing lists</a>, minor code changes are proposed as <a href="https://github.com/php/php-src/issues">pull requests</a>, and major changes are discussed in detail and voted on as <a href="https://wiki.php.net/rfc">PHP RFCs</a>. <a href="https://github.com/php/doc-en/">Documentation</a> and the <a href="https://github.com/php/web-php">php.net website</a> changes are also discussed and improved at their relevant Git repositories on GitHub.</p>
</blockquote>

<p><br>
Hundreds of awesome PHP contributors put their efforts into improvements to the PHP code base, documentation, and the php.net website. Here is a summary of some changes made by the people behind PHP. Things marked with 💜 are done by the PHP Foundation team.</p>

<h2 id="php-8.3-ga-to-be-released-this-month%21">PHP 8.3 GA to be released this month!</h2>

<p>PHP 8.3.0 GA is scheduled to be released on November 23rd. PHP 8.3.0 RC5 is already released, and RC6 (the last one) is scheduled for November, 9.</p>

<p>PHP 8.3.0 RC versions are available in <a href="https://rpms.remirepo.net/">Remi’s</a> repos for Fedora/RHEL, <a href="https://deb.sury.org/#php-packages">Ondrej's</a> repos for Debian/Ubuntu LTS, <a href="https://hub.docker.com/_/php/tags?page=1&amp;name=8.3">Docker images</a> on Docker Hub, and compiled Windows binaries on <a href="https://windows.php.net/">windows.php.net</a>.</p>

<h2 id="php-8.0-will-reach-eol">PHP 8.0 will reach EOL</h2>

<p>PHP 8.0 will reach its End of Life (EOL) and will no longer receive security updates after November 26, 2023. You can always check the release and support schedule at <a href="https://www.php.net/supported-versions.php">php.net/supported-versions.php</a>:</p>

<p><img src="/assets/post-images/2023/roundup-18/supported_versions_php.png" alt="" /></p>

<h2 id="rfc-updates">RFC Updates</h2>

<p>Following are the RFCs and major pull-requests discussed, voted, and implemented since our last update.</p>

<h3 id="in-voting%3A-straw-poll---how-to-name-the-process-resource-after-it-is-converted-to-an-object-by-m%C3%A1t%C3%A9-kocsis-%F0%9F%92%9C">In Voting: Straw poll - How to name the Process resource after it is converted to an object by Máté Kocsis 💜</h3>

<p>As part of PHP's efforts in gradually phrasing out <code>resource</code> objects (<a href="https://github.com/php/php-tasks/issues/6">php-tasks#6</a>, <a href="https://php.watch/articles/resource-object">article on PHP.Watch</a>), this RFC polls the proposed names for the resource object class name that replaces <code>Process</code> resources. This ranked-choice poll (following <a href="https://en.wikipedia.org/wiki/Single_transferable_vote#Example">STV</a>) intends to pick a name from <code>\Process</code>, <code>\ProcessHandle</code>, and <code>\OS\Process</code>.</p>

<h3 id="implemented%3A-increasing-the-default-bcrypt-cost-by-tim-d%C3%BCsterhus">Implemented: <a href="https://wiki.php.net/rfc/bcrypt_cost_2023">Increasing the default BCrypt cost</a> by Tim Düsterhus</h3>

<p>RFC was approved unanimously, but in the second vote, where a new cost value had to be determined, opinions were divided.</p>

<p>The cost will be increased to 12 in PHP 8.4.</p>

<h3 id="implemented%3A-xml_option_parse_huge-by-niels-dossche">Implemented: <a href="https://wiki.php.net/rfc/xml_option_parse_huge">XML_OPTION_PARSE_HUGE</a> by Niels Dossche</h3>

<p>A new option will be added to the event-driven (SAX) <code>XmlParser</code> that would allow it to parse large documents.</p>

<h3 id="accepted%3A-dom-html5-parsing-and-serialization-by-niels-dossche">Accepted: <a href="https://wiki.php.net/rfc/domdocument_html5_parser">DOM HTML5 parsing and serialization</a> by Niels Dossche</h3>

<p>PHP 8.4 will get new classes: <code>DOM\HTMLDocument</code> and <code>DOM\XMLDocument</code> to the <code>dom</code> extension. Existing <code>dom</code> classes in the global namespace get an alias in the new <code>DOM</code> namespace.</p>

<p>The <code>HTMLDocument</code> class will add support for HTML5 document parsing and serializing. The <code>XMLDocument</code> class serves as a modern alternative to <code>\DOMDocument</code>, which is retained for compatibility. These new classes also provide a more misuse-resistant API for loading documents.</p>

<h3 id="accepted%3A-a-new-jit-implementation-based-on-ir-framework-by-dmitry-stogov">Accepted: <a href="https://wiki.php.net/rfc/jit-ir">A new JIT implementation based on IR Framework</a> by Dmitry Stogov</h3>

<p>RFC proposed a new JIT implementation based on a separately developed <a href="https://github.com/dstogov/ir">IR Framework</a>. The main advantage of the new approach is that PHP source code will be freed from the low-level details of JIT compilation. The downside is a longer JIT-compilation time.</p>

<p>The proposal was accepted, so Dmitry Stogov <a href="https://github.com/php/php-src/pull/12079">merged</a> the new JIT into the <code>master</code> which means it will be available in PHP 8.4.</p>

<h3 id="under-discussion%3A-rfc1867-for-non-post-http-verbs-by-ilija-tovilo-%F0%9F%92%9C">Under discussion: <a href="https://wiki.php.net/rfc/rfc1867-non-post">RFC1867 for non-POST HTTP verbs</a> by Ilija Tovilo 💜</h3>

<p>Now PHP supports the parsing of <code>multipart/form-data</code> content type natively, but only for POST requests. If POST request has the <code>multipart/form-data</code> content type, the request body is immediately consumed before starting the PHP script and populated into the <code>$_POST</code> and <code>$_FILES</code> superglobals.</p>

<p>RFC proposes to add a new function <code>request_parse_body()</code> to expose the existing functionality to userland so that it may be used for other HTTP verbs.</p>

<h3 id="under-discussion%3A-rounding-integers-as-int-by-marc-bennewitz">Under discussion: <a href="https://wiki.php.net/rfc/integer-rounding">Rounding Integers as int</a> by Marc Bennewitz</h3>

<p>Currently <code>round()</code>, <code>ceil()</code> and <code>floor()</code> functions return float numbers, but when using integers above <code>2^53</code> you get unexpected results due to loss of precision.</p>

<p>RFC proposes to perform rounding for a given integer and returning the resulting integer if possible.</p>

<h3 id="under-discussion%3A-unbundle-ext%2Fimap%2C-ext%2Fpspell%2C-ext%2Foci8%2C-and-ext%2Fpdo_oci-by-derick-rethans-%F0%9F%92%9C">Under discussion: <a href="https://wiki.php.net/rfc/unbundle_imap_pspell_oci8">Unbundle ext/imap, ext/pspell, ext/oci8, and ext/PDO_OCI</a> by Derick Rethans 💜</h3>

<p>RFC proposes to unbundle these extensions: remove them from the PHP source distribution, and move them to PECL.</p>

<h3 id="under-discussion%3A-multibyte-for-trim-function-mb_trim%2C-mb_ltrim-and-mb_rtrim-by-yuya-hamada">Under discussion: <a href="https://wiki.php.net/rfc/mb_trim">Multibyte for trim function mb_trim, mb_ltrim and mb_rtrim</a> by Yuya Hamada</h3>

<p>RFC proposes to add multibyte support for trim functions.</p>

<h3 id="under-discussion%3A-change-the-edge-case-of-round-by-saki-takamachi">Under discussion: <a href="https://wiki.php.net/rfc/change_the_edge_case_of_round">Change the edge case of round()</a> by Saki Takamachi</h3>

<p>RFC proposes to change the <code>round()</code> behavior, and stop expecting decimal behavior to float point and start expecting floating point to behave as floating point.</p>

<p><br></p>

<h2 id="documentation">Documentation</h2>

<p>While PHP 8.3 is just around the corner, the documentation available on <a href="https://php.net">php.net</a>, requires updating.</p>

<p>Gina P. Banyard 💜 is tracking the progress for PHP 8.3 related changes in <a href="https://github.com/php/doc-en/issues/2796">php/doc-en#2796</a>, and also triaged issues in the docs and marked several of them as "<a href="https://github.com/php/doc-en/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22">good first time</a>", which are ideal easy picks if you would like to start contributing to PHP docs. You can find the full list on <a href="https://github.com/php/doc-en/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22">GitHub</a>.</p>

<p><br></p>

<h2 id="merged-prs-and-commits">Merged PRs and Commits</h2>

<p>Following are some changes that did not go through an RFC process because they are either planned, bug fixes, or progressive enhancements.</p>

<hr />

<h3 id="full-list-of-commits--since-php-core-roundup-%2317">Full list of commits  since <a href="/blog/2023/10/01/php-core-roundup-17/">PHP Core Roundup #17</a></h3>

<p>Commits are in the order they were added, grouped by author in alphabetical order.</p>

<details>

<summary>Click here to expand</summary>

<h3 id="alex-dowad">Alex Dowad</h3>

<ul>
<li>Add fast <code>mb_strcut</code> implementation for UTF-16 in <a href="https://github.com/php/php-src/commit/d04854b38c">d04854b38c</a></li>
<li>Fix infinite loop when <code>mb_detect_encoding</code> is used on UTF-8 BOM in <a href="https://github.com/php/php-src/commit/81e236cde5">81e236cde5</a></li>
<li><code>PHP_HAVE_BUILTIN_USUB_OVERFLOW</code> macro is defined even if __builtin_usub_overflow not available in <a href="https://github.com/php/php-src/commit/0c22276888">0c22276888</a></li>
<li>Add fast <code>mb_strcut</code> implementation for UTF-8 in <a href="https://github.com/php/php-src/commit/1f0cf133db">1f0cf133db</a></li>
<li>Add test cases for <code>mb_strcut</code> in <a href="https://github.com/php/php-src/commit/3fa836f711">3fa836f711</a></li>
<li>Add tests to document behavior of UTF7-IMAP conversion in obscure corner case in <a href="https://github.com/php/php-src/commit/9aa4b2bbad">9aa4b2bbad</a></li>
<li>Add assertion to mb_utf7imap_to_wchar to catch buffer overrun in <a href="https://github.com/php/php-src/commit/a57fdea149">a57fdea149</a></li>
</ul>

<h3 id="anatol-belski">Anatol Belski</h3>

<ul>
<li>NEWS: Add note about <a href="https://github.com/php/php-src/issues/11891">GH-11891</a> in <a href="https://github.com/php/php-src/commit/31a44c8ca7">31a44c8ca7</a></li>
<li>NEWS: Added note about <a href="https://github.com/php/php-src/issues/11891">GH-11891</a> in <a href="https://github.com/php/php-src/commit/1934da0a81">1934da0a81</a></li>
<li>NEWS: Added note about <a href="https://github.com/php/php-src/issues/11891">GH-11891</a> in <a href="https://github.com/php/php-src/commit/a1225f35bb">a1225f35bb</a></li>
<li>fileinfo: Backport svg detection patch in <a href="https://github.com/php/php-src/commit/bd24c56207">bd24c56207</a></li>
</ul>

<h3 id="ayesh-karunaratne">Ayesh Karunaratne</h3>

<ul>
<li>Minor fix in <code>NEWS</code> alignment in <a href="https://github.com/php/php-src/commit/f8433a5100">f8433a5100</a></li>
</ul>

<h3 id="ben-ramsey">Ben Ramsey</h3>

<ul>
<li>Add instructions for updating security.txt in web-php in <a href="https://github.com/php/php-src/pull/12316">GH-12316</a></li>
</ul>

<h3 id="coppolafab">coppolafab</h3>

<ul>
<li><code>php_cli_server</code>: ensure single date header is present in <a href="https://github.com/php/php-src/commit/f6ac08c6a3">f6ac08c6a3</a></li>
</ul>

<h3 id="cristian-rodr%C3%ADguez">Cristian Rodríguez</h3>

<ul>
<li>opcache: Use O_TMPFILE file lock if available in <a href="https://github.com/php/php-src/pull/8634">GH-8634</a></li>
</ul>

<h3 id="daniil-gentili">Daniil Gentili</h3>

<ul>
<li>Fix <a href="https://github.com/php/php-src/issues/11121">GH-11121</a>: ReflectionFiber segfault in <a href="https://github.com/php/php-src/commit/71f14510f6">71f14510f6</a></li>
<li>Report warning if JIT cannot be enabled in <a href="https://github.com/php/php-src/commit/7177461141">7177461141</a></li>
<li>Trigger JIT tracing&amp;compilation more often in <a href="https://github.com/php/php-src/commit/098d9ca720">098d9ca720</a></li>
</ul>

<h3 id="david-carlier">David CARLIER</h3>

<ul>
<li>cleanup inet_ntoa usage in <a href="https://github.com/php/php-src/commit/1c8943bc78">1c8943bc78</a></li>
<li><code>ext/pdo_pgsql</code>: cleanup the 3rd protocol is supported since circa 2010. in <a href="https://github.com/php/php-src/pull/12464">GH-12464</a></li>
<li><code>ext/pgsql</code>: cleanup the 3rd protocol is supported since circa 2010. in <a href="https://github.com/php/php-src/pull/12465">GH-12465</a></li>
<li>CODEOWNERS: adding myself for the pdo_pgsql extension in <a href="https://github.com/php/php-src/pull/12456">GH-12456</a></li>
<li>Fix 12424 PDO_PGSQL unit test unexistent variables in <a href="https://github.com/php/php-src/pull/12446">GH-12446</a></li>
<li>opcache posix creating special shared segments for FreeBSD 13 and above in <a href="https://github.com/php/php-src/commit/2e0ca4718b">2e0ca4718b</a></li>
<li>zend call stack for DragonFlyBSD. in <a href="https://github.com/php/php-src/pull/12325">GH-12325</a></li>
</ul>

<h3 id="dmitry-stogov">Dmitry Stogov</h3>

<ul>
<li>Backport fix for incorrect assumption about in-memory zval type in <a href="https://github.com/php/php-src/commit/455a967934">455a967934</a></li>
<li>Backport implementation of iterative Pearce&#039;s SCC finding algoritm in <a href="https://github.com/php/php-src/pull/12528">GH-12528</a></li>
<li>Add reference to IR framework in <a href="https://github.com/php/php-src/commit/c282e2080f">c282e2080f</a></li>
<li>Fixed codegeneration for NOT in <a href="https://github.com/php/php-src/commit/ed37ab9d14">ed37ab9d14</a></li>
<li>Fixed <a href="https://github.com/php/php-src/issues/12511">GH-12511</a>: Use must be in next opline assertion with patched infection in <a href="https://github.com/php/php-src/commit/b3b46a44c5">b3b46a44c5</a></li>
<li>Fix memory leak after GC inside a foreach loop in <a href="https://github.com/php/php-src/pull/12572">GH-12572</a></li>
<li>Fixed <a href="https://github.com/php/php-src/issues/12560">GH-12560</a>: Assertion `0 &amp;&amp; &quot;too long jmp distance&quot;&#039; failed with new JIT on AArch64 in <a href="https://github.com/php/php-src/commit/93c57af778">93c57af778</a></li>
<li>Fixed codegeneration for PRE_DEC in <a href="https://github.com/php/php-src/commit/411b6fb4e6">411b6fb4e6</a></li>
<li>Fixed incorrect assumption about in-memory zval type in <a href="https://github.com/php/php-src/commit/52480b3a79">52480b3a79</a></li>
<li>Fixed codegeneration for MATCH in <a href="https://github.com/php/php-src/commit/bd183a4069">bd183a4069</a></li>
<li>Fixed codegeneration for FETCH_DIM_IS in <a href="https://github.com/php/php-src/commit/e482785886">e482785886</a></li>
<li>Fixed codegenertion for FETCH_DIM_W in <a href="https://github.com/php/php-src/commit/c8cb68ad0a">c8cb68ad0a</a></li>
<li>Fixed incorrect trace type inference in <a href="https://github.com/php/php-src/commit/c19347a0d3">c19347a0d3</a></li>
<li>Implement iterative Pearce&#039;s SCC finding algoritm in <a href="https://github.com/php/php-src/pull/12528">GH-12528</a></li>
<li>Fixed <a href="https://github.com/php/php-src/issues/12509">GH-12509</a>: JIT assertion when running php-parser tests in <a href="https://github.com/php/php-src/commit/5f46d86955">5f46d86955</a></li>
<li>Fixed codegeneration for IDENTICAL in <a href="https://github.com/php/php-src/commit/e95faaeebd">e95faaeebd</a></li>
<li>Fixed code generation for DETCH_DIM_R in <a href="https://github.com/php/php-src/commit/ce269178a9">ce269178a9</a></li>
<li>Fixed regression introduced by <a href="https://github.com/php/php-src/commit/4ae483af36a86aeccbdae29af31213ba13cddb12">4ae483af</a> in <a href="https://github.com/php/php-src/commit/8eda3151eb">8eda3151eb</a></li>
<li>Fixed regression intoduced by <a href="https://github.com/php/php-src/commit/76c41d27f9277eb8210d0058f19d0a7cfa7d7a66">76c41d27</a> in <a href="https://github.com/php/php-src/commit/fbf4e196da">fbf4e196da</a></li>
<li>Fixed codegeneration for INC_OBJ in <a href="https://github.com/php/php-src/commit/a96ea5d235">a96ea5d235</a></li>
<li>Fixed code generation for MOD in <a href="https://github.com/php/php-src/commit/9f5a4c3799">9f5a4c3799</a></li>
<li>Fixed code generation for CMP in <a href="https://github.com/php/php-src/commit/c2b704b63e">c2b704b63e</a></li>
<li>Fixed code generation for ASSIGN_DIM in <a href="https://github.com/php/php-src/commit/c163ff68da">c163ff68da</a></li>
<li>Invalidate &quot;memory&quot; type of zval if a register was stored in memory to call a helper function in <a href="https://github.com/php/php-src/commit/accc1e6c67">accc1e6c67</a></li>
<li>Fixed compilation of &quot;switch&quot; with undefined input in <a href="https://github.com/php/php-src/commit/8fc3615a7a">8fc3615a7a</a></li>
<li>Fixed compilation of dead code after assignment property to non object in <a href="https://github.com/php/php-src/commit/3a8767b0d1">3a8767b0d1</a></li>
<li>Update IR in <a href="https://github.com/php/php-src/commit/894a7594aa">894a7594aa</a></li>
<li>Update IR in <a href="https://github.com/php/php-src/commit/1068a5f758">1068a5f758</a></li>
<li>Fixed selection candidates for register allocation in <a href="https://github.com/php/php-src/commit/4ae483af36">4ae483af36</a></li>
<li>Fixed compilation of match with undefined input in <a href="https://github.com/php/php-src/commit/23e4e3b18b">23e4e3b18b</a></li>
<li>Fixed incorrect type inference in <a href="https://github.com/php/php-src/commit/aa45df4849">aa45df4849</a></li>
<li>Fixed <a href="https://github.com/php/php-src/issues/12482">GH-12482</a>: Abortion with tracing JIT in <a href="https://github.com/php/php-src/commit/76c41d27f9">76c41d27f9</a></li>
<li>Remove old JIT implementation in <a href="https://github.com/php/php-src/pull/12498">GH-12498</a></li>
<li>memory_consumption must be page aligned in <a href="https://github.com/php/php-src/commit/e270ee3008">e270ee3008</a></li>
<li>Fixed <a href="https://github.com/php/php-src/issues/12494">GH-12494</a>: Zend/tests/arginfo_zpp_mismatch.phpt causes a segfault withJIT + <code>--repeat</code> 2 in <a href="https://github.com/php/php-src/commit/e0ca4dca5b">e0ca4dca5b</a></li>
<li>Fix possible NULL dereference (crash on Zend/tests/arginfo_zpp_mismatch.phpt) in <a href="https://github.com/php/php-src/commit/25cb2a40d6">25cb2a40d6</a></li>
<li>A new PHP JIT implementation based on IR JIT framework in <a href="https://github.com/php/php-src/pull/12079">GH-12079</a></li>
<li>Fixed <a href="https://github.com/php/php-src/issues/11917">GH-11917</a>: primitives seem to be passed via reference instead of by value under some conditions when JIT is enabled on windows in <a href="https://github.com/php/php-src/pull/12451">GH-12451</a></li>
<li>Fixed <a href="https://github.com/php/php-src/issues/12428">GH-12428</a>: Assertion with function/tracing JIT in <a href="https://github.com/php/php-src/commit/dabced0fbb">dabced0fbb</a></li>
<li>Fixed possible use-after-free in <a href="https://github.com/php/php-src/commit/2297e8c143">2297e8c143</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/12364">GH-12364</a>: JIT leak in Symfony TranslationDebugCommandTest in <a href="https://github.com/php/php-src/pull/12394">GH-12394</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/12364">GH-12364</a>: JIT leak in Symfony TranslationDebugCommandTest in <a href="https://github.com/php/php-src/pull/12394">GH-12394</a></li>
<li>Fix incorrect trace type inference in <a href="https://github.com/php/php-src/commit/44a7016049">44a7016049</a></li>
<li>Fixed <a href="https://github.com/php/php-src/issues/12382">GH-12382</a>: JIT Index invalid or out of range error in <a href="https://github.com/php/php-src/commit/5a8f96b0bb">5a8f96b0bb</a></li>
<li>Fixed <a href="https://github.com/php/php-src/issues/12262">GH-12262</a>: Tracing JIT assertion crash when using phpstan in <a href="https://github.com/php/php-src/commit/54452b4811">54452b4811</a></li>
</ul>

<h3 id="eric-mann">Eric Mann</h3>

<ul>
<li>Prepare NEWS for PHP 8.3.0RC5 in <a href="https://github.com/php/php-src/commit/cd71ab33c4">cd71ab33c4</a></li>
</ul>

<h3 id="gina-peter-banyard-%F0%9F%92%9C">Gina Peter Banyard 💜</h3>

<ul>
<li>PDO: Clean-up tests so it&#039;s easier to see if they use default test table in <a href="https://github.com/php/php-src/pull/12552">GH-12552</a></li>
<li><code>ext/xml</code>: Refactor extension to use FCC instead of zvals for handlers in <a href="https://github.com/php/php-src/pull/12340">GH-12340</a></li>
<li><code>ext/spl</code>: Use new F ZPP modifier in <a href="https://github.com/php/php-src/commit/e41598c7fc">e41598c7fc</a></li>
<li><code>ext/libxml</code>: Use new F ZPP modifier in <a href="https://github.com/php/php-src/commit/52de0950f4">52de0950f4</a></li>
<li>Zend: Add ZPP F type check for callables that do not free trampolines in <a href="https://github.com/php/php-src/commit/d86314939c">d86314939c</a></li>
<li>Add some const qualifiers in HashTable foreach macros in <a href="https://github.com/php/php-src/pull/8671">GH-8671</a></li>
</ul>

<h3 id="icy17">icy17</h3>

<ul>
<li>Fix null pointer dereferences in case of allocation failure in <a href="https://github.com/php/php-src/commit/900f0cab9f">900f0cab9f</a></li>
</ul>

<h3 id="ilija-tovilo-%F0%9F%92%9C">Ilija Tovilo 💜</h3>

<ul>
<li>Add <code>zend_worklist.h</code> to <code>PHP_INSTALL_HEADERS</code> in <a href="https://github.com/php/php-src/pull/12571">GH-12571</a></li>
<li>Attempt to fix pdo_mysql conflict on CircleCI in <a href="https://github.com/php/php-src/pull/12563">GH-12563</a></li>
<li>Run FreeBSD on push in <a href="https://github.com/php/php-src/commit/b280f1f964">b280f1f964</a></li>
<li>Split complex regexes to multiple lines in <code>zend_vm_gen.php</code> in <a href="https://github.com/php/php-src/commit/964e9d806b">964e9d806b</a></li>
<li>Fix double-free of doc_comment when overriding static property via trait in <a href="https://github.com/php/php-src/commit/af3d2f7ec9">af3d2f7ec9</a></li>
<li>Implement diagnostic ignore macro for Clang in <a href="https://github.com/php/php-src/commit/80b4c73030">80b4c73030</a></li>
<li>Close PHP tags in tests in <a href="https://github.com/php/php-src/commit/f39b5c4c25">f39b5c4c25</a></li>
<li>Avoid JIT warning with opcache.jit_buffer_size=0 in <a href="https://github.com/php/php-src/commit/07d81592e9">07d81592e9</a></li>
<li>Revert &quot;Test ASAN on Ubuntu 22.04 in nightly by increasing swap&quot; in <a href="https://github.com/php/php-src/commit/5a0c0072dd">5a0c0072dd</a></li>
<li>Remove redundant CI JIT flags in <a href="https://github.com/php/php-src/commit/29fed1cf47">29fed1cf47</a></li>
<li>Fix JIT on nightly in <a href="https://github.com/php/php-src/commit/734afa0ba8">734afa0ba8</a></li>
<li>CircleCI: Increase no_output_timeout to 30m in <a href="https://github.com/php/php-src/commit/c07aed53dd">c07aed53dd</a></li>
<li>Remove invalid <code>--with-zlib-dir</code>=/usr configure flag in <a href="https://github.com/php/php-src/commit/384a4764b1">384a4764b1</a></li>
<li>Move ARM build to CircleCI in <a href="https://github.com/php/php-src/commit/4332546bbf">4332546bbf</a></li>
<li>Reduce jit_max_root_traces in tests in <a href="https://github.com/php/php-src/commit/2aa2d91a7b">2aa2d91a7b</a></li>
<li>Fix use-after-free of constant name in <a href="https://github.com/php/php-src/commit/53dbb760da">53dbb760da</a></li>
<li>Move Cirrus to nightly only, trigger on-demand in <a href="https://github.com/php/php-src/commit/92693a2286">92693a2286</a></li>
<li>Minimal backport of 098d9ca in <a href="https://github.com/php/php-src/commit/36a87e6d32">36a87e6d32</a></li>
<li>Fix <code>SKIPIF</code> jit test in <a href="https://github.com/php/php-src/commit/6e7e52de19">6e7e52de19</a></li>
<li>Add missing jitType input for test-macos action in <a href="https://github.com/php/php-src/commit/234648e40c">234648e40c</a></li>
<li>Fix invalid returned opcode for memoized expressions in <a href="https://github.com/php/php-src/commit/4ba5699903">4ba5699903</a></li>
<li>Test ASAN on Ubuntu 22.04 in nightly by increasing swap in <a href="https://github.com/php/php-src/commit/f7cef9a242">f7cef9a242</a></li>
<li>Fix <code>str_decrement()</code> on &quot;1&quot; in <a href="https://github.com/php/php-src/commit/b31a5b2731">b31a5b2731</a></li>
<li>Use separate sqlsrv dbs for different exts in <a href="https://github.com/php/php-src/commit/769f41bb21">769f41bb21</a></li>
<li>Fix GCC warning in <code>math.c</code> in <a href="https://github.com/php/php-src/commit/fcae58809f">fcae58809f</a></li>
</ul>

<h3 id="jakub-zelenka-%F0%9F%92%9C">Jakub Zelenka 💜</h3>

<ul>
<li>Fix failing test for bug <a href="https://bugs.php.net/bug.php?id=75708">#75708</a> in <a href="https://github.com/php/php-src/commit/006032b6f0">006032b6f0</a></li>
<li>Fix bug <a href="https://bugs.php.net/bug.php?id=75708">#75708</a>: getimagesize with &quot;&amp;$imageinfo&quot; fails on StreamWrappers in <a href="https://github.com/php/php-src/commit/52aa0d9ecc">52aa0d9ecc</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/12489">GH-12489</a>: Missing sigbio creation checking in openssl_cms_verify in <a href="https://github.com/php/php-src/commit/83a242ec0c">83a242ec0c</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/12232">GH-12232</a>: FPM: segfault dynamically loading extension without opcache in <a href="https://github.com/php/php-src/commit/0217be4d5b">0217be4d5b</a></li>
</ul>

<h3 id="jorg-adam-sowa">Jorg Adam Sowa</h3>

<ul>
<li>Typed constants in sqlite extension in <a href="https://github.com/php/php-src/pull/12379">GH-12379</a></li>
<li>Typed constants in Intl extenstion in <a href="https://github.com/php/php-src/pull/12360">GH-12360</a></li>
<li>Typed constants in PDO extension in <a href="https://github.com/php/php-src/pull/12362">GH-12362</a></li>
<li>Typed constants in reflection extension in <a href="https://github.com/php/php-src/pull/12378">GH-12378</a></li>
<li>Typed constants in SPL extension in <a href="https://github.com/php/php-src/pull/12358">GH-12358</a></li>
</ul>

<h3 id="julien-desrosiers">Julien Desrosiers</h3>

<ul>
<li>Nested match expression tests in <a href="https://github.com/php/php-src/commit/226b92b1dc">226b92b1dc</a></li>
</ul>

<h3 id="julien-francoz">Julien Francoz</h3>

<ul>
<li>add file path in opcache lock file error in <a href="https://github.com/php/php-src/pull/10331">GH-10331</a></li>
</ul>

<h3 id="k%C3%A9vin-dunglas">Kévin Dunglas</h3>

<ul>
<li>fix: don&#039;t delete an unitialized timer in <a href="https://github.com/php/php-src/pull/12537">GH-12537</a></li>
</ul>

<h3 id="levi-morrison">Levi Morrison</h3>

<ul>
<li>fix <code>mbstring.c</code> -Wsingle-bit-bitfield-constant-conversion in <a href="https://github.com/php/php-src/pull/12327">GH-12327</a></li>
<li>fix -Wreturn-type and -Wstrict-prototypes in gd configure in <a href="https://github.com/php/php-src/pull/12328">GH-12328</a></li>
</ul>

<h3 id="marcos-marcolin">Marcos Marcolin</h3>

<ul>
<li>Remove unused code in <code>run-tests.php</code> in <a href="https://github.com/php/php-src/pull/12553">GH-12553</a></li>
<li>chore: removes redundant validation of $repeat, as it is the while condition. in <a href="https://github.com/php/php-src/pull/12521">GH-12521</a></li>
</ul>

<h3 id="michael-vo%C5%99%C3%AD%C5%A1ek">Michael Voříšek</h3>

<ul>
<li>Fix unused variable in <code>phpdbg_cmd.c</code> in <a href="https://github.com/php/php-src/pull/12575">GH-12575</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/11374">GH-11374</a>: Different preg_match result with -d pcre.jit=0 in <a href="https://github.com/php/php-src/commit/83a505e85f">83a505e85f</a></li>
</ul>

<h3 id="mikhail-galanin">Mikhail Galanin</h3>

<ul>
<li>Invalidate path even if the file was deleted in <a href="https://github.com/php/php-src/commit/f4ab494906">f4ab494906</a></li>
</ul>

<h3 id="m%C3%A1t%C3%A9-kocsis-%F0%9F%92%9C">Máté Kocsis 💜</h3>

<ul>
<li>Parallelize pdo tests (dblib, firebird, oci, odbc, pgsql) in <a href="https://github.com/php/php-src/pull/12395">GH-12395</a></li>
</ul>

<h3 id="niels-dossche">Niels Dossche</h3>

<ul>
<li>Fix memory leak in error path of <code>zend_register_list_destructors_ex</code> in <a href="https://github.com/php/php-src/commit/3bf5d89efb">3bf5d89efb</a></li>
<li>Fix cloning attribute with namespace disappearing namespace in <a href="https://github.com/php/php-src/commit/3e33eda39a">3e33eda39a</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/12532">GH-12532</a>: PharData created from zip has incorrect timestamp in <a href="https://github.com/php/php-src/commit/a470c4aeef">a470c4aeef</a></li>
<li>Remove dead stores from <code>ext/spl</code> in <a href="https://github.com/php/php-src/pull/12550">GH-12550</a></li>
<li>Mitigate <a href="https://bugs.php.net/bug.php?id=51561">#51561</a>: SoapServer with a extented class and using sessions, lost the setPersistence() in <a href="https://github.com/php/php-src/commit/53218b1a32">53218b1a32</a></li>
<li>Fix FFI tests on 8.3+ in <a href="https://github.com/php/php-src/commit/43064cae94">43064cae94</a></li>
<li>Fix #47531: No way of removing redundant xmlns: declarations in <a href="https://github.com/php/php-src/commit/f9a24969d0">f9a24969d0</a></li>
<li>Fix bug <a href="https://bugs.php.net/bug.php?id=75306">#75306</a>: Memleak in SoapClient in <a href="https://github.com/php/php-src/commit/27797a26ca">27797a26ca</a></li>
<li>Fix incorrect dtor for persistent sdl-&gt;encoders in <a href="https://github.com/php/php-src/commit/9f7f3b2034">9f7f3b2034</a></li>
<li>Fix soap crash with <code>ZEND_RC_DEBUG</code> in <a href="https://github.com/php/php-src/pull/12514">GH-12514</a></li>
<li>Convert <code>ext/xml</code> fields from int to bool in <a href="https://github.com/php/php-src/pull/12497">GH-12497</a></li>
<li>Use Clang 16 to work around LSAN TLS crashes in <a href="https://github.com/php/php-src/pull/12496">GH-12496</a></li>
<li>[RFC] DOM HTML5 parsing and serialization support (Lexbor library part) in <a href="https://github.com/php/php-src/pull/12493">GH-12493</a></li>
<li>Implement request <a href="https://bugs.php.net/bug.php?id=68325">#68325</a>: parse huge option for <code>xml_parser_create</code> (<a href="https://bugs.php.net/bug.php?id=12256">#12256</a>) in <a href="https://github.com/php/php-src/commit/98b08c52db">98b08c52db</a></li>
<li>Remove <code>php_xsl_create_object()</code> in <a href="https://github.com/php/php-src/pull/12492">GH-12492</a></li>
<li>Fix segfault and assertion failure with refcounted props and arrays in <a href="https://github.com/php/php-src/commit/01d61605d3">01d61605d3</a></li>
<li>Fix segfault and assertion failure with refcounted props and arrays in <a href="https://github.com/php/php-src/commit/deebb68612">deebb68612</a></li>
<li>Fix incorrect uri check in SOAP caching in <a href="https://github.com/php/php-src/commit/abf562c417">abf562c417</a></li>
<li>Fix bug <a href="https://bugs.php.net/bug.php?id=66150">#66150</a>: SOAP WSDL cache race condition causes Segmentation Fault in <a href="https://github.com/php/php-src/commit/43e63168e9">43e63168e9</a></li>
<li>Avoid refcounted copy in <code>_object_properties_init()</code> for internal classes in <a href="https://github.com/php/php-src/pull/12474">GH-12474</a></li>
<li>Add Laravel demo page to benchmark CI in <a href="https://github.com/php/php-src/commit/1c9c3af157">1c9c3af157</a></li>
<li>Cleanup unused variable in <code>php_dom.c</code> in <a href="https://github.com/php/php-src/pull/12463">GH-12463</a></li>
<li>Refactor some <code>ext/pcre</code> code for performance in <a href="https://github.com/php/php-src/pull/12447">GH-12447</a></li>
<li>Add missing module dependency for xsl in <a href="https://github.com/php/php-src/commit/68aa793173">68aa793173</a></li>
<li>Remove unused variable &#039;error&#039; in <a href="https://github.com/php/php-src/pull/12438">GH-12438</a></li>
<li>Fix compile error when <code>php_libxml.h</code> is included in C++ in <a href="https://github.com/php/php-src/commit/0cab865275">0cab865275</a></li>
<li>Optimize <code>strspn()</code> in <a href="https://github.com/php/php-src/commit/d0b29d8286">d0b29d8286</a></li>
<li>Fix registerNodeClass with abstract class crashing in <a href="https://github.com/php/php-src/commit/d7de0ceca6">d7de0ceca6</a></li>
<li>Cover more paths in <code>dom_xpath_ext_function_php()</code> with tests in <a href="https://github.com/php/php-src/commit/49b8168ddb">49b8168ddb</a></li>
<li>Introduce Z_PARAM_FUNC_EX2 to maintain compatibility in <a href="https://github.com/php/php-src/pull/12419">GH-12419</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/12392">GH-12392</a>: Segmentation fault on SoapClient::__getTypes in <a href="https://github.com/php/php-src/commit/7e4a3236d9">7e4a3236d9</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/8996">GH-8996</a>: DOMNode serialization on PHP ^8.1 in <a href="https://github.com/php/php-src/commit/24e5e4ec0d">24e5e4ec0d</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/12380">GH-12380</a>: JIT+private array property access inside closure accesses private property in child class in <a href="https://github.com/php/php-src/commit/fb6838770c">fb6838770c</a></li>
<li>Convert bounds exception in SplFixedArray to OutOfBoundsException instead of RuntimeException in <a href="https://github.com/php/php-src/pull/12383">GH-12383</a></li>
<li>Fix Windows CI in <a href="https://github.com/php/php-src/commit/ae52f1958d">ae52f1958d</a></li>
<li>Add missing properties to xsl stub in <a href="https://github.com/php/php-src/pull/12334">GH-12334</a></li>
<li>Ignore optional warning output in test in <a href="https://github.com/php/php-src/commit/6cf76d552e">6cf76d552e</a></li>
<li>Fix test under older CI configurations in <a href="https://github.com/php/php-src/commit/b140f6e9f8">b140f6e9f8</a></li>
<li>Fix <a href="https://bugs.php.net/bug.php?id=80092">#80092</a>: ZTS + preload = segfault on shutdown in <a href="https://github.com/php/php-src/commit/bdc87b0f66">bdc87b0f66</a></li>
<li>Improve error messages for <code>XSLTProcessor::transformToDoc()</code> in <a href="https://github.com/php/php-src/pull/12332">GH-12332</a></li>
<li>Fix broken cache invalidation with deallocated and reallocated document node in <a href="https://github.com/php/php-src/commit/eebc528cbf">eebc528cbf</a></li>
<li>Use RETURN_STR_COPY() in xsl in <a href="https://github.com/php/php-src/commit/f10e1b8f59">f10e1b8f59</a></li>
<li>Implement request <a href="https://bugs.php.net/bug.php?id=64137">#64137</a> (<code>XSLTProcessor::setParameter()</code> should allow both quotes to be used) in <a href="https://github.com/php/php-src/commit/5c749ad4cf">5c749ad4cf</a></li>
<li>Apply SimpleXML iterator fixes only on master in <a href="https://github.com/php/php-src/commit/b842ea4fa8">b842ea4fa8</a></li>
<li>Add test for <code>XSLTProcessor::getParameter()</code> in <a href="https://github.com/php/php-src/commit/b67530a6c0">b67530a6c0</a></li>
</ul>

<h3 id="omar-emara">Omar Emara</h3>

<ul>
<li>PGSQL: Allow unconditional selection in pg_select in <a href="https://github.com/php/php-src/commit/75da0d7c45">75da0d7c45</a></li>
</ul>

<h3 id="peter-kokot">Peter Kokot</h3>

<ul>
<li>Remove unused DBA_CDB_MAKE constant in <a href="https://github.com/php/php-src/pull/12535">GH-12535</a></li>
<li>Remove redundant code in <code>ext/mysqlnd</code> build in <a href="https://github.com/php/php-src/pull/12384">GH-12384</a></li>
</ul>

<h3 id="saki-takamachi">Saki Takamachi</h3>

<ul>
<li>Optimized pdo_pgsql connection test in <a href="https://github.com/php/php-src/pull/12454">GH-12454</a></li>
<li>Fixed regular expression to get password from dsn in <a href="https://github.com/php/php-src/pull/12448">GH-12448</a></li>
<li>Fixed a bug in <code>zend_memnistr</code> with single character needle in <a href="https://github.com/php/php-src/commit/736032febf">736032febf</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/12423">GH-12423</a>: Changed to prioritize DSN authentication information over arguments in <a href="https://github.com/php/php-src/commit/b5c287e4b4">b5c287e4b4</a></li>
</ul>

<h3 id="sergei-turchanov">Sergei Turchanov</h3>

<ul>
<li>Reset inheritance_cache pointer of <code>zend_class_entry</code> upon serialization in <a href="https://github.com/php/php-src/pull/12401">GH-12401</a></li>
</ul>

<h3 id="sji">sji</h3>

<ul>
<li>Fix segfault caused by weak references to FFI objects in <a href="https://github.com/php/php-src/pull/12488">GH-12488</a></li>
</ul>

<h3 id="tim-d%C3%BCsterhus">Tim Düsterhus</h3>

<ul>
<li>random: Add additional test for <code>Randomizer::getFloat()</code> in <a href="https://github.com/php/php-src/pull/12436">GH-12436</a></li>
<li>random: Fix γ-section implementation for <code>Randomizer::getFloat()</code> in <a href="https://github.com/php/php-src/pull/12402">GH-12402</a></li>
<li>random: Remove RAND_RANGE_BADSCALING in <a href="https://github.com/php/php-src/pull/12374">GH-12374</a></li>
<li>pcre: Stop special-casing /e in <a href="https://github.com/php/php-src/pull/12355">GH-12355</a></li>
<li>password_hash: Increase <code>PHP_PASSWORD_BCRYPT_COST</code> to 12 in <a href="https://github.com/php/php-src/pull/12367">GH-12367</a></li>
</ul>

<h3 id="usarise">usarise</h3>

<ul>
<li>fileinfo: Backport svg detection patch in <a href="https://github.com/php/php-src/commit/1f5bea3452">1f5bea3452</a></li>
</ul>

<h3 id="viktor-vassilyev">Viktor Vassilyev</h3>

<ul>
<li><code>ext/soap</code>: Add support for clark notation for namespaces in class map in <a href="https://github.com/php/php-src/commit/e58af7c160">e58af7c160</a></li>
</ul>

<h3 id="yurun">Yurun</h3>

<ul>
<li>Fix the incorrect data type of float values in PDO query results in <a href="https://github.com/php/php-src/commit/6d10a69898">6d10a69898</a></li>
</ul>

<h3 id="%E6%AD%A6%E7%94%B0-%E6%86%B2%E5%A4%AA%E9%83%8E">武田 憲太郎</h3>

<ul>
<li>Fix pgsql and mysql tests on GitHub actions in <a href="https://github.com/php/php-src/commit/f42cef6675">f42cef6675</a></li>
</ul>

</details>

<p><br>
We are incredibly grateful for the commitment and dedication of all contributors. Stay tuned for next month's roundup as we continue to make PHP better together.</p>

<p><br></p>

<hr />

<h2 id="support-php-foundation">Support PHP Foundation</h2>

<p>At The PHP Foundation, we support, promote, and advance the PHP language. We financially support six PHP core developers to contribute to the PHP project. You can help support PHP Foundation on <a href="https://opencollective.com/phpfoundation">OpenCollective</a> or via <a href="https://github.com/sponsors/ThePHPF">GitHub Sponsors</a>.</p>

<p>A big thanks to all our sponsors — PHP Foundation is all of us!</p>

<p>Follow us on Twitter <a href="https://twitter.com/thephpf">@ThePHPF</a> to get the latest updates from the Foundation.</p>

<p>💜️ 🐘</p>

<blockquote>
  <p>PHP Roundup is prepared by Ayesh Karunaratne from <strong><a href="https://php.watch">PHP.Watch</a></strong>, a source for PHP News, Articles, Upcoming Changes, and more.</p>
</blockquote>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP Core Roundup #17]]></title>
            <link href="https://thephp.foundation/blog/2023/10/01/php-core-roundup-17/"/>
            <updated>2023-10-01T00:00:00+00:00</updated>
            <id>https://thephp.foundation/blog/2023/10/01/php-core-roundup-17/</id>
            <content type="html"><![CDATA[<p>Welcome back to <a href="/blog/tag/roundup/">PHP Core Roundup</a> series! This is post #17, where we highlight and celebrate the improvements made to PHP during the month past by the PHP development team, members of the PHP Foundation, and more.</p>

<blockquote>
  <p>The PHP Foundation is a collective of PHP contributors, veterans, and companies that collaborate to ensure the long-term sustainability of the PHP programming language. The foundation currently supports six contributors focused on PHP's maintenance, debt reduction, and feature development. These contributors work closely with others on coding, documentation, and discussions.</p>
  
  <p>Started over a year ago, the PHP Core Roundup series offers a summary of the latest developments, discussions, and news about PHP Core, contributed by both PHP Foundation members and other participants. This post is the thirteenth in the PHP Core Roundup series.</p>
</blockquote>

<p><div class="px-4 pt-3 border-b border-t -mx-4 border-gray-200">
    <div class="bg-white py-8">
        <div class="mx-auto grid max-w-7xl grid-cols-1 gap-10 lg:grid-cols-12 lg:gap-8">
            <div class="max-w-xl text-4xl font-medium tracking-tight text-gray-900 lg:col-span-6">
                Subscribe to PHP Core Roundup newsletter
            </div>
            <form method="POST"
                  action="https://php-foundation.mailcoach.app/subscribe/9be4e2bd-f9d8-475c-b00e-2dcc4cf90056"
                  class="w-full max-w-md lg:col-span-6">
                <div class="flex gap-x-4">
                    <label for="email-address" class="sr-only">Email address</label>
                    <input id="email-address" name="email" type="email" autocomplete="email" required
                           class="min-w-0 flex-auto rounded-md border-0 px-3.5 py-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                           placeholder="Enter your email">
                    <button type="submit"
                            class="inline-block py-2 no-underline px-6 !text-white bg-[#7f52ff] rounded-3xl hover:bg-[rgba(127,82,255,.8)]">
                        Subscribe
                    </button>
                </div>
                <div class="mt-4 text-sm leading-6 text-gray-900">
                    We care about your data.
                    Read our <a href="https://thephp.foundation/privacy-policy"
                                class="font-semibold text-indigo-600 hover:text-indigo-500 no-underline">privacy policy</a>.
                </div>
            </form>
        </div>
    </div>
</div>
</p>

<h2 id="php-security-audit-organized-by-the-php-foundation-%F0%9F%92%9C">PHP Security Audit organized by The PHP Foundation 💜</h2>

<p>The PHP Foundation intends to conduct a security audit of the PHP source code. Derick Rethans 💜 has asked the PHP Internals mailing list for input on which sections of the PHP source code should be prioritized in this audit. Feel free to join the <a href="https://externals.io/message/121135">conversation</a> if you have suggestions.</p>

<h2 id="releases">Releases</h2>

<p>The PHP development team released two new versions in September 2023:</p>

<p><strong><a href="https://www.php.net/archive/2023.php#2023-09-28-1">PHP 8.2.11</a></strong> and <strong><a href="https://www.php.net/archive/2023.php#2023-09-28-3">PHP 8.1.24</a></strong></p>

<p>These releases include several bug fixes and improvements, notably in areas such as Core, DOM, Iconv, Intl, MySQLnd, ODBC, SimpleXML, SPL, and SQLite3.</p>

<h2 id="recent-rfcs-and-mailing-list-discussions">Recent RFCs and Mailing List Discussions</h2>

<blockquote>
  <p>Changes and improvements to PHP are discussed, reported, and voted on by the PHP Foundation Team, the PHP development team, and contributors. Bug reports are made to the PHP <a href="https://github.com/php/php-src/issues">issue tracker</a>, changes are discussed in <a href="https://www.php.net/mailing-lists.php">mailing lists</a>, minor code changes are proposed as <a href="https://github.com/php/php-src/issues">pull requests</a>, and major changes are discussed in detail and voted on as <a href="https://wiki.php.net/rfc">PHP RFCs</a>. <a href="https://github.com/php/doc-en/">Documentation</a> and the <a href="https://github.com/php/web-php">php.net website</a> changes are also discussed and improved at their relevant Git repositories on GitHub.</p>
</blockquote>

<p><br>
Hundreds of awesome PHP contributors put their efforts into improvements to the PHP code base, documentation, and the php.net website. Here is a summary of some changes made by the people behind PHP. Things marked with 💜 are done by the PHP Foundation team.</p>

<h2 id="php-8.3-release-page">PHP 8.3 Release Page</h2>

<p>A <a href="https://github.com/php/web-php/pull/807">pull-request</a> for the upcoming PHP 8.3 release page on php.net is in progress, and you can help with that!</p>

<p>This is a continuation of <a href="https://externals.io/message/112026">a good tradition</a> started by Roman Pronskiy, Alexander Makarov, and the JetBrains design team.</p>

<p>Check out how these pages looked like for <a href="https://www.php.net/releases/8.0/en.php">PHP 8.0</a>, <a href="https://www.php.net/releases/8.1/en.php">PHP 8.1</a>, and <a href="https://www.php.net/releases/8.2/en.php">PHP 8.2</a>.</p>

<h2 id="early-developments-for-php-8.4">Early-developments for PHP 8.4</h2>

<p>Although PHP 8.3 is still being ironed out, there are some discussions and even an RFC currently being voted for proposed changes in PHP 8.4 (scheduled for the end of 2024).</p>

<h3 id="declined%3A-support-optional-suffix-parameter-in-tempnam-by-athos-ribeiro">Declined: <a href="https://wiki.php.net/rfc/tempnam-suffix-v2">Support optional suffix parameter in tempnam</a> by Athos Ribeiro</h3>

<p>RFC proposes to add a new optional suffix parameter to the <code>tempnam()</code> function.</p>

<p>A suffix could provide even more semantic value or context for a user inspecting the generated files, and, in specific situations, could even provide more context for software processing such files. Right now, users can only add a prefix.</p>

<h3 id="in-voting%3A-increasing-the-default-bcrypt-cost-by-tim-d%C3%BCsterhus">In Voting: <a href="https://wiki.php.net/rfc/bcrypt_cost_2023">Increasing the default BCrypt cost</a> by Tim Düsterhus</h3>

<p>The RFC proposes increasing the default BCrypt cost. This is to enhance adaptive security in relation to increased processing power and thus increased possible cracking speed.</p>

<p>The last time the value was updated 11 years ago. Therefore, Tim suggests updating the default cost from 10 to either 11 (double the time) or 12 (quadruple the time). The <a href="https://wiki.php.net/rfc/bcrypt_cost_2023">RFC</a> and the relevant <a href="https://externals.io/message/121004">mailing list thread</a> mention several benchmarks showing the execution time for various cost levels on different CPUs.</p>

<h3 id="under-discussion%3A-dom-html5-parsing-and-serialization-by-niels-dossche">Under Discussion: <a href="https://wiki.php.net/rfc/domdocument_html5_parser">DOM HTML5 parsing and serialization</a> by Niels Dossche</h3>

<p>RFC proposes to add two new classes: <code>DOM\HTMLDocument</code> and <code>DOM\XMLDocument</code> to the dom extension. Furthermore, existing dom classes in the global namespace get an alias in the new DOM namespace. The <code>HTMLDocument</code> class will add support for HTML5 document parsing and serializing. The <code>XMLDocument</code> class serves as a modern alternative to <code>\DOMDocument</code>, which is retained for compatibility. These new classes also provide a more misuse-resistant API for loading documents.</p>

<h3 id="under-discussion%3A-xml_option_parse_huge-by-niels-dossche">Under Discussion: <a href="https://wiki.php.net/rfc/xml_option_parse_huge">XML_OPTION_PARSE_HUGE</a> by Niels Dossche</h3>

<p>RFC proposes to add a new option to the event-driven (SAX) <code>XmlParser</code> that would allow it to parse large documents.</p>

<h3 id="under-discussion%3A-add-4-new-rounding-modes-to-round-function-by-jorg-sowa">Under Discussion: <a href="https://wiki.php.net/rfc/new_rounding_modes_to_round_function">Add 4 new rounding modes to round() function</a> by Jorg Sowa</h3>

<p>RFC proposes to add four new modes to the <code>round()</code> function: <code>PHP_ROUND_CEILING</code>, <code>PHP_ROUND_FLOOR</code>, <code>PHP_ROUND_AWAY_FROM_ZERO</code>, <code>PHP_ROUND_TOWARD_ZERO</code>.</p>

<h3 id="under-discussion%3A-a-new-jit-implementation-based-on-ir-framework-by-dmitry-stogov">Under Discussion: <a href="https://wiki.php.net/rfc/jit-ir">A new JIT implementation based on IR Framework</a> by Dmitry Stogov</h3>

<p>RFC proposes a new JIT implementation that is based on a separately developed <a href="https://github.com/dstogov/ir">IR Framework</a>. The main advantage of the new approach is that PHP source code will be freed from the low-level details of JIT compilation. The downside is a longer JIT-compilation time.</p>

<p>Dmitry <a href="https://externals.io/message/121038">emailed</a> PHP Internals mailing list, which led to a lengthy discussion on the merits of the new JIT implementation.</p>

<h3 id="draft%3A-deprecations-for-php-8.4-rfc-by-niels-dossche">Draft: <a href="https://wiki.php.net/rfc/deprecations_php_8_4">Deprecations for PHP 8.4 RFC</a> by Niels Dossche</h3>

<p>RFC is currently in draft, which stands to track ideas on deprecating certain features. So far those are related to the <code>DOMAttr::$schemaTypeInfo</code>, <code>DOMElement::$schemaTypeInfo</code> properties, <code>DOMImplementation::getFeature()</code>, <code>mysqli_ping()</code>, <code>mysqli::ping()</code> functions, and <code>DOM_PHP_ERR</code> constant.</p>

<p><br></p>

<h2 id="documentation">Documentation</h2>

<p>While PHP 8.3 has moved to the RC cycle, the documentation available on <a href="https://php.net">php.net</a>, requires updating. An initial version of the <a href="https://www.php.net/manual/en/migration83.php">PHP 8.3 migration guide</a> has been published by Yoshinari Takaoka.</p>

<p>Gina P. Banyard 💜 is tracking the progress for PHP 8.3 related changes in <a href="https://github.com/php/doc-en/issues/2796">php/doc-en#2796</a>, and also triaged issues in the docs and marked several of them as "good first time", which are ideal easy picks if you would like to start contributing to PHP docs. You can find the full list on <a href="https://github.com/php/doc-en/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22">GitHub</a>.</p>

<p><br></p>

<h2 id="merged-prs-and-commits">Merged PRs and Commits</h2>

<p>Following are some changes that did not go through an RFC process because they are either planned, bug fixes, or progressive enhancements.</p>

<hr />

<h3 id="full-list-of-commits--since-php-core-roundup-%2316">Full list of commits  since <a href="/blog/2023/09/01/php-core-roundup-16/">PHP Core Roundup #16</a></h3>

<p>Commits are in the order they were added, grouped by author in alphabetical order.</p>

<details>

<summary>Click here to expand</summary>

<h3 id="alex-dowad">Alex Dowad</h3>

<ul>
<li><code>PHP_HAVE_BUILTIN_USUB_OVERFLOW</code> macro is defined even if __builtin_usub_overflow not available in <a href="https://github.com/php/php-src/commit/50ca24251d">50ca24251d</a></li>
</ul>

<h3 id="calvin-buckley">Calvin Buckley</h3>

<ul>
<li>ODBC unit tests shouldn&#039;t override odbc.ini location in <a href="https://github.com/php/php-src/commit/a648d39297">a648d39297</a></li>
<li>Fix persistent procedural ODBC connections not getting closed in <a href="https://github.com/php/php-src/commit/5a2b251610">5a2b251610</a></li>
<li>Fix memory leak with failed SQLPrepare in <a href="https://github.com/php/php-src/commit/a022ec53bd">a022ec53bd</a></li>
</ul>

<h3 id="david-carlier">David Carlier</h3>

<ul>
<li>zend call stack support for haiku w/o using posix pthread api but the in <a href="https://github.com/php/php-src/pull/12103">GH-12103</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/12190">GH-12190</a>: <code>stream_context_create</code> with address and port at 0 in <a href="https://github.com/php/php-src/commit/d65c80031a">d65c80031a</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/12282">GH-12282</a>: <code>IntlDateFormatter::construct</code> should throw an exception is the locale field has an invalid value in <a href="https://github.com/php/php-src/commit/a80db7b52a">a80db7b52a</a></li>
<li><code>ext/intl</code>: expose dateformat UDAT_PATTERN constant in <a href="https://github.com/php/php-src/commit/f6fae19a10">f6fae19a10</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/12243">GH-12243</a>, segfault on <code>IntlDateFormatter::construct</code> with dateType set to UDAT_PATTERN but not timeType in <a href="https://github.com/php/php-src/commit/84c4336aa3">84c4336aa3</a></li>
<li><code>zend_call_stack_get</code> implementation for NetBSD in <a href="https://github.com/php/php-src/commit/aef5225394">aef5225394</a></li>
</ul>

<h3 id="divinity76">divinity76</h3>

<ul>
<li>random: Perform fewer iterations if SKIP_SLOW_TESTS is set in <a href="https://github.com/php/php-src/pull/12279">GH-12279</a></li>
<li>support running testsuite with negative niceness in <a href="https://github.com/php/php-src/pull/11481">GH-11481</a></li>
</ul>

<h3 id="dmitry-stogov">Dmitry Stogov</h3>

<ul>
<li>Fixed tracing JIT support for CALLABLE_CONVERT in <a href="https://github.com/php/php-src/pull/12156">GH-12156</a></li>
<li>Fix ws in <a href="https://github.com/php/php-src/commit/3ffa1c4c3e">3ffa1c4c3e</a></li>
<li>Fixed tracing jit for BIND_INIT_STATIC_OR_JMP in <a href="https://github.com/php/php-src/commit/95edb50b58">95edb50b58</a></li>
<li>Fixed uninitialized EX(opline) access (possible Zend/tests/gh12073.phpt crash) in <a href="https://github.com/php/php-src/commit/f1f608bf53">f1f608bf53</a></li>
<li>Use version of PHP SDK binary tools that uses PHP downloads in <a href="https://github.com/php/php-src/commit/b7af61a154">b7af61a154</a></li>
</ul>

<h3 id="florian-sowade">Florian Sowade</h3>

<ul>
<li>Fix <a href="https://github.com/php/php-src/issues/12207">GH-12207</a> memory leak of doc blocks of static properties in <a href="https://github.com/php/php-src/commit/910f579f14">910f579f14</a></li>
</ul>

<h3 id="gina-peter-banyard-%F0%9F%92%9C">Gina Peter Banyard 💜</h3>

<ul>
<li><code>ext/mysqli</code>: Work on making tests parallizable in <a href="https://github.com/php/php-src/pull/11814">GH-11814</a></li>
<li><code>ext/pcntl</code>: Remove useless call to <code>zend_get_callable_name()</code> in <a href="https://github.com/php/php-src/pull/12241">GH-12241</a></li>
<li>Fixed oss-fuzz <a href="https://bugs.php.net/bug.php?id=62294">#62294</a>: Unsetting variable after ++/-- on string variable warning in <a href="https://github.com/php/php-src/commit/0b614a6c2b">0b614a6c2b</a></li>
<li>Zend: Remove dependency on <code>zend.h</code> for certain headers in <a href="https://github.com/php/php-src/pull/12166">GH-12166</a></li>
<li>streams: Checking if a stream is castable should not emit warnings for user defined streams in <a href="https://github.com/php/php-src/commit/d68073c23b">d68073c23b</a></li>
<li><code>ext/pdo</code>: Refactor <code>pdo_stmt_construct()</code> to use newer FCI/FCC API in <a href="https://github.com/php/php-src/pull/12142">GH-12142</a></li>
<li>Fix OSS Fuzz <a href="https://bugs.php.net/bug.php?id=61865">#61865</a>: Undef variable in ++/-- for declared property that is unset in error handler in <a href="https://github.com/php/php-src/commit/8a392eddf9">8a392eddf9</a></li>
<li>Fixed bug <a href="https://github.com/php/php-src/issues/12020">GH-12020</a>: <code>intl_get_error_message()</code> broken after <code>MessageFormatter::formatMessage()</code> fails in <a href="https://github.com/php/php-src/commit/a579fa807c">a579fa807c</a></li>
<li>Add tests for oss-fuzz-61469: Undef dynamic property in ++/-- unset in error handler in <a href="https://github.com/php/php-src/commit/013bb5769b">013bb5769b</a></li>
</ul>

<h3 id="graham-campbell">Graham Campbell</h3>

<ul>
<li>Removed incorrect news items for things already in 8.3.x or earlier in <a href="https://github.com/php/php-src/commit/58b8393cce">58b8393cce</a></li>
</ul>

<h3 id="ilija-tovilo-%F0%9F%92%9C">Ilija Tovilo 💜</h3>

<ul>
<li>Use autoconf for recognizing __builtin_unreachable() in <a href="https://github.com/php/php-src/pull/12266">GH-12266</a></li>
<li>Fix getpriority test with negative return value in <a href="https://github.com/php/php-src/commit/181598d403">181598d403</a></li>
<li>Use __builtin_unreachable() directly in <code>ZEND_UNREACHABLE</code> in <a href="https://github.com/php/php-src/commit/37ce7199f2">37ce7199f2</a></li>
<li>Move static property check to assert in <a href="https://github.com/php/php-src/pull/12239">GH-12239</a></li>
<li>Upgrade to macOS 12 in CI in <a href="https://github.com/php/php-src/commit/55ed7690f4">55ed7690f4</a></li>
<li>Upload callgrind profile to GA in <a href="https://github.com/php/php-src/pull/12212">GH-12212</a></li>
<li>Fix filter_var with callback and explicit REQUIRE_SCALAR in <a href="https://github.com/php/php-src/commit/c2fb10d2d2">c2fb10d2d2</a></li>
<li>Use <code>zend_error_noreturn</code> for E_ERROR consistently in <a href="https://github.com/php/php-src/commit/692cea5cbc">692cea5cbc</a></li>
<li>Fix noreturn with warning that should be an error in <a href="https://github.com/php/php-src/commit/2227fefa17">2227fefa17</a></li>
<li>Improve invalid cpp modifier message in <a href="https://github.com/php/php-src/commit/011071a3b3">011071a3b3</a></li>
<li>Fix <code>zend_separate_if_call_and_write</code> for FUNC_ARGs in <a href="https://github.com/php/php-src/commit/748adf18fc">748adf18fc</a></li>
<li>Revert &quot;Skip profiling of sqlite3_step&quot; in <a href="https://github.com/php/php-src/commit/3fb09940fc">3fb09940fc</a></li>
<li>Skip profiling of sqlite3_step in <a href="https://github.com/php/php-src/commit/bb31a75321">bb31a75321</a></li>
<li>Revert <a href="https://github.com/php/php-src/commit/479e65933154f1da92e6a820000e3bd3b2392874">479e6593</a> in <a href="https://github.com/php/php-src/commit/3433dab5f7">3433dab5f7</a></li>
<li>Fix freeing of incompletely initialized closures in <a href="https://github.com/php/php-src/commit/af2110e664">af2110e664</a></li>
<li><code>xfail</code> mbstring test on Windows 32-bit in <a href="https://github.com/php/php-src/commit/6b74f1f745">6b74f1f745</a></li>
<li>Fix master branch check in find-target-branch.bat in <a href="https://github.com/php/php-src/commit/9ce9c11ee8">9ce9c11ee8</a></li>
<li>Include branch in benchmarking information in <a href="https://github.com/php/php-src/commit/ee6f9e294c">ee6f9e294c</a></li>
</ul>

<h3 id="jakub-zelenka-%F0%9F%92%9C">Jakub Zelenka 💜</h3>

<ul>
<li>Prepare NEWS for PHP 8.3.0RC4 in <a href="https://github.com/php/php-src/commit/517411d2fb">517411d2fb</a></li>
<li>Reduce impact of stream file path check in filestat in <a href="https://github.com/php/php-src/commit/5e8c992c78">5e8c992c78</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/12151">GH-12151</a>: str_getcsv ending with escape zero segfualt in <a href="https://github.com/php/php-src/commit/64ebadcac5">64ebadcac5</a></li>
<li>Use version of PHP SDK binary tools that uses PHP downloads in <a href="https://github.com/php/php-src/pull/12085">GH-12085</a></li>
</ul>

<h3 id="ju1ius">ju1ius</h3>

<ul>
<li>Prevents double call to internal iterator rewind handler in <a href="https://github.com/php/php-src/commit/da7a66d647">da7a66d647</a></li>
<li>adds failing test case for <a href="https://github.com/php/php-src/issues/12060">GH-12060</a> in <a href="https://github.com/php/php-src/commit/9658d9ada4">9658d9ada4</a></li>
</ul>

<h3 id="kamil-tekiela">Kamil Tekiela</h3>

<ul>
<li>Remove MySQL 4.1 checks in <a href="https://github.com/php/php-src/commit/83738fc9a4">83738fc9a4</a></li>
<li>Improve mysqli_character_set_name tests in <a href="https://github.com/php/php-src/commit/5f6bf3edd6">5f6bf3edd6</a></li>
</ul>

<h3 id="levi-morrison">Levi Morrison</h3>

<ul>
<li>Set func pointer to null in Closure __invoke in <a href="https://github.com/php/php-src/pull/12275">GH-12275</a></li>
</ul>

<h3 id="lewis-cowles">Lewis Cowles</h3>

<ul>
<li>ci: more verbose output in <a href="https://github.com/php/php-src/pull/12264">GH-12264</a></li>
</ul>

<h3 id="max-semenik">Max Semenik</h3>

<ul>
<li>Fix <a href="https://github.com/php/php-src/issues/12186">GH-12186</a>: segfault copying/cloning a finalized HashContext in <a href="https://github.com/php/php-src/commit/10f5a06d3c">10f5a06d3c</a></li>
</ul>

<h3 id="m%C3%A1t%C3%A9-kocsis-%F0%9F%92%9C">Máté Kocsis 💜</h3>

<ul>
<li>Fix predefined constant page synchonization in <a href="https://github.com/php/php-src/commit/cc2a68e588">cc2a68e588</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/12123">GH-12123</a> Make _ZEND_TYPE_PREFIX apply only for MSVC in <a href="https://github.com/php/php-src/commit/45c7e3b06b">45c7e3b06b</a></li>
<li>Fix type of the <code>PHP_FLOAT_DIG</code> constant in <a href="https://github.com/php/php-src/commit/58657ff26a">58657ff26a</a></li>
<li>Fix type of the <code>PHP_FLOAT_DIG</code> constant in <a href="https://github.com/php/php-src/commit/2fad7cdd60">2fad7cdd60</a></li>
<li>Improve detection of predefined constants in <a href="https://github.com/php/php-src/commit/2cb4d00693">2cb4d00693</a></li>
<li>Add support for verifying and syncronizing predefined constants with the manual in <a href="https://github.com/php/php-src/commit/0363dbfef4">0363dbfef4</a></li>
<li>Align class name detection to the new class synopsis format in <a href="https://github.com/php/php-src/commit/c5fb8b6a6b">c5fb8b6a6b</a></li>
</ul>

<h3 id="niels-dossche">Niels Dossche</h3>

<ul>
<li>Revert &quot;Fix <a href="https://github.com/php/php-src/issues/10008">GH-10008</a>: Narrowing occurred during type inference of <code>ZEND_ADD_ARRAY_ELEMENT</code>&quot; in <a href="https://github.com/php/php-src/commit/643c4ba417">643c4ba417</a></li>
<li>Fix compile error with -Werror=incompatible-function-pointer-types and old libxml2 in <a href="https://github.com/php/php-src/commit/df89409aba">df89409aba</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/10008">GH-10008</a>: Narrowing occurred during type inference of <code>ZEND_ADD_ARRAY_ELEMENT</code> in <a href="https://github.com/php/php-src/commit/e72fc12058">e72fc12058</a></li>
<li>Fix type error on <code>XSLTProcessor::transformToDoc</code> return value with SimpleXML in <a href="https://github.com/php/php-src/commit/2a7f23e9b9">2a7f23e9b9</a></li>
<li>Restore old namespace reconciliation behaviour in <a href="https://github.com/php/php-src/commit/e127f87114">e127f87114</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/11997">GH-11997</a>: ctype_alnum 5 times slower in PHP 8.1 or greater in <a href="https://github.com/php/php-src/commit/07811b6390">07811b6390</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/12297">GH-12297</a>: PHP Startup: Invalid library (maybe not a PHP library) &#039;mysqlnd.so&#039; in Unknown on line in <a href="https://github.com/php/php-src/commit/14fc3d1566">14fc3d1566</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/12167">GH-12167</a> and <a href="https://github.com/php/php-src/issues/12169">GH-12169</a>: Unable to get comment or processing instruction contents in SimpleXML in <a href="https://github.com/php/php-src/commit/82a84d0b7b">82a84d0b7b</a></li>
<li>Make sure core module has number 0 in <a href="https://github.com/php/php-src/pull/12272">GH-12272</a></li>
<li>Extend C14N fast path to HTML documents too in <a href="https://github.com/php/php-src/pull/12293">GH-12293</a></li>
<li>Remove unnecessary libxml2 version checks in <a href="https://github.com/php/php-src/commit/6a7b96529b">6a7b96529b</a></li>
<li>Add additional test for special cases for C14N in <a href="https://github.com/php/php-src/commit/916dedf7d7">916dedf7d7</a></li>
<li>Remove unnecessary invalidation in <a href="https://github.com/php/php-src/commit/554f659602">554f659602</a></li>
<li>Implement <a href="https://bugs.php.net/bug.php?id=53655">#53655</a>: Improve speed of DOMNode::C14N() on large XML documents in <a href="https://github.com/php/php-src/commit/5d68d61943">5d68d61943</a></li>
<li>Fix memory leak when calling <code>xml_parse_into_struct()</code> twice in <a href="https://github.com/php/php-src/commit/30f26b587a">30f26b587a</a></li>
<li>Fix return type of stub of <code>xml_parse_into_struct()</code> in <a href="https://github.com/php/php-src/commit/b1d9a8d321">b1d9a8d321</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/12215">GH-12215</a>: Module entry being overwritten causes type errors in <code>ext/dom</code> (PHP 8.4) in <a href="https://github.com/php/php-src/commit/8a812c3fda">8a812c3fda</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/12215">GH-12215</a>: Module entry being overwritten causes type errors in <code>ext/dom</code> (&lt;= PHP 8.3) in <a href="https://github.com/php/php-src/commit/da6097ffc8">da6097ffc8</a></li>
<li>Fix bug <a href="https://bugs.php.net/bug.php?id=55098">#55098</a>: SimpleXML iteration produces infinite loop in <a href="https://github.com/php/php-src/commit/1a4e401bf0">1a4e401bf0</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/11956">GH-11956</a>: PCRE regular expressions with JIT enabled gives different result in <a href="https://github.com/php/php-src/commit/d61efdfe97">d61efdfe97</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/12208">GH-12208</a>: SimpleXML infinite loop when a cast is used inside a foreach in <a href="https://github.com/php/php-src/commit/486276f0f9">486276f0f9</a></li>
<li>Simplify <code>php_sxe_count_elements_helper()</code> by using non-destructive iterator reset in <a href="https://github.com/php/php-src/commit/8f9626c0f7">8f9626c0f7</a></li>
<li>Add a test case for iterator and empty &amp; var_dump interactions in <a href="https://github.com/php/php-src/commit/fe98a16af7">fe98a16af7</a></li>
<li>Use <code>php_sxe_reset_iterator_no_clear_iter_data()</code> to avoid having to store and restore iterator data in <a href="https://github.com/php/php-src/commit/550ec29821">550ec29821</a></li>
<li>Remove unnecessary _IS_BOOL case in <a href="https://github.com/php/php-src/pull/12230">GH-12230</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/12223">GH-12223</a>: Entity reference produces infinite loop in var_dump/print_r in <a href="https://github.com/php/php-src/commit/39a9e561f9">39a9e561f9</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/12192">GH-12192</a>: SimpleXML infinite loop when getName() is called within foreach in <a href="https://github.com/php/php-src/commit/4d888cf53f">4d888cf53f</a></li>
<li>Simplify node check in simplexml in <a href="https://github.com/php/php-src/commit/0fee720173">0fee720173</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/12170">GH-12170</a>: Can&#039;t use xpath with comments in SimpleXML in <a href="https://github.com/php/php-src/commit/747335f100">747335f100</a></li>
<li>Small optimization in <code>php_sxe_get_first_node()</code> by avoiding unwrapping iterator data in <a href="https://github.com/php/php-src/pull/12194">GH-12194</a></li>
<li>Fix <a href="https://bugs.php.net/bug.php?id=52751">#52751</a>: XPath processing-<code>instruction()</code> function is not supported in <a href="https://github.com/php/php-src/commit/107443b311">107443b311</a></li>
<li>Deduplicate ParentNode and ChildNode interface implementations using @implementation-alias in <a href="https://github.com/php/php-src/commit/f2fede56c8">f2fede56c8</a></li>
<li>Remove useless SKIP_TEXT() invokes in <a href="https://github.com/php/php-src/pull/12164">GH-12164</a></li>
<li>Preallocate result array size in simplexml xpath in <a href="https://github.com/php/php-src/commit/d18bab5562">d18bab5562</a></li>
<li>Remove obsolete libxml2 code in <a href="https://github.com/php/php-src/commit/0ea268b51a">0ea268b51a</a></li>
<li>Use <code>zend_get_gc_buffer_add_fcc()</code> in <a href="https://github.com/php/php-src/commit/49980ee89d">49980ee89d</a></li>
<li>Fix build with sqlite3 gc and fci/fcc api in <a href="https://github.com/php/php-src/commit/1d59b37742">1d59b37742</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/11878">GH-11878</a>: SQLite3 callback functions cause a memory leak with a callable array in <a href="https://github.com/php/php-src/commit/07a9d2fb32">07a9d2fb32</a></li>
<li>Add <code>DOMNode::compareDocumentPosition()</code> in <a href="https://github.com/php/php-src/pull/12146">GH-12146</a></li>
<li>Replace always-false attribute type check with assertion in <a href="https://github.com/php/php-src/commit/8c2c69494e">8c2c69494e</a></li>
<li>Update bundled pcre2 to 10.42 in <a href="https://github.com/php/php-src/commit/c4e8f652c5">c4e8f652c5</a></li>
<li>Remove DOM_NO_ARGS() and DOM_NOT_IMPLEMENTED() in <a href="https://github.com/php/php-src/pull/12147">GH-12147</a></li>
<li>Tweak behaviour of dynamic properties wrt error handlers in <a href="https://github.com/php/php-src/commit/eee1617f38">eee1617f38</a></li>
<li>Use <code>zend_result</code> as return for properties in <code>ext/dom</code> in <a href="https://github.com/php/php-src/pull/12113">GH-12113</a></li>
<li>Preallocate result array size in xpath in <a href="https://github.com/php/php-src/pull/12105">GH-12105</a></li>
<li>Add XPath tests for basic types in <a href="https://github.com/php/php-src/commit/7be47953a3">7be47953a3</a></li>
<li>Add XPath test with a context node in <a href="https://github.com/php/php-src/commit/07c688f224">07c688f224</a></li>
</ul>

<h3 id="peter-kokot">Peter Kokot</h3>

<ul>
<li>Remove _IO_cookie_io_functions_t in favor of cookie_io_functions_t in <a href="https://github.com/php/php-src/commit/abed8b8e41">abed8b8e41</a></li>
<li>Fix too many arguments in FPM ACL compile check in <a href="https://github.com/php/php-src/pull/12242">GH-12242</a></li>
<li>Remove unused <code>--with-zlib-dir</code> configure option in <a href="https://github.com/php/php-src/commit/a8e1b1018d">a8e1b1018d</a></li>
<li>Remove unneeded <code>zend_language_parser.h</code> patch in <a href="https://github.com/php/php-src/pull/12178">GH-12178</a></li>
</ul>

<h3 id="remi-collet">Remi Collet</h3>

<ul>
<li>Fix port conflict 64324 used in <code>bug51056.phpt</code> in <a href="https://github.com/php/php-src/commit/80266f80d4">80266f80d4</a></li>
<li>zip: add new test for dynamic files in <a href="https://github.com/php/php-src/commit/57123ee489">57123ee489</a></li>
<li>also display PHP version in phpize in <a href="https://github.com/php/php-src/commit/c3c4b5356a">c3c4b5356a</a></li>
<li>ensure displays_errors is off (default) in <a href="https://github.com/php/php-src/commit/1f2cfd8009">1f2cfd8009</a></li>
</ul>

<h3 id="thomas-hurst">Thomas Hurst</h3>

<ul>
<li>Fix <a href="https://github.com/php/php-src/issues/12273">GH-12273</a> - configure __builtin_cpu_init() check in <a href="https://github.com/php/php-src/commit/66a33dbdce">66a33dbdce</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/12273">GH-12273</a> - configure __builtin_cpu_init() check in <a href="https://github.com/php/php-src/commit/d93800ec0f">d93800ec0f</a></li>
</ul>

<h3 id="tim-d%C3%BCsterhus">Tim Düsterhus</h3>

<ul>
<li>abs: Make <code>value == ZEND_LONG_MIN</code> an unexpected branch in <a href="https://github.com/php/php-src/commit/9e66bc9b97">9e66bc9b97</a></li>
<li>round: Make <code>fractional == 0.5</code> an unexpected branch in <a href="https://github.com/php/php-src/commit/865535267b">865535267b</a></li>
<li>Unify type juggling in <code>math.c</code> in <a href="https://github.com/php/php-src/pull/12286">GH-12286</a></li>
<li>UPGRADING: Move the validation of the rounding mode to Backward Incompatible Changes in <a href="https://github.com/php/php-src/commit/659c06d4c9">659c06d4c9</a></li>
<li><code>round()</code>: Validate the rounding mode in <a href="https://github.com/php/php-src/pull/12252">GH-12252</a></li>
<li>Reimplement <code>php_round_helper()</code> using <code>modf()</code> in <a href="https://github.com/php/php-src/pull/12220">GH-12220</a></li>
<li>Fix #[Override] on traits overriding a parent method without a matching interface in <a href="https://github.com/php/php-src/pull/12205">GH-12205</a></li>
<li>Show the integer size in <code>phpinfo()</code> in <a href="https://github.com/php/php-src/pull/12201">GH-12201</a></li>
<li>Add abstract __construct() test for #[\Override] (024.phpt) in <a href="https://github.com/php/php-src/commit/0e9d658dd2">0e9d658dd2</a></li>
<li>Update GitHub Action workflows to <code>actions/checkout@v4</code> (8.3+) in <a href="https://github.com/php/php-src/commit/99cd81cd0a">99cd81cd0a</a></li>
<li>Update GitHub Action workflows to <code>actions/checkout@v4</code> in <a href="https://github.com/php/php-src/commit/45e60e585e">45e60e585e</a></li>
</ul>

<h3 id="twosee">twosee</h3>

<ul>
<li>Fix <code>socket_export_stream()</code> with wrong protocol in <a href="https://github.com/php/php-src/commit/b5da98b972">b5da98b972</a></li>
</ul>

</details>

<p><br>
We are incredibly grateful for the commitment and dedication of all contributors. Stay tuned for next month's roundup as we continue to make PHP better together.</p>

<p><br></p>

<hr />

<h2 id="support-php-foundation">Support PHP Foundation</h2>

<p>At PHP Foundation, we support, promote, and advance the PHP language. We financially support six part-time PHP core developers to contribute to the PHP project. You can help support PHP Foundation at <a href="https://opencollective.com/phpfoundation">OpenCollective</a> or via <a href="https://github.com/sponsors/ThePHPF">GitHub Sponsors</a>.</p>

<p>A big thanks to all our sponsors — PHP Foundation is all of us!</p>

<p>Follow us on Twitter <a href="https://twitter.com/thephpf">@ThePHPF</a> to get the latest updates from the Foundation.</p>

<p>💜️ 🐘</p>

<blockquote>
  <p>PHP Roundup is prepared by Ayesh Karunaratne from <strong><a href="https://php.watch">PHP.Watch</a></strong>, a source for PHP News, Articles, Upcoming Changes, and more.</p>
</blockquote>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[We Are Looking for Developers to Join the PHP Foundation]]></title>
            <link href="https://thephp.foundation/blog/2023/09/06/application-form-2023/"/>
            <updated>2023-09-06T00:00:00+00:00</updated>
            <id>https://thephp.foundation/blog/2023/09/06/application-form-2023/</id>
            <content type="html"><![CDATA[<p>Working on an open-source project which is used by millions of developers and which is trusted by hundreds of thousands of businesses around the world. Getting paid for this work and not having a burnout. Sounds like a dream, doesn't it? But this is exactly the opportunity that the PHP Foundation provides to those who would like to develop and maintain the PHP language.</p>

<p>The PHP Foundation is a non-profit organization, started in 2021 by Acquia, Automattic, Craft CMS, JetBrains, Laravel, PrestaShop, Private Packagist, Symfony, Tideways, and Zend by Perforce with a mission to support, advance, and develop the PHP language.</p>

<p>Since April 2022, the foundation pays <a href="https://thephp.foundation/structure/#core_developers">six developers</a> to work on the language. See what the foundation accomplished in 2022 in the <a href="https://thephp.foundation/blog/2022/11/22/transparency-and-impact-report-2022/">Impact and transparency report</a>.</p>

<h2 id="we-are-opening-applications-for-new-positions-at%26nbsp%3Bthe%26nbsp%3Bphp%26nbsp%3Bfoundation">We are opening applications for new positions at&nbsp;the&nbsp;PHP&nbsp;Foundation</h2>

<p>The PHP Foundation is almost two years old, and we are gradually introducing structure into our activities and organizing processes. We’re opening a new round of applications for developer positions. We plan to open applications every September from now on, so if you are unable to apply now, you will have another chance next year. We intend to decide on who we will hire by the end of October. If selected, you would start your work January 1st, 2024.</p>

<p>The application form will be <strong>open until September 30, 2023</strong>.</p>

<p style="text-align: center;">
<a href="https://forms.gle/Ji7Vvj1y2bMf9pUz7" class="inline-block py-2 no-underline px-6 !text-white bg-[#7f52ff] rounded-3xl hover:bg-[rgba(127,82,255,.8)]">Apply</a>
</p>

<div class="alert">
    <span class="inline-block font-bold">Note: This is not a job for PHP developers or aspiring PHP developers.</span><br> 
The development of PHP is done in the С programming language, and requires proficiency in system programming.
</div>

<h2 id="what-are-the-requirements%3F">What are the requirements?</h2>

<p>As before, we require previous experience in PHP core development. Ideally you should have all, but at least some of the following:</p>

<ul>
<li>Pull-requests / commits to <a href="https://github.com/php/php-src/">php/php-src</a></li>
<li>Experience in writing PHP extensions</li>
<li>Participation in PHP mailing lists</li>
<li>Contributions to other open-source projects</li>
</ul>

<p>This time, however, we have a clearer idea of the tasks that can be engaged in and so the pool of considered candidates will be wider.</p>

<h2 id="what-am-i-going-to-work-on%3F">What am I going to work on?</h2>

<p>Strategic areas we’d like you to work on:</p>

<ul>
<li>Security</li>
<li>Performance</li>
<li>Infrastructure</li>
<li>Web APIs (json, PDO, streams, etc.)</li>
<li>Documentation</li>
</ul>

<p>This is not an exhaustive list, and if you would like to do something else, make sure to mention it in the form. The main criteria is a pragmatic approach. In this sense, we adhere to the position that Rasmus&nbsp;Lerdorf, the author of PHP, voiced back in 2014:</p>

<pre><code class="Text">And rather than piling on language features with the main justification
being that other languages have them, I would love to see more focus on
practical solutions to real problems. The password_hash() addition in
5.5 is a good example of addressing a real Web problem.
…
I know these are much harder and less sexy than adding a couple
of tokens to the yacc grammar, but when we start looking at a new major
release this is what I hear from people who are running PHP in
production environments are looking for. Language features are nice, if
they are well thought out, but significant infrastructure improvements
are nicer.
</code></pre>

<p><em><a href="https://news-web.php.net/php.internals/71525">https://news-web.php.net/php.internals/71525</a></em></p>

<h2 id="what-does-working-for-the-php-foundation-look-like%3F">What does working for the PHP foundation look like?</h2>

<p>Working for the PHP Foundation offers a lot of freedom, but it also requires discipline. Your work will roughly consist of the following:</p>

<ul>
<li>40% Triaging issues and fixing bugs</li>
<li>30% Working on strategic areas</li>
<li>20% Code reviews</li>
<li>10% Preparing RFCs and developing new language features</li>
</ul>

<p>As you can see, developing new RFCs is a fairly small part of the job. Most of the work is a typical maintenance of an open source project.</p>

<p>We are a fully distributed team. You can work from any place* and at any time. All communication is asynchronous via GitHub, Slack, and Email. We meet for synchronous calls 1-2 times a month.</p>

<p><em><strong>&#42;</strong> We do not consider applications from persons residing in sanctioned territories.</em></p>

<p>Your work should be in line with the foundation’s mission statement, and we expect you to follow <a href="https://thephp.foundation/code-of-conduct/">the code of conduct</a>.</p>

<blockquote>
  <p><strong>PHP Foundation Mission Statement</strong></p>
  
  <p>The PHP Foundation is a collective of people and organizations relying on the PHP language. Its mission is to ensure the long-term prosperity of the PHP language. The PHP Foundation focuses on providing financial support and guidance to PHP language developers to support its goals of improving the language for its users, providing high-quality maintenance, and improving the PHP language project to retain current contributors and to integrate new contributors. The PHP Foundation aims to promote the public image of the PHP language in the interest of retaining existing and gaining new users and contributors.</p>
</blockquote>

<h2 id="how-to-apply%3F">How to apply?</h2>

<p>Submit your application now and we will get back to you shortly. If you have any questions or suggestions, reach out to contact@thephp.foundation.</p>

<p style="text-align: center;">
<a href="https://forms.gle/Ji7Vvj1y2bMf9pUz7" target="_blank" class="inline-block py-2 no-underline px-6 !text-white bg-[#7f52ff] rounded-3xl hover:bg-[rgba(127,82,255,.8)]">Open submission form</a>
</p>

<iframe src="https://docs.google.com/forms/d/e/1FAIpQLSeYNVQoK2r9c6EtoMnDaIpLzDc95egt1a1mcfiHTovqMDhFuw/viewform?embedded=true" width="100%" height="1693" frameborder="0" marginheight="0" marginwidth="0">Loading…</iframe>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP Core Roundup #16]]></title>
            <link href="https://thephp.foundation/blog/2023/09/01/php-core-roundup-16/"/>
            <updated>2023-09-01T00:00:00+00:00</updated>
            <id>https://thephp.foundation/blog/2023/09/01/php-core-roundup-16/</id>
            <content type="html"><![CDATA[<p>Welcome back to <a href="/blog/tag/roundup/">PHP Core Roundup</a> series! This is post #16, where we highlight and celebrate the improvements made to PHP during the month past by the PHP development team, members of the PHP Foundation, and more.</p>

<blockquote>
  <p>The PHP Foundation is a collective of PHP contributors, veterans, and companies that collaborate to ensure the long-term sustainability of the PHP programming language. The foundation currently supports six contributors focused on PHP's maintenance, debt reduction, and feature development. These contributors work closely with others on coding, documentation, and discussions.</p>
  
  <p>Started over a year ago, the PHP Core Roundup series offers a summary of the latest developments, discussions, and news about PHP Core, contributed by both PHP Foundation members and other participants. This post is the thirteenth in the PHP Core Roundup series.</p>
</blockquote>

<p><div class="px-4 pt-3 border-b border-t -mx-4 border-gray-200">
    <div class="bg-white py-8">
        <div class="mx-auto grid max-w-7xl grid-cols-1 gap-10 lg:grid-cols-12 lg:gap-8">
            <div class="max-w-xl text-4xl font-medium tracking-tight text-gray-900 lg:col-span-6">
                Subscribe to PHP Core Roundup newsletter
            </div>
            <form method="POST"
                  action="https://php-foundation.mailcoach.app/subscribe/9be4e2bd-f9d8-475c-b00e-2dcc4cf90056"
                  class="w-full max-w-md lg:col-span-6">
                <div class="flex gap-x-4">
                    <label for="email-address" class="sr-only">Email address</label>
                    <input id="email-address" name="email" type="email" autocomplete="email" required
                           class="min-w-0 flex-auto rounded-md border-0 px-3.5 py-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                           placeholder="Enter your email">
                    <button type="submit"
                            class="inline-block py-2 no-underline px-6 !text-white bg-[#7f52ff] rounded-3xl hover:bg-[rgba(127,82,255,.8)]">
                        Subscribe
                    </button>
                </div>
                <div class="mt-4 text-sm leading-6 text-gray-900">
                    We care about your data.
                    Read our <a href="https://thephp.foundation/privacy-policy"
                                class="font-semibold text-indigo-600 hover:text-indigo-500 no-underline">privacy policy</a>.
                </div>
            </form>
        </div>
    </div>
</div>
</p>

<h2 id="php-8.3-branching-out">PHP 8.3 Branching Out</h2>

<p>PHP 8.3 has reached its <a href="/blog/2023/08/01/php-core-roundup-15/#php-8.3-feature-freeze">feature-freeze</a>, and <a href="/blog/2023/05/02/php-core-roundup-12/#php-8.3-release-managers-elected">release managers</a> branched out the PHP-8.3 branch on August 31.</p>

<p>Now that PHP 8.3 is in a separate branch, the <code>master</code> branch will be the development source for PHP 8.4. Bug fixes and other improvements will be cherry-picked for PHP 8.3 (and older branches) as appropriate, but new features that are made to the master branch will not be merged to the PHP 8.3 branch.</p>

<p>Tools that build PHP based on the Git branches will also see a new branch, and the builds from the <code>master</code> branch will be named “PHP 8.4” for the first time.</p>

<h2 id="releases">Releases</h2>

<p>The PHP development team released five new versions in August 2023:</p>

<p><strong><a href="https://www.php.net/archive/2023.php#2023-08-31-2">PHP 8.2.10</a></strong> and <strong><a href="https://www.php.net/archive/2023.php#2023-08-31-3">PHP 8.1.23</a></strong></p>

<p>These releases include several bug fixes and improvements, notably in areas such as CLI, Date, Core, DOM, FFI, Hash, MySQLnd, Opcache, PCNTL, SPL, and Standard.</p>

<p><strong><a href="https://www.php.net/archive/2023.php#2023-08-16-1">PHP 8.2.9</a></strong>, <strong><a href="https://www.php.net/archive/2023.php#2023-08-03-1">PHP 8.1.22</a></strong>, and <strong><a href="https://www.php.net/archive/2023.php#2023-08-04-1">PHP 8.0.30</a></strong></p>

<p>All three include security fixes: <a href="https://github.com/php/php-src/security/advisories/GHSA-3qrf-m4j2-pcrr">GHSA-3qrf-m4j2-pcrr</a> and <a href="https://github.com/php/php-src/security/advisories/GHSA-jqcx-ccgc-xwhv">GHSA-jqcx-ccgc-xwhv</a>.</p>

<p>PHP 8.2.9 and PHP 8.1.22 additionally include several bug fixes and improvements, notably in areas such as Build, CLI, Core, Curl, Date, DOM, Fileinfo, FTP, GD, Intl, MBString, Opcache, PCNTL, PDO, PDO SQLite, Phar, PHPDBG, Session, Standard, Streams, SQLite3, and XMLReader.</p>

<h2 id="recent-rfcs-and-mailing-list-discussions">Recent RFCs and Mailing List Discussions</h2>

<blockquote>
  <p>Changes and improvements to PHP are discussed, reported, and voted on by the PHP Foundation Team, the PHP development team, and contributors. Bug reports are made to the PHP <a href="https://github.com/php/php-src/issues">issue tracker</a>, changes are discussed in <a href="https://www.php.net/mailing-lists.php">mailing lists</a>, minor code changes are proposed as <a href="https://github.com/php/php-src/issues">pull requests</a>, and major changes are discussed in detail and voted on as <a href="https://wiki.php.net/rfc">PHP RFCs</a>. <a href="https://github.com/php/doc-en/">Documentation</a> and the <a href="https://github.com/php/web-php">php.net website</a> changes are also discussed and improved at their relevant Git repositories on GitHub.</p>
</blockquote>

<p><br>
Hundreds of awesome PHP contributors put their efforts into improvements to the PHP code base, documentation, and the php.net website. Here is a summary of some changes made by the people behind PHP. Things marked with 💜 are done by the PHP Foundation team.</p>

<h2 id="rfc-updates">RFC Updates</h2>

<h3 id="in-voting%3A-support-optional-suffix-parameter-in-tempnam-by-athos-ribeiro">In Voting: <a href="https://wiki.php.net/rfc/tempnam-suffix-v2">Support optional suffix parameter in tempnam</a> by Athos Ribeiro</h3>

<p>RFC proposes to add a new optional suffix parameter to the <code>tempnam()</code> function.</p>

<p>A suffix could provide even more semantic value or context for a user inspecting the generated files, and, in specific situations, could even provide more context for software processing such files. Right now, users can only add a prefix.</p>

<h3 id="merging-postponed%3A-pdo-driver-specific-sub-classes-by-danack">Merging postponed: <a href="https://wiki.php.net/rfc/pdo_driver_specific_subclasses">PDO driver specific sub-classes</a> by Danack</h3>

<p>This RFC proposed to introduce driver-specific <code>\PDO</code> sub-classes so applications can granular declare the specific PDO drivers they support.</p>

<p>This RFC vote was completed and accepted unanimously, but due to the implementation complexity, the changes for this RFC were not finalized before the PHP 8.3.0RC1 release. Because PHP 8.3 is beyond its feature-freeze and now that the first release candidate is released, the consensus seems to be that this RFC will not be implemented in PHP 8.3 but on the next PHP version.</p>

<p><br></p>

<h2 id="documentation">Documentation</h2>

<p>While PHP 8.3 has moved to the RC cycle, the documentation available on <a href="https://php.net">php.net</a>, requires updating.</p>

<p>Gina P. Banyard 💜 has triaged issues in the docs and marked several of them as "good first time", which are ideal easy picks if you would like to start contributing to PHP docs. You can find the full list on <a href="https://github.com/php/doc-en/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22">GitHub</a>.</p>

<p>To make it easier to view the results of changes locally, Anna Filina has prepared a Docker Compose set-up. <a href="https://github.com/php/doc-en/pull/2638">Check it out</a>.</p>

<p><br></p>

<h2 id="merged-prs-and-commits">Merged PRs and Commits</h2>

<p>Following are some changes that did not go through an RFC process because they are either planned, bug fixes, or progressive enhancements.</p>

<hr />

<h3 id="full-list-of-commits--since-php-core-roundup-%2315">Full list of commits  since <a href="/blog/2023/08/01/php-core-roundup-15/">PHP Core Roundup #15</a></h3>

<p>Commits are in the order they were added, grouped by author in alphabetical order.</p>

<details>

<summary>Click here to expand</summary>

<h3 id="alexandre-daubois">Alexandre Daubois</h3>

<ul>
<li>Improve <code>ext/pdo_sqlite</code> tests cleanup in <a href="https://github.com/php/php-src/pull/11900">GH-11900</a></li>
<li><code>ext/pdo_pgsql</code>: Improve tests cleanup in <a href="https://github.com/php/php-src/pull/11855">GH-11855</a></li>
<li>Improve database naming in <code>ext/pdo_pgsql</code> for better para-tests in <a href="https://github.com/php/php-src/pull/11872">GH-11872</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/10964">GH-10964</a>: Improve <code>man</code> page about the built-in server in <a href="https://github.com/php/php-src/commit/997a36750b">997a36750b</a></li>
</ul>

<h3 id="alex-dowad">Alex Dowad</h3>

<ul>
<li>Improve <code>mb_detect_encoding</code> accuracy for text containing vowels with macrons in <a href="https://github.com/php/php-src/commit/81faab9235">81faab9235</a></li>
<li>Print host CPU and installed package info in CI build log on Linux in <a href="https://github.com/php/php-src/commit/fd462b1e0f">fd462b1e0f</a></li>
</ul>

<h3 id="arne_">Arne_</h3>

<ul>
<li>Allow easter_date to process years after 2037 on 64bit systems in <a href="https://github.com/php/php-src/pull/11862">GH-11862</a></li>
</ul>

<h3 id="athos-ribeiro">Athos Ribeiro</h3>

<ul>
<li>Fix off-by-one bug when truncating tempnam prefix in <a href="https://github.com/php/php-src/commit/cbfd73765a">cbfd73765a</a></li>
</ul>

<h3 id="ayesh-karunaratne">Ayesh Karunaratne</h3>

<ul>
<li>Add class constant types to Phar extension in <a href="https://github.com/php/php-src/pull/11826">GH-11826</a></li>
<li>gen_stub: fix regexps with unintentional range due to <code>-</code> character placement in <a href="https://github.com/php/php-src/pull/12004">GH-12004</a></li>
<li>[skip-ci] minor typo fixes in UPGRADING and CONTRIBUTING.md in <a href="https://github.com/php/php-src/pull/11976">GH-11976</a></li>
<li>Fix DateTime exception hierarchy for DateInvalidTimeZoneException in <a href="https://github.com/php/php-src/pull/11970">GH-11970</a></li>
</ul>

<h3 id="bob-weinand">Bob Weinand</h3>

<ul>
<li>Address CR comments in <a href="https://github.com/php/php-src/commit/b07a2d4714">b07a2d4714</a></li>
<li>Track HashTableIterators for copy-on-write copies of HashTables in <a href="https://github.com/php/php-src/commit/cd53ce838a">cd53ce838a</a></li>
</ul>

<h3 id="cristian-rodr%C3%ADguez">Cristian Rodríguez</h3>

<ul>
<li>Use a single version of strnlen  in <a href="https://github.com/php/php-src/pull/12015">GH-12015</a></li>
<li>Use <code>zend_ast_size</code> consistenly in <a href="https://github.com/php/php-src/pull/11955">GH-11955</a></li>
</ul>

<h3 id="david-carlier">David CARLIER</h3>

<ul>
<li><code>zend_call_stack_default_size</code> update BSD values. in <a href="https://github.com/php/php-src/pull/12051">GH-12051</a></li>
<li>libxml set error structure simplification proposal in <a href="https://github.com/php/php-src/pull/12054">GH-12054</a></li>
<li>ci update freebsd image to the 13.2 image in <a href="https://github.com/php/php-src/pull/11110">GH-11110</a></li>
<li><code>ext/iconv</code>: fix build for netbsd in <a href="https://github.com/php/php-src/commit/fc8d5c72e5">fc8d5c72e5</a></li>
</ul>

<h3 id="derick-rethans-%F0%9F%92%9C">Derick Rethans 💜</h3>

<ul>
<li>Update initialisation check for new PHP-8.3 API in <a href="https://github.com/php/php-src/commit/e157da11f3">e157da11f3</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/11416">GH-11416</a>: Crash with DatePeriod when uninitialised objects are passed in (PHP 8.2+) in <a href="https://github.com/php/php-src/commit/b71d2e16e6">b71d2e16e6</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/11416">GH-11416</a>: Crash with DatePeriod when uninitialised objects are passed in in <a href="https://github.com/php/php-src/commit/4833b84854">4833b84854</a></li>
<li>Fixed bug <a href="https://github.com/php/php-src/issues/11854">GH-11854</a> (DateTime:createFromFormat stopped parsing datetime with extra space) in <a href="https://github.com/php/php-src/commit/a8f4171655">a8f4171655</a></li>
<li>Import timelib 2022.09 in <a href="https://github.com/php/php-src/commit/851890bd9c">851890bd9c</a></li>
</ul>

<h3 id="dmitry-stogov">Dmitry Stogov</h3>

<ul>
<li>Fixed incorrect tracked malloc deallocation in <a href="https://github.com/php/php-src/commit/4553258df3">4553258df3</a></li>
</ul>

<h3 id="filip-zr%C5%AFst">Filip Zrůst</h3>

<ul>
<li>Remove CPP when invoking dtrace utility in <a href="https://github.com/php/php-src/commit/02b3fb1f6b">02b3fb1f6b</a></li>
</ul>

<h3 id="gina-peter-banyard-%F0%9F%92%9C">Gina Peter Banyard 💜</h3>

<ul>
<li>Fix <a href="https://github.com/php/php-src/issues/11876">GH-11876</a>: <code>ini_parse_quantity()</code> accepts invalid quantities in <a href="https://github.com/php/php-src/commit/d229a480ad">d229a480ad</a></li>
<li>Fix various bugs related to DNF types in <a href="https://github.com/php/php-src/commit/02a80c5b82">02a80c5b82</a></li>
<li>Fix <code>skipif</code> condition on new test in <a href="https://github.com/php/php-src/commit/4cbc66d5e6">4cbc66d5e6</a></li>
<li>ext/<code>zend_test</code>: Move object handler test objects to their own file in <a href="https://github.com/php/php-src/pull/11852">GH-11852</a></li>
<li>Zend: Fix memory leak in ++/-- when overloading fetch access in <a href="https://github.com/php/php-src/commit/fc3df283fb">fc3df283fb</a></li>
<li>Fix OSS Fuzz <a href="https://bugs.php.net/bug.php?id=60734">#60734</a>: use-after-free visible in ASAN build in <a href="https://github.com/php/php-src/commit/2fbec0974f">2fbec0974f</a></li>
<li>Fix OSS-fuzz <a href="https://bugs.php.net/bug.php?id=60709">#60709</a> unseting op via globals in <a href="https://github.com/php/php-src/commit/6ae9cf40d1">6ae9cf40d1</a></li>
</ul>

<h3 id="hypemc">HypeMC</h3>

<ul>
<li>Add before_needle argument to <code>strrchr()</code> in <a href="https://github.com/php/php-src/commit/f25474f7f2">f25474f7f2</a></li>
</ul>

<h3 id="ilija-tovilo-%F0%9F%92%9C">Ilija Tovilo 💜</h3>

<ul>
<li>Increase <code>run-tests.php</code> timeout for asan in <a href="https://github.com/php/php-src/commit/f4a6a6d096">f4a6a6d096</a></li>
<li>Skip dl() tests on ASAN in <a href="https://github.com/php/php-src/commit/fb0f4215de">fb0f4215de</a></li>
<li>Make unrepeatable tests retriable in <a href="https://github.com/php/php-src/commit/f2c16b7ba3">f2c16b7ba3</a></li>
<li>Fix variable resource ids in odbc test in <a href="https://github.com/php/php-src/commit/d1a38e8b8e">d1a38e8b8e</a></li>
<li>Fix missing instantclient in CI in <a href="https://github.com/php/php-src/commit/f3bd027b69">f3bd027b69</a></li>
<li>Fix type macros for C++ in <a href="https://github.com/php/php-src/commit/5ad658bc5e">5ad658bc5e</a></li>
<li>Switch asan build to Ubuntu 23.04 in Docker in <a href="https://github.com/php/php-src/commit/c9e5e1fc52">c9e5e1fc52</a></li>
<li>Move installation of oracle instant client in GHA in <a href="https://github.com/php/php-src/commit/ba07a0b846">ba07a0b846</a></li>
<li>Make <code>php_cli_server_pdeathsig.phpt</code> <code>SKIPIF</code> more specific in <a href="https://github.com/php/php-src/commit/bad5298707">bad5298707</a></li>
<li>Remove redundant condition in <a href="https://github.com/php/php-src/commit/dd01c74a6f">dd01c74a6f</a></li>
<li>Fix segfault in format_default_value due to unexpected enum/object in <a href="https://github.com/php/php-src/commit/f78d1d0d10">f78d1d0d10</a></li>
<li>Use per-branch matrix for windows nightly in <a href="https://github.com/php/php-src/commit/902d39d57c">902d39d57c</a></li>
<li>Fix uouv on oom on object allocation in <a href="https://github.com/php/php-src/commit/ee000ea186">ee000ea186</a></li>
<li>Remove i386 Linux from push in <a href="https://github.com/php/php-src/commit/248e6b0404">248e6b0404</a></li>
<li>Add Windows build to nightly in <a href="https://github.com/php/php-src/commit/90f514cf21">90f514cf21</a></li>
<li>Fix EXPECT for <code>bug52820.phpt</code> on newer curl versions in <a href="https://github.com/php/php-src/commit/0e843c5d82">0e843c5d82</a></li>
<li>Fix <code>curl_basic_009.phpt</code> for newer curl versions in <a href="https://github.com/php/php-src/commit/3af76b2302">3af76b2302</a></li>
<li>Move ASAN built to GitHub actions in <a href="https://github.com/php/php-src/commit/fc9266a5fc">fc9266a5fc</a></li>
<li>Move opnum_start for goto for clarification in <a href="https://github.com/php/php-src/pull/11911">GH-11911</a></li>
<li>Revert &quot;Call cast_object handler from get_properties_for&quot; in <a href="https://github.com/php/php-src/commit/efc73f24c3">efc73f24c3</a></li>
<li>Don&#039;t test macOS &amp; i386 without opcache on push in <a href="https://github.com/php/php-src/commit/5cd0208e9f">5cd0208e9f</a></li>
<li>Assert ptr_ptr value of TMP|CONST isn&#039;t used in <a href="https://github.com/php/php-src/pull/11865">GH-11865</a></li>
<li>Add typed specialization for <code>ZEND_COUNT</code> in <a href="https://github.com/php/php-src/pull/11825">GH-11825</a></li>
<li>Synchronize <code>zend_jit_stop_counter_handlers()</code> in <a href="https://github.com/php/php-src/commit/b80bebc278">b80bebc278</a></li>
<li>Add block size support for tracked_malloc in <a href="https://github.com/php/php-src/pull/11856">GH-11856</a></li>
<li>Fix use-of-uninitialized-value in start_fake_frame in <a href="https://github.com/php/php-src/commit/ed27d70d9a">ed27d70d9a</a></li>
<li>Unpoison opcache mem buf for file cache checksum calc in <a href="https://github.com/php/php-src/commit/35862641ba">35862641ba</a></li>
<li>Remove <code>opcache.c</code>onsistency_checks in <a href="https://github.com/php/php-src/commit/b2dbf0a2c6">b2dbf0a2c6</a></li>
<li>Fix zend/test arginfo stub hash in <a href="https://github.com/php/php-src/commit/e61dbe54e9">e61dbe54e9</a></li>
</ul>

<h3 id="jakub-zelenka-%F0%9F%92%9C">Jakub Zelenka 💜</h3>

<ul>
<li>Use version of PHP SDK binary tools that uses PHP downloads in <a href="https://github.com/php/php-src/pull/12085">GH-12085</a></li>
<li>Remove incorrectly updated dtrace change from NEWS in <a href="https://github.com/php/php-src/commit/760367dd70">760367dd70</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/12077">GH-12077</a>: Check lsof functionality in socket on close test in <a href="https://github.com/php/php-src/commit/fe30c5098f">fe30c5098f</a></li>
<li>Fix FPM UDS test for very long name check by extending its length in <a href="https://github.com/php/php-src/commit/ea87501aee">ea87501aee</a></li>
<li>Extend workflow matrix and nighly with PHP-8.3 in <a href="https://github.com/php/php-src/commit/300ad65c7c">300ad65c7c</a></li>
<li>Start PHP 8.4 development cycle in <a href="https://github.com/php/php-src/commit/7deb84b7a6">7deb84b7a6</a></li>
<li>Update API versions and numbers in <a href="https://github.com/php/php-src/commit/2eb21b0b1e">2eb21b0b1e</a></li>
<li>Small tyding up of filestat code in <a href="https://github.com/php/php-src/commit/4e7ab1478d">4e7ab1478d</a></li>
<li>Expand file path in file stat only for wrapper path in <a href="https://github.com/php/php-src/pull/12068">GH-12068</a></li>
<li>Fix bug <a href="https://bugs.php.net/bug.php?id=76857">#76857</a>: Can read &quot;non-existant&quot; files in <a href="https://github.com/php/php-src/commit/766cac072f">766cac072f</a></li>
<li>Fix bug <a href="https://bugs.php.net/bug.php?id=52335">#52335</a> (<code>fseek()</code> on memory stream behavior different then file) in <a href="https://github.com/php/php-src/commit/ba9650d697">ba9650d697</a></li>
<li>Fix flaky file stat tests due to changing nature of atime in <a href="https://github.com/php/php-src/commit/e1396a314d">e1396a314d</a></li>
<li>Format UPGRADING in <a href="https://github.com/php/php-src/commit/10e16347ef">10e16347ef</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/11982">GH-11982</a>: str_getcsv returns null byte for unterminated quoted string in <a href="https://github.com/php/php-src/commit/aff46d75e1">aff46d75e1</a></li>
<li>FPM tester FastCGI client transport in <a href="https://github.com/php/php-src/pull/11764">GH-11764</a></li>
<li>Introduce Zend guard recursion protection in <a href="https://github.com/php/php-src/commit/53aa53f42f">53aa53f42f</a></li>
</ul>

<h3 id="jeremie-courreges-anglas">Jeremie Courreges-Anglas</h3>

<ul>
<li>On riscv64 require libatomic if actually needed in <a href="https://github.com/php/php-src/commit/bf3fb4e5c9">bf3fb4e5c9</a></li>
</ul>

<h3 id="jorg-adam-sowa">Jorg Adam Sowa</h3>

<ul>
<li>Fix <code>round()</code> tests for different modes in <a href="https://github.com/php/php-src/pull/12049">GH-12049</a></li>
<li>Tests improvement for <code>round()</code> modes in <a href="https://github.com/php/php-src/pull/11996">GH-11996</a></li>
<li>BCmath extension code reformatting in <a href="https://github.com/php/php-src/pull/11896">GH-11896</a></li>
</ul>

<h3 id="jrfnl">jrfnl</h3>

<ul>
<li>Remove <code>mysqli.reconnect</code> from php.ini files in <a href="https://github.com/php/php-src/pull/11836">GH-11836</a></li>
</ul>

<h3 id="ju1ius">ju1ius</h3>

<ul>
<li>releases property attributes of internal classes in <a href="https://github.com/php/php-src/pull/11980">GH-11980</a></li>
<li>Adds support for DNF types in internal functions and properties  in <a href="https://github.com/php/php-src/pull/11969">GH-11969</a></li>
</ul>

<h3 id="kamil-tekiela">Kamil Tekiela</h3>

<ul>
<li>Fix param name in <code>implode()</code> error message in <a href="https://github.com/php/php-src/commit/b1ce1d1f21">b1ce1d1f21</a></li>
<li>Fix failing test on nightly in <a href="https://github.com/php/php-src/commit/ffd398b4fe">ffd398b4fe</a></li>
<li>Fix implicit/explicit port in mysqlnd in <a href="https://github.com/php/php-src/commit/c1103a9772">c1103a9772</a></li>
<li>mysqli_field_seek return type changed to true in <a href="https://github.com/php/php-src/pull/11948">GH-11948</a></li>
<li>Align highlight_string|file with HTML standard and modern browsers in <a href="https://github.com/php/php-src/commit/f907a009f9">f907a009f9</a></li>
<li>Fix error checking in mysqlnd in <a href="https://github.com/php/php-src/commit/0d922aa595">0d922aa595</a></li>
<li>Remove remnant of COM_FIELD_LIST in <a href="https://github.com/php/php-src/commit/788540ef2c">788540ef2c</a></li>
<li>Add DROP TABLE to clean up after the test in <a href="https://github.com/php/php-src/commit/66b359e4de">66b359e4de</a></li>
<li>Remove unused CLEAN section in <a href="https://github.com/php/php-src/commit/ab46d2012c">ab46d2012c</a></li>
<li>Revert changes to <code>mysqli_get_connection_stats.phpt</code> in <a href="https://github.com/php/php-src/commit/0c288c4098">0c288c4098</a></li>
<li>Tidy up new my_mysqli in tests in <a href="https://github.com/php/php-src/commit/aab36a774a">aab36a774a</a></li>
<li>Improve test for mysqli_result constructor in <a href="https://github.com/php/php-src/commit/1451b9e6f2">1451b9e6f2</a></li>
<li>Remove unnecessary requires in mysqli tests in <a href="https://github.com/php/php-src/commit/af4eabd8c9">af4eabd8c9</a></li>
<li>As of 8.2 this SKIP is no longer possible in <a href="https://github.com/php/php-src/commit/548fc6a818">548fc6a818</a></li>
<li>Remove unnecessary parentheses around language constructs in mysqli in <a href="https://github.com/php/php-src/commit/73d6869337">73d6869337</a></li>
<li>Remove unnecessary parentheses around language constructs in mysqli in <a href="https://github.com/php/php-src/commit/a21edc52aa">a21edc52aa</a></li>
<li>Convert CRLF to LF in <a href="https://github.com/php/php-src/commit/c1a085290a">c1a085290a</a></li>
<li>Remove unnecessary parentheses around language constructs in oci8 in <a href="https://github.com/php/php-src/commit/a53e56176c">a53e56176c</a></li>
</ul>

<h3 id="k%C3%A9vin-dunglas">Kévin Dunglas</h3>

<ul>
<li>fix: handle the GNU specific version of strerror_r in <a href="https://github.com/php/php-src/commit/96885bc04f">96885bc04f</a></li>
</ul>

<h3 id="levi-morrison">Levi Morrison</h3>

<ul>
<li>Add <code>php_version</code> and <code>php_version_id</code> PHPAPI funcs in <a href="https://github.com/php/php-src/pull/11875">GH-11875</a></li>
</ul>

<h3 id="michael-orlitzky">Michael Orlitzky</h3>

<ul>
<li><code>ext/dba/tests/dba_tcadb.phpt</code>: support pthreadless tokyocabinet in <a href="https://github.com/php/php-src/pull/11648">GH-11648</a></li>
</ul>

<h3 id="mikhail-galanin">Mikhail Galanin</h3>

<ul>
<li>Set CLOEXEC on listened/accepted sockets in the FPM children in <a href="https://github.com/php/php-src/commit/418cdc0bea">418cdc0bea</a></li>
<li>Add &quot;revalidate&quot; time to opcache scripts list in <a href="https://github.com/php/php-src/commit/958a25e22e">958a25e22e</a></li>
</ul>

<h3 id="m%C3%A1t%C3%A9-kocsis-%F0%9F%92%9C">Máté Kocsis 💜</h3>

<ul>
<li>Fix the class synopsis of Throwable in <a href="https://github.com/php/php-src/commit/597aeb1246">597aeb1246</a></li>
<li>Improve test for <code>odbc_columns()</code> in <a href="https://github.com/php/php-src/commit/2f9f2928ce">2f9f2928ce</a></li>
<li>Use correct format specifier in <a href="https://github.com/php/php-src/commit/9dcdfa5e3f">9dcdfa5e3f</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/9967">GH-9967</a> Add support for generating custom function, class const, and property attributes in stubs in <a href="https://github.com/php/php-src/commit/c934e24197">c934e24197</a></li>
<li>Expose PDO_ODBC_TYPE to userland in <a href="https://github.com/php/php-src/commit/462792ee51">462792ee51</a></li>
<li>Improve and fix <code>ext/odbc</code> tests in <a href="https://github.com/php/php-src/commit/8726ae0601">8726ae0601</a></li>
<li>Enable <code>ext/odbc</code> and <code>ext/pdo_odbc</code> tests on Linux in GitHub CI in <a href="https://github.com/php/php-src/commit/985511e968">985511e968</a></li>
<li>Add more test coverage for <code>ext/odbc</code> in <a href="https://github.com/php/php-src/commit/66acaba9db">66acaba9db</a></li>
<li>Align the return type of <code>snmp_set_oid_numeric_print()</code> to its aliased funtion in <a href="https://github.com/php/php-src/commit/67ab2b7d87">67ab2b7d87</a></li>
<li>Make the $enable parameter of <code>odbc_autocommit()</code> nullable in <a href="https://github.com/php/php-src/pull/11909">GH-11909</a></li>
<li>Fix return type of <code>odbc_data_source()</code> in <a href="https://github.com/php/php-src/commit/77252afaf0">77252afaf0</a></li>
</ul>

<h3 id="niels-dossche">Niels Dossche</h3>

<ul>
<li>Fix <a href="https://github.com/php/php-src/issues/11440">GH-11440</a>: authentication to a sha256_password account fails over SSL in <a href="https://github.com/php/php-src/commit/94127c53aa">94127c53aa</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/11972">GH-11972</a>: RecursiveCallbackFilterIterator regression in 8.1.18 in <a href="https://github.com/php/php-src/commit/1cdcbc05b0">1cdcbc05b0</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/11972">GH-11972</a>: RecursiveCallbackFilterIterator regression in 8.1.18 in <a href="https://github.com/php/php-src/commit/ffd7018fcd">ffd7018fcd</a></li>
<li>Implement <a href="https://github.com/php/php-src/issues/11934">GH-11934</a>: Allow to pass CData into struct and/or union fields in <a href="https://github.com/php/php-src/commit/0b9702c9ed">0b9702c9ed</a></li>
<li>Fix oss-fuzz <a href="https://bugs.php.net/bug.php?id=61712">#61712</a>: assertion failure with error handler during binary op in <a href="https://github.com/php/php-src/commit/a3a3964497">a3a3964497</a></li>
<li>Remove useless duplicated call to <code>php_stream_parse_fopen_modes</code> in <a href="https://github.com/php/php-src/pull/12059">GH-12059</a></li>
<li>Add missing EXTENSIONS section to DOM tests in <a href="https://github.com/php/php-src/commit/bffc74474b">bffc74474b</a></li>
<li>Improve warning when returning null from the resolver set by libxml_set_external_entity_loader in <a href="https://github.com/php/php-src/commit/e1cb721679">e1cb721679</a></li>
<li>Update DOM test to work around libxml2 bug in <a href="https://github.com/php/php-src/commit/0fd226c277">0fd226c277</a></li>
<li>Fix memory leak when setting an invalid DOMDocument encoding in <a href="https://github.com/php/php-src/commit/20ac42e1b0">20ac42e1b0</a></li>
<li>Remove unnecessary invalidation from processing instructions in <a href="https://github.com/php/php-src/commit/4ff93f779c">4ff93f779c</a></li>
<li>Add test for <code>SimpleXMLElement::asXML()</code> with a fragment and a filename in <a href="https://github.com/php/php-src/commit/2b61f71046">2b61f71046</a></li>
<li>Fix various namespace prefix conflict resolution bugs and namespace shift bugs in <a href="https://github.com/php/php-src/commit/d46dc5694c">d46dc5694c</a></li>
<li>Fix <a href="https://bugs.php.net/bug.php?id=81992">#81992</a>: <code>SplFixedArray::setSize()</code> causes use-after-free in <a href="https://github.com/php/php-src/commit/b71c6b2c6c">b71c6b2c6c</a></li>
<li><a href="https://github.com/php/php-src/issues/11964">GH-11964</a>: In ext/date/php_date.<code>stub.php</code>, DateRangeError extends itself in <a href="https://github.com/php/php-src/commit/17b3af2958">17b3af2958</a></li>
<li>Fix <a href="https://bugs.php.net/bug.php?id=80927">#80927</a>: Removing documentElement after creating attribute node: possible use-after-free in <a href="https://github.com/php/php-src/commit/bb092ab4c6">bb092ab4c6</a></li>
<li>Optimize checks for DOMParentNode and DOMChildNode in <a href="https://github.com/php/php-src/commit/620b6220c2">620b6220c2</a></li>
<li>Align DOMChildNode parent checks with spec in <a href="https://github.com/php/php-src/commit/23ba4cde53">23ba4cde53</a></li>
<li>Fix segfault when <code>DOMParentNode::prepend()</code> is called when the child disappears in <a href="https://github.com/php/php-src/commit/d19e4da125">d19e4da125</a></li>
<li>Fix viable next sibling search for replaceWith in <a href="https://github.com/php/php-src/commit/df6e8bd4fd">df6e8bd4fd</a></li>
<li>Fix viable next sibling search for replaceWith in <a href="https://github.com/php/php-src/commit/815b5ad501">815b5ad501</a></li>
<li>Remove useless hashmap check in <a href="https://github.com/php/php-src/commit/5018dfecdf">5018dfecdf</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/11830">GH-11830</a>: ParentNode methods should perform their checks upfront in <a href="https://github.com/php/php-src/commit/dddd309da4">dddd309da4</a></li>
<li>Fix manually calling __construct() on DOM classes in <a href="https://github.com/php/php-src/commit/08c4db7f36">08c4db7f36</a></li>
<li>Make <code>DOMChildNode::remove()</code> run in O(1) performance in <a href="https://github.com/php/php-src/commit/e701b2fee7">e701b2fee7</a></li>
<li>Remove useless check in <a href="https://github.com/php/php-src/commit/872bf56fed">872bf56fed</a></li>
<li>Mark buildFromIterator test as conflicting in <a href="https://github.com/php/php-src/commit/dc586b121a">dc586b121a</a></li>
<li>Revert the fix for <a href="https://github.com/php/php-src/issues/11498">GH-11498</a> in <a href="https://github.com/php/php-src/commit/f7be15dbad">f7be15dbad</a></li>
<li>Fix missing link variable in test in <a href="https://github.com/php/php-src/commit/162bd2a58a">162bd2a58a</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/11438">GH-11438</a>: mysqlnd fails to authenticate with sha256_password accounts using passwords longer than 19 characters in <a href="https://github.com/php/php-src/commit/509906b2a5">509906b2a5</a></li>
<li>Handle strict error properly in adoptNode failure, and add a test in <a href="https://github.com/php/php-src/commit/6f6fedcb46">6f6fedcb46</a></li>
<li>Deduplicate loading code in <a href="https://github.com/php/php-src/commit/04df77650d">04df77650d</a></li>
<li>Respect strict error setting for adoptNode in <a href="https://github.com/php/php-src/commit/fa397e0217">fa397e0217</a></li>
<li>Fix json_encode result on DOMDocument in <a href="https://github.com/php/php-src/commit/6e468bbd3b">6e468bbd3b</a></li>
<li>NEWS in <a href="https://github.com/php/php-src/commit/d8f2584ebb">d8f2584ebb</a></li>
<li>Disable global state test on Windows in <a href="https://github.com/php/php-src/commit/62228a2568">62228a2568</a></li>
<li>Fix buffer mismanagement in <code>phar_dir_read()</code> in <a href="https://github.com/php/php-src/commit/80316123f3">80316123f3</a></li>
</ul>

<h3 id="peter-kokot">Peter Kokot</h3>

<ul>
<li>Remove unneeded <code>zend_language_parser.h</code> patch in <a href="https://github.com/php/php-src/pull/11974">GH-11974</a></li>
<li>Fix configure phpdbg help output in <a href="https://github.com/php/php-src/pull/12013">GH-12013</a></li>
<li>Fix passing null to parameter of type string in <a href="https://github.com/php/php-src/pull/12014">GH-12014</a></li>
<li>Sync <code>--enable-mysqlnd-compression-support</code> option in <a href="https://github.com/php/php-src/pull/12006">GH-12006</a></li>
<li>Add all README.* files to paths-ignore in <a href="https://github.com/php/php-src/pull/12003">GH-12003</a></li>
<li>Remove unused call to Makefile.frag in <code>ext/zip</code> in <a href="https://github.com/php/php-src/commit/c180e9b48a">c180e9b48a</a></li>
<li>Remove unused HAVE_GCC_GLOBAL_REGS shell variable in <a href="https://github.com/php/php-src/pull/11877">GH-11877</a></li>
</ul>

<h3 id="pierrick-charron">Pierrick Charron</h3>

<ul>
<li>Prepare for PHP 8.4 in <a href="https://github.com/php/php-src/commit/ad2ac6f05f">ad2ac6f05f</a></li>
</ul>

<h3 id="remi-collet">Remi Collet</h3>

<ul>
<li>ensure displays_errors is off (default) in <a href="https://github.com/php/php-src/commit/1f2cfd8009">1f2cfd8009</a></li>
<li>Fix <a href="https://github.com/php/php-src/issues/12063">GH-12063</a> convert PHP single-quote to C double-quote string in <a href="https://github.com/php/php-src/commit/13d3564a51">13d3564a51</a></li>
</ul>

<h3 id="yurun">Yurun</h3>

<ul>
<li>Fix MySQL Statement has a empty query result when the response field has changed, also Segmentation fault in <a href="https://github.com/php/php-src/commit/ca5d48213a">ca5d48213a</a></li>
</ul>

</details>

<p><br>
We are incredibly grateful for the commitment and dedication of all contributors. Stay tuned for next month's roundup as we continue to make PHP better together.</p>

<p><br></p>

<hr />

<h2 id="support-php-foundation">Support PHP Foundation</h2>

<p>At PHP Foundation, we support, promote, and advance the PHP language. We financially support six part-time PHP core developers to contribute to the PHP project. You can help support PHP Foundation at <a href="https://opencollective.com/phpfoundation">OpenCollective</a> or via <a href="https://github.com/sponsors/ThePHPF">GitHub Sponsors</a>.</p>

<p>A big thanks to all our sponsors — PHP Foundation is all of us!</p>

<p>Follow us on Twitter <a href="https://twitter.com/thephpf">@ThePHPF</a> to get the latest updates from the Foundation.</p>

<p>💜️ 🐘</p>

<blockquote>
  <p>PHP Roundup is prepared by Ayesh Karunaratne from <strong><a href="https://php.watch">PHP.Watch</a></strong>, a source for PHP News, Articles, Upcoming Changes, and more.</p>
</blockquote>
]]></content>
        </entry>
    </feed>