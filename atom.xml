<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[The PHP Foundation]]></title>
    <link href="https://thephp.foundation/atom.xml" rel="self"/>
    <link href="https://thephp.foundation/"/>
    <updated>2024-11-20T12:48:28+00:00</updated>
    <id>https://thephp.foundation/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Announcing the Pre-Release of the PHP Installer for Extensions (PIE)]]></title>
            <link href="https://thephp.foundation/blog/2024/11/19/pie-pre-release/"/>
            <updated>2024-11-19T00:00:00+00:00</updated>
            <id>https://thephp.foundation/blog/2024/11/19/pie-pre-release/</id>
            <content type="html"><![CDATA[<p>We're thrilled to introduce the pre-release of the PHP Installer for Extensions (PIE) ‚Äì <a href="https://github.com/php/pie"><strong>github.com/php/pie</strong></a>!</p>

<p>PIE aims to simplify managing PHP extensions by providing a modern, flexible alternative to PECL and treating extensions as first-class citizens in the PHP ecosystem.</p>

<blockquote>
PIE development is commissioned by the <a href="https://www.sovereign.tech/tech/php"><strong>Sovereign Tech Agency</strong></a>.
</blockquote>

<p>This initial pre-release is available as a <a href="https://github.com/php/pie/releases/tag/0.2.0">PHAR download</a>, and we invite you to take it for a spin and share your feedback. While this release is an exciting milestone, we know there's a lot more work ahead to make PIE ready for widespread use, so your feedback is invaluable. If you encounter any issues, or have any questions, feel free to open an <a href="https://github.com/php/pie/issues">issue on GitHub</a>, and help us shape the future of PIE.</p>

<h2 id="why-pie%3F">Why PIE?</h2>

<p>With PIE, the process of managing PHP extensions becomes more streamlined. Extensions are distributed via <a href="https://packagist.org/extensions">Packagist</a> just like regular PHP packages! It makes the installation and update process quite familiar if you already use Composer.</p>

<p>We‚Äôre working to make PIE stronger and easier to use. We‚Äôre improving how PHP extensions are managed and using ideas from Composer to make the process smoother.</p>

<h2 id="are-you-an-extension-author%3F">Are you an extension author?</h2>

<p>Extensions do need to be made compatible with PIE by adding a &#96;composer.json&#96; (more instructions <a href="https://github.com/php/pie/blob/main/docs/extension-maintainers.md">here</a>), and submitting it to <a href="https://packagist.org/packages/submit">Packagist</a>. Once a package has added support for PIE, it will appear on the Packagist <a href="https://packagist.org/extensions">Extensions list</a> page.</p>

<p>üíúÔ∏èüêò</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP 8.4: How Property Hooks Happened]]></title>
            <link href="https://thephp.foundation/blog/2024/11/01/how-hooks-happened/"/>
            <updated>2024-11-01T00:00:00+00:00</updated>
            <id>https://thephp.foundation/blog/2024/11/01/how-hooks-happened/</id>
            <content type="html"><![CDATA[<p>PHP 8.4 is coming on 21 November this year.  It includes a host of new functionality, but the biggest, in more ways than one, is Property hooks.  Given the excitement around it, as well as its size, the PHP Foundation's Roman Pronsky asked me to write up a bit about the process we went through to produce this beast.</p>

<p>What eventually became the twin RFCs of Property Hooks and Asymmetric Visibility is actually a very old discussion.  We'll look back at the decade-plus saga that got us here, how Ilija Tovilo and I got sucked in, how the design came to be, and how we managed to get it across the finish line.  Here's a teaser: It would not have happened without the PHP Foundation.</p>

<h2 id="ancient-history">Ancient history</h2>

<p>Ilija and I were not the first RFC to propose "property accessors," as they're called in most languages.  In fact, our RFC was the fifth:</p>

<ol>
<li>2009: <a href="https://wiki.php.net/rfc/propertygetsetsyntax">Property get/set syntax</a> by Dennis Robinson.  The core concepts and arguments behind it are all there, and haven't really changed in 15 years.  It never went to a vote.</li>
<li>2012: <a href="https://wiki.php.net/rfc/propertygetsetsyntax-v1.2">Property get/set syntax v1.2</a> by Clint Priest and Nikita Popov.  It didn't pass the 2/3 threshold for a vote, but did pass 50%.</li>
<li>2013: <a href="https://wiki.php.net/rfc/propertygetsetsyntax-alternative-typehinting-syntax">Property get/set syntax alternate typehinting syntax</a>, by Nikita Popov.  An alternate approach that proved very unpopular, failing 3 to 12.  However, it included a shorthand syntax that looks suspiciously like what eventually became property types.</li>
<li>2021: <a href="https://wiki.php.net/rfc/property_accessors">Property Accessors</a> by Nikita Popov. More of a brainstorm of what property accessors could be, including specific use-case options like <code>lazy</code> or <code>guard</code>.  It never went to a vote, but Nikita did note that "We could likely get 80% of the value of accessors by supporting read-only properties and 90% by also supporting private-write properties."  (I don't fully agree, but much of the value is in private-write.)</li>
</ol>

<p>All of these attempts had a few things in common:</p>

<ul>
<li>Pseudo-functions that live on properties and intercept get/set operations.</li>
<li>Asymmetric visibility</li>
<li>Interface properties</li>
</ul>

<h2 id="a-new-team-enters-the-arena">A new team enters the arena</h2>

<p>Fast forward to the summer of 2022.  Ilija Tovilo decided he wanted to take a swing at accessors next, and approached me for help.  Ilija and I had already worked together on the <a href="https://wiki.php.net/rfc/enumerations">Enums RFC</a>, so we knew we worked well together.  In part, that's because we have very different skill sets.  Ilija is rapidly becoming one of the most PHP engine-knowledgeable people around and quite proficient at writing C code, but is, by his own admission, not the most proficient writer of English.  I am a weirdo who enjoys language research, designing away edge cases, and can type fast enough to keep up with the Internals mailing list.  We complement each other well.</p>

<p>Illija is also fully funded by the PHP Foundation to work on the engine, without which this amount of work would have been impossible.  I work on a volunteer basis, and as my employers allow.</p>

<p>(Side note: As of this writing, I am between jobs.  If you're looking for a highly-experienced PHP Staff/Principal Engineer with experience in design, architecture, and leading teams, please <a href="https://github.com/Crell/">reach out</a> and let's talk!)</p>

<h2 id="research%2C-then-development">Research, then development</h2>

<p>With the initial goal of "making Nikita's proposal work-ish," I started digging into the research and design side.  My <a href="https://github.com/Crell/php-rfcs/blob/master/property-hooks/research.md">initial brainstorming</a> shows where our thoughts were at the time.  In short:</p>

<ul>
<li>There are two models of accessors: In untyped languages without visibility controls&mdash;like JavaScript and Python&mdash;accessors are methods with funny syntax.  In typed languages with visibility controls&mdash;like C#, Swift, and Kotlin&mdash;accessors are enhancements to a defined property.  As PHP is, let's face it, a typed language with visibility controls, that was clearly the model to follow (as had all previous RFCs).</li>
<li>Yes, we really would need asymmetric visibility, accessors, and interface properties.  While technically separate features, they make the most sense in combination.</li>
<li>The whole scope would be huge, so we needed to break it up where we could.  Splitting Asymmetric visibility off to its own RFC was the most natural place, which would be made easier by using Swift's <code>private(set)</code> style syntax.</li>
</ul>

<p>So in August of 2022 we put forward the first <a href="https://wiki.php.net/rfc/asymmetric-visibility">asymmetric visibility</a> RFC.  Given there was already a clear appetite for such functionality based on list discussions and on the recent <code>readonly</code> addition, which Nikita explicitly intended as a "junior asymmetric visibility," we expected some bikeshedding but overall a straightforward process.</p>

<p>Boy were we wrong.</p>

<h2 id="asymmetric-support">Asymmetric support</h2>

<p>The Asymmetric Visibility RFC was far more contentious than we expected. Some people hated the idea.  Some wouldn't accept anything but the C#-style syntax.  We ran a poll of various different approaches, and our initial proposal (Swift-style placement and syntax) ended up winning by a slim margin, but disappointingly "the consensus position isn't your position, sorry" didn't really persuade anyone.</p>

<p>Eventually, Asymmetric visibility finally went down in a 14:12 vote in January of 2023.  RFCs need 2/3 majorities to pass, so 14:12, while a simple majority, isn't enough.</p>

<h2 id="hooking-it-up">Hooking it up</h2>

<p>The failure of asymmetric visibility was a blow to both of us.  In most cases we didn't even know why the people who voted "no" did so, which made addressing their concerns guesswork.  Had we just wasted our time?  Would accessors even be acceptable?  The current RFC process is very bad at providing that kind of actionable feedback.</p>

<p>While no one from the Foundation mentioned it, we were also both acutely aware that Ilija had been working on paid time for a proposal that ended up failing.</p>

<p>Nonetheless, we had split the RFC in two deliberately so that even if only one was successful there was still a benefit.  We therefore turned our attention to the accessor part of the proposal (which included interface properties) and continued working.</p>

<p>The model we developed was essentially a "direct port from Swift, with a few slight renames."</p>

<p>The initial design included:</p>

<ul>
<li><code>get</code> - Totally takes over reading, and there's no physical property created.</li>
<li><code>set</code> - Totally takes over writing, and there's no physical property created.</li>
<li><code>beforeSet</code> - Intercepts the writing of a property but doesn't change the actual write itself.</li>
<li><code>afterSet</code> - Called after the property is written, doesn't change the actual write itself.</li>
</ul>

<p>This is also when we changed the name from "accessors" to "hooks," which seemed a more accurate description given that model.  This later ended up not making sense, but Ilija had already taken the time to rename everything in the patch, so it was too much work to change back.  Sorry.</p>

<p>The RFC text itself grew and grew.  PHP is a very mature (read: complex) language, and so there were lots of nooks and crannies that we had to account for.  Properties touch on almost everything: References, arrays, inheritance, final properties, interfaces, interaction with <code>readonly</code>, interaction with <code>__get</code>/<code>__set</code>, serialization, constructor property promotion, reflection...</p>

<p>PHP is a big language, and we needed to think through and implement every possible edge case to avoid booby traps.</p>

<h2 id="some-very-good-advice">Some very good Advice</h2>

<p>We finally had a working design and implementation by April 2023 or so, but were quite nervous about it.  It was big, and we were both still smarting from the loss of asymmetric visibility.  Roman suggested that he run it past the PHP Foundation's Advisory Board for feedback first before going to the list, which turned out to be the best thing we could do.</p>

<p>The Board came back with mostly positive feedback; they liked the concept, the design, the detail... but having 4 separate hooks felt very clumsy to them.  Especially with get/set wiping the backing property entirely and leaving the developer on their own.</p>

<blockquote>
<p><strong>The PHP Foundation's Advisory Board</strong> serves as a vital bridge between our major sponsors and the PHP development community. It's a Slack channel where we share early updates, insights, and ask for feedback. As well as receive insights and queries from sponsors' representatives. <br><br>

Companies interested in joining this influential group and directly contributing to the future of PHP can become members of the Advisory Board by contributing a minimum of $12,000 to The&nbsp;PHP&nbsp;Foundation as at least a Silver Sponsor. <br/><br/>

<strong><a href="https://thephp.foundation/sponsor/">Learn more about sponsorship opportunities.</a></strong><br/>
</p>
</blockquote>

<p>I don't have the original chat log, but that resulted in a brief exchange that went approximately like this:</p>

<pre><code class="text">Roman: The Advisory Board says three different set-ish hooks are a problem  
Larry: Well, we kinda have to, because you can't access a property 
       from within its own hook, that doesn't make sense.  
Ilija: Er, actually we could do that easily.  
Larry: Wait, what?  That... how... why...  
Larry: *does some research*  
Larry: Well crap, that's exactly what Kotlin does.  
       Why didn't we research Kotlin in the first place?  
Ilija: ¬Ø\_(„ÉÑ)_/¬Ø  
Ilija: Well, I just switched it over to that. Looks nicer.
</code></pre>

<p>And so there we were, with half as many syntaxes for the same functionality, and a feature name (hooks) that no longer made sense.  Oh well.</p>

<p>We finally made a public proposal at the start of May 2023.  Initial feedback was quite positive, though there was some pushback, including around the syntax from people who wanted the Javascript/Python style (naturally).  And the length.  Oh, the length.  If hooks isn't the longest RFC ever proposed, it's close.  But as we reiterated many times, that's because the problem space itself is highly complex.</p>

<p>Sadly, time was not on our side.  Ilija was still working out some implementation edge cases and PHP 8.3‚Äôs feature-freeze was rapidly approaching.  So in early July, almost exactly a year after we started working on it, we decided to postpone hooks until 8.4 to give such a large change enough time to settle in and get adjusted if needed.</p>

<h2 id="take-2">Take 2</h2>

<p>After many distractions, we were able to bring the topic back up in <a href="https://externals.io/message/122445">February of 2024</a>, with the intent to bring it to a vote quickly, in March.  (We were so naive.)</p>

<p>There was a lot more discussion this time around, though a lot of it was re-hashing edge cases we'd already addressed.  We also spent a considerable amount of time talking with the Foundation's developer team.  They, by and large, represent the most experienced developers of PHP Internals today, and were an invaluable resource.  That we could talk to them in real time via the Foundation's private chat also helped, as that's a far easier way to handle back-and-forth than a mailing list.</p>

<p>There were a few significant changes we did end up making in response to feedback, from both the list and the Foundation team.  Most importantly, Ilija managed to make array properties work, which had been a challenge due to references.  Once again, being able to attack the problem from two directions (design and ergonomics from me, implementation from Ilija) let us improve the overall experience dramatically.</p>

<h2 id="down-to-the-wire">Down to the wire</h2>

<p>Even then, with all the positive feedback, it wasn't clear to us if it would pass.  Many people on the list had expressed support, but a lot of them were non-voters.</p>

<p>Others had expressed essentially "fearful support"; They liked the idea, couldn't find fault with the implementation, but were concerned about just how big and complex the feature was.</p>

<p>Still others, for various reasons, suggested moving certain sub-features to a separate, future RFC. Which is often code for "I don't like this part, but I don't want to vote against the RFC because of it, so please let me vote against it separately."  We explained, repeatedly, that this was already the slimmed down, partial version.  The other part was asymmetric visibility.</p>

<p>After a lot of discussion and with a lot of trepidation, we called the vote in mid-April of 2024.  It passed 42:2.  I don't understand PHP Internals at times.</p>

<h2 id="asymmetric-visibility-2%3A-the-wrath-of-ilija">Asymmetric Visibility 2: The Wrath of Ilija</h2>

<p>Several people pointed out that hooks without asymmetric visibility had significant holes in it.  They were right, which is why we'd originally proposed that first.  We had decided that if hooks pass, we would take a second swing at asymmetric visibility.  So we did.</p>

<p>The only actionable feedback we'd gotten the first time around was that without support for combining <code>readonly</code> and asymmetric visibility, the RFC felt "incomplete."  We went through a few variations on how to address that before landing on the final solution: Change <code>readonly</code> from being implicitly <code>private(set)</code> to implicitly <code>protected(set)</code>.  Otherwise, the discussion was mostly a retread of the year before.</p>

<p>We were still stressing out about this one, too.  It hadn't passed before, why would it now?  However, this time it passed 24:7 at the start of August 2024.</p>

<p>Looking at the results, while there were two people who changed from a No to a Yes, the biggest change from the first vote was simply who voted.  Most of the previous No votes... didn't vote this time.  But entirely new people showed up to vote yes.  Showing up to vote matters, folks.</p>

<h2 id="on-to-the-next-adventure">On to the next adventure</h2>

<p>25 months after the process started, PHP now joins the cadre of languages with robust, flexible properties that can do more than just hold dumb values.  It's been a wild ride, and at many points a needlessly stressful one.  The end result, though, is a host of powerful new features that make PHP 8.4 the most exciting PHP release in several years.  Really, they're the best thing since enums...</p>

<p>I hope this tale is a useful insight for folks into how the sausage is made.  Now go enjoy interface properties, hooks, and asymmetric visibility.  Or enjoy not using hooks, but having the option to, which eliminates a lot of code.  Both work.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Introducing Web&nbsp;Services&nbsp;Tool for&nbsp;PHP-FPM]]></title>
            <link href="https://thephp.foundation/blog/2024/10/21/web-services-tool-for-php-fpm/"/>
            <updated>2024-10-21T00:00:00+00:00</updated>
            <id>https://thephp.foundation/blog/2024/10/21/web-services-tool-for-php-fpm/</id>
            <content type="html"><![CDATA[<p>The Web Services Tool (WST) is a command-line application developed to test PHP-FPM, <a href="https://www.sovereigntechfund.de/tech/php"><strong>commissioned by the Sovereign Tech Fund</strong></a> (STF). Its primary goal is to facilitate testing of the integration between different web servers and PHP-FPM across various environments and configurations.</p>

<p>This blog post provides an introduction to the tool. We'll go through the history of PHP-FPM testing and the reasons that led to WST's development. The post also outlines the project structure, insights into the tool‚Äôs architecture, its current state, and the roadmap for future development.</p>

<h2 id="php-fpm-testing-and-wst-history">PHP-FPM testing and WST history</h2>

<h3 id="first-steps">First steps</h3>

<p>PHP-FPM was initially developed as a patch series starting around 2004. It evolved into a more modular architecture with a separate SAPI by 2009, and it was <a href="https://github.com/php/php-src/commit/06b9943842eb954025ac83b542e97d6310aa524a">merged into the PHP core</a> in 2010. It was declared stable with the release of PHP 5.4 in 2011. While this version introduced many features that are still used today, it did not include any automated tests; all testing was done manually.</p>

<p>The first automated test was introduced in early 2014, and it provided a basic check to verify that PHP-FPM can start with a certain configuration. Later that year, more advanced tests were added, including a FastCGI client, which allowed PHP-FPM to run in a separate process, accept FastCGI requests, and return responses. This was a major step forward, as it enabled testing scenarios that weren't previously possible. However, the implementation was more of a workaround, piecing together different components. The tests were repetitive and limited in their ability to define complex expectations.</p>

<h3 id="a-bit-more%2C-but-still-not-enough">A bit more, but still not enough</h3>

<p>In 2018, I <a href="https://github.com/php/php-src/commit/ea592e6b6c43b7c5ebedf63254b8088f741e276c">carried out</a> a complete rewrite of the FPM tests, introducing a primary <code>Tester</code> class. This class integrated more robust expectations and added abstractions for handling requests and responses. Over the years, this framework has been improved and now includes many features that support testing more complex scenarios. It significantly improves test code re-usability and offers various new options for easier testing. However, it <strong>doesn‚Äôt cover integration tests with web servers</strong>, which often have quirks not easily caught by these tests. Additionally, this framework <strong>doesn't handle high-load scenarios</strong>, which are necessary for testing process management in PHP-FPM. <strong>This showed the need for a new tool to keep PHP-FPM development safe.</strong></p>

<h3 id="here-comes-the-php-foundation-and-the-stf-service-agreement">Here comes The PHP Foundation and the STF service agreement</h3>

<p>Initially, I had an idea to extend <a href="https://github.com/bukka/fpmt">fpmt</a>, my tool for testing PHP-FPM (specifically for sending custom FastCGI requests), and integrate most of the testing logic directly into it. However, it soon became clear that maintaining such a tool would require constant code changes, and the effort needed to build and sustain it was too large. As a result, I put the project on hold.</p>

<p>It wasn‚Äôt until 2023 that the idea resurfaced, thanks to an opportunity provided by the Sovereign Tech Fund. The STF gave PHP projects a chance to propose initiatives aimed at improving their overall health. Testing, being a critical component of project health, made this tool a perfect candidate, and it, along with <a href="https://www.sovereigntechfund.de/tech/php#what-are-we-funding">three other projects</a>, comprised the scope of work commissioned by the STF.</p>

<h3 id="how-wst-started">How WST started</h3>

<p>I began the work on the tool in January 2024 with the planning phase. It quickly became evident that a more generic approach would offer greater flexibility and cover more use cases. I decided to design the tool around a clear configuration structure, which would be parsed and executed. A key part of the planning was ensuring that the <strong>same tests could run both locally and in containers</strong>, with an option to simulate high loads by integrating with a load testing tool. Given these requirements, I chose Go as the implementation language, as it provides well-supported clients and packages for all the project‚Äôs needs. Go's advanced templating capabilities, which are popular in tools like Helm, were also a deciding factor.</p>

<p>For easier setup, the project was organized under a new <a href="https://github.com/wstool/"><strong>wstool</strong></a> organization, containing two repositories: one for the actual tool implementation (<a href="https://github.com/wstool/wst">wst</a>) and another for the PHP-FPM testing configurations (<a href="https://github.com/wstool/wst-php-fpm">wst-php-fpm</a>). The structure of the application differs slightly from typical Go applications, as it focuses on achieving full test coverage for most components. As a result, it features multiple sub-packages to allow for the creation of mocks using <a href="https://github.com/vektra/mockery">Go Mockery</a>, which generates <a href="https://github.com/stretchr/testify">Testify</a> mocks.</p>

<h2 id="the-current-state-and-its-structure">The current state and its structure</h2>

<p>The tool has been developed into a functional state that allows it to run various tests. Its architecture is defined by its configuration, with a strong emphasis on flexibility.</p>

<p>At the core of the configuration is a file that contains a specification composed of settings for various components. Multiple configuration files can be specified, along with specific overrides for selected values. These configurations and overrides are then merged into a single, unified configuration. Example of execution could look like:</p>

<pre><code class="shell">wst -f /path/to/cfg1 -f /path/to/cfg2 -o spec.defaults.service.sandbox=docker
</code></pre>

<p>This will merge cfg1 and cfg2 and apply overwrite for the default server.<br />
The final configuration defines environments, sandboxes, servers, and instances ‚Äì these are the core elements of the application‚Äôs execution. Additionally, it defines some default settings, including base parameters. These parameters allow for further customization and can be accessed within template files and strings. The example of primary configuration looks like</p>

<pre><code class="yaml">version: "0.1"
name: FPM
description: FPM server specifications for testing PHP-FPM
spec:
  environments: environments.yaml
  instances: spec/instances/*.yaml
  sandboxes: sandboxes.yaml
  servers: servers/*/*/server.yaml
  workspace: workspace/
  defaults:
    service:
      sandbox: local
    parameters:
      fpm_binary: php-fpm
</code></pre>

<p>As you can see, it is possible to separate config to multiple files that can be specified in the wildcard format. The meaning of primary spec parts is following:</p>

<ul>
<li><p><strong>Environments</strong> specify where the tests are executed, allowing for tests to run locally, in Docker, or Kubernetes environments. This enables testing across different distributions using Docker and under production-like loads with Kubernetes. Such flexibility helps recreate reported issues more effectively, as some problems only appear under heavy load. It also provides greater confidence when implementing new features or fixing complex bugs.</p></li>
<li><p><strong>Sandboxes</strong> are closely related to environments, defining how services behave in each environment. Specifically, they define hooks containing commands or signals for starting, stopping, reloading, and restarting services.</p></li>
<li><p><strong>Servers</strong> contain the specifications of the web servers or other web services being tested. They define server configuration templates, expectations, parameters, and specific hooks linked to sandboxes. For instance, a server might specify PHP-FPM configuration files (fpm.conf, php.ini), set up start hooks for the PHP-FPM binary with selected parameters, and outline specific log message expectations following PHP-FPM startup. These predefined settings help reduce code duplication.</p></li>
<li><p><strong>Instances</strong> are the core of WST‚Äôs testing functionality. They define everything specific to a single test case, primarily specifying the service. This means choosing the server by name, providing parameters, and specifying configuration files to be included with the selected parameters. They also define scripts included in the services and their content, which are then utilized during actions.</p></li>
</ul>

<p>The mentioned actions offer additional flexibility by providing a custom mini pipeline which offers a high degree of flexibility. Actions are responsible for controlling services (start, stop, restart, reload), triggering requests (request, bench), and setting expectations on output (logs), responses (for requests), and metrics (for benchmarks). There is also a parallel action, allowing multiple actions to run simultaneously</p>

<p>This is an example of a simple instance with actions:</p>

<pre><code class="yaml">version: "0.1"
name: FPM
description: FPM server specifications for testing PHP-FPM
spec:
  environments: environments.yaml
  instances: spec/instances/*.yaml
  sandboxes: sandboxes.yaml
  servers: servers/*/*/server.yaml
  workspace: workspace/
  defaults:
    service:
      sandbox: local
    parameters:
      fpm_binary: php-fpm
</code></pre>

<p>This test starts FPM and <code>httpd</code> with selected configs, sends a request for <code>index.php</code> path, verifies that response body and stops the servers.</p>

<p>Currently, the tool works in a local environment and has already helped recreate complex scoreboard locking issues through its automated load testing (bench action). The Docker and Kubernetes environments have largely been finalized in terms of structure, with most of the implementation in place. However, some additional changes and fixes are needed for full functionality.</p>

<h2 id="the-first-results">The first results</h2>

<p>The initial PHP-FPM configuration includes only a few instances and server configurations. It defines three servers‚Äîfpm, nginx, and httpd (Apache). These servers contain default configurations with all necessary settings, as well as variants for Debian and RedHat that could be used as needed. The servers also define reusable expectations across instances. For PHP-FPM, these expectations are used to verify that the server has started successfully, based on log messages, and include templates for asserting FPM status responses.</p>

<p>As for instances, there are currently the following tests defined:</p>

<ul>
<li><a href="https://github.com/wstool/wst-php-fpm/blob/bccec57f02e7918aedf5bce43387a3c1ce733f37/spec/instances/access-suppress-path-status.yaml">Access log path suppression test</a> &#45; It verifies access logs, which uses status checking and output verification to ensure that access logs are properly generated in both PHP-FPM and Nginx.</li>
<li><a href="https://github.com/wstool/wst-php-fpm/blob/bccec57f02e7918aedf5bce43387a3c1ce733f37/spec/instances/httpd-proxy-fcgi-handler-basic.yaml">Apache httpd mod&#95;proxy&#95;fcgi SetHandler basic tests</a> &#45; It tests FastCGI integration between Apache httpd and PHP-FPM and makes sure that different combinations of test works. It also recreates a recent issue with Apache httpd integration.</li>
<li><a href="https://github.com/wstool/wst-php-fpm/blob/bccec57f02e7918aedf5bce43387a3c1ce733f37/spec/instances/scoreboard-atomic-copy.yaml">Scoreboard atomic copying test</a> &#45; It focuses on testing the scoreboard under higher loads. This test has been particularly useful in reliably reproducing a scoreboard locking issue, which has been causing errors for users. Once the issue is resolved, the test will serve as a regression check to ensure the problem doesn‚Äôt reoccur.</li>
</ul>

<h2 id="the-future-development">The future development</h2>

<p>The primary goal moving forward is to add more tests and begin using the tool to address existing complex issues and features in PHP-FPM. This will require further updates to the application to improve its capabilities. The tool also needs to be stabilized and made more user-friendly, specifically, enhancing logging and documentation.</p>

<p>Once the tool and PHP-FPM tests reach a stable state, the next step would be to set up a continuous integration (CI) system to run all stable tests regularly against the latest repository. Ideally, this could be integrated into PHP‚Äôs nightly workflow. There is a possibility to use higher spec resources from TeamCity or infrastructure provided by AWS to PHP Foundation which is currently used for benchmarking project testing performance of PHP.</p>

<p>Since the tool is not specific to PHP-FPM, it could also be applied to other parts of PHP. For example, it could finally enable tests for the Apache handler (<code>mod_php</code>) SAPI, which is still widely used but currently lacks testing, making changes risky. Additionally, the tool could be useful for testing specific scenarios involving PHP extensions that rely on external services, such as databases or LDAP.</p>

<p>Another area where the tool could be valuable is in performing various security-related tests. Adding fuzzing capabilities could help uncover a range of issues, including potential security vulnerabilities, not only in PHP-FPM but also in the web servers themselves.</p>

<p>Testing full framework applications and automating setup steps like <code>composer install</code> could improve the tool as well. This will require more time and help from the community to make sure the setups are reliable in all environments.</p>

<h2 id="summary">Summary</h2>

<p>The WST has already proven to be valuable for PHP-FPM development and testing, because it helps address  complex issues which were never tested in automated way before.</p>

<p>As more features and tests are added, its importance will only grow. We hope it will become an essential part of ensuring PHP-FPM's stability, performance, and evolution.</p>

<p>üíúÔ∏è üêò</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[The PHP Foundation Supports The Open Source Pledge]]></title>
            <link href="https://thephp.foundation/blog/2024/10/08/open-source-pledge/"/>
            <updated>2024-10-08T00:00:00+00:00</updated>
            <id>https://thephp.foundation/blog/2024/10/08/open-source-pledge/</id>
            <content type="html"><![CDATA[<p>The PHP Foundation is proud to announce our support for the Open Source Pledge initiative, launched by Sentry and its partners. This step addresses the sustainability challenges within the Open Source Software (OSS) community, particularly affecting PHP and its ecosystem.</p>

<h2 id="the-open-source-pledge%3A-a-commitment-to-sustainability">The Open Source Pledge: A Commitment to Sustainability</h2>

<p>The Open Source Pledge represents a commitment from member companies to provide meaningful financial support to Open Source maintainers. This initiative aims to prevent maintainer burnout and reduce the risk of high-profile security incidents that can impact the broader tech ecosystem.</p>

<p>The OSS community, including PHP, faces significant challenges:</p>

<ul>
<li><strong>Security risks:</strong> High-profile incidents like Log4shell, XZ, and Heartbleed have highlighted the potential consequences of under-resourced projects.</li>
<li><strong>Developer burnout:</strong> Many maintainers, often volunteers, are feeling exhausted and leaving the very projects you might be using.</li>
<li><strong>Losing maintainers:</strong> The demanding nature of maintaining open-source software means we‚Äôre seeing fewer contributors over time.</li>
</ul>

<h2 id="the-php-foundation%27s-role">The PHP Foundation's Role</h2>

<p>As the main funder and steward of the PHP language, we‚Äôve seen firsthand how a lack of funding impacts crucial projects. For example:</p>

<ul>
<li><strong>Core language development:</strong> Keeping PHP up to date and improving it takes a lot of time and expertise.</li>
<li><strong>Security support:</strong> Without enough funding, PHP can‚Äôt address vulnerabilities quickly.</li>
<li><strong>Extension maintenance:</strong> Many essential PHP extensions are struggling to find people to maintain them.</li>
<li><strong>Documentation efforts:</strong> Keeping PHP‚Äôs extensive documentation current is always a big challenge.</li>
</ul>

<h1 id="how-to-join-the-pledge">How to Join the Pledge</h1>

<p>The Open Source Pledge offers a structured approach to supporting OSS with the following requirements:</p>

<ul>
<li>Minimum contribution: $2,000 per year, per developer on staff.</li>
<li>Transparency: Companies should publish annual reports detailing their payments.</li>
<li>Direct impact: Funds go directly to maintainers, supporting their crucial work.</li>
</ul>

<p>Thanks to supporting the PHP Foundation, our major sponsors <a href="https://packagist.com/">Private Packagist</a> and <a href="https://tideways.com/">Tideways</a> are already part of the <a href="https://opensourcepledge.com/">Open Source Pledge</a>.</p>

<h1 id="%5Caction-required%5C-join-the-pledge%5C%21">&#91;Action Required&#93; Join the Pledge&#33;</h1>

<p>We urge PHP-based companies, developers, and organizations to join the Open Source Pledge and <strong><a href="https://thephp.foundation/sponsor/">sponsor The PHP Foundation</a></strong>.</p>

<p>To learn more about the Open Source Pledge and how you can participate, visit&nbsp;<a href="https://opensourcepledge.com/">https://opensourcepledge.com/</a>.</p>

<p>Help us spread the word by sharing this post.</p>

<p>üíúÔ∏è üêò</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP Core Roundup #19]]></title>
            <link href="https://thephp.foundation/blog/2024/10/02/php-core-roundup-19/"/>
            <updated>2024-10-02T00:00:00+00:00</updated>
            <id>https://thephp.foundation/blog/2024/10/02/php-core-roundup-19/</id>
            <content type="html"><![CDATA[<p>Welcome back to the PHP Core Roundup series, we cover what's new and changing in PHP and provide an update on the recent proposals to change and discussions around them.</p>

<p>Our last update was almost a year ago, and that was because we felt the PHP Core Roundup posts were getting stale and our previous format was repetitive and had a lot of changes that made the posts excessively long.</p>

<h2 id="the-new-php-core-roundup-series">The New PHP Core Roundup Series</h2>

<p>Today, we are trying a new format that we got rid of text that looked like a mere changelog, to a post highlighting the general momentum of PHP development. This also means we might not get to celebrate and mention all the contributions from the PHP Foundation members and the other contributors as we did in previous posts.</p>

<p>Maintaining a mature, reliable, and widely used programming language that continues to get new features and improvements for almost 30 years involves a lot of work! Maintaining PHP documentation, php.net infrastructure, translations, triaging issues and security reports, bug fixes, mailing lists, reviewing RFCs, and packaging PHP only to name a few, we have PHP contributors and PHP Foundation members putting a commendable amount of effort into improving PHP!</p>

<p>While these PHP Core Roundup series may not write about these contributions often because we want to keep these posts exciting and resourceful, we want to spread love to all the contributors to the PHP ecosystem üíú.</p>

<h2 id="php-release-cycle-updates">PHP Release Cycle Updates</h2>

<p>In April, we voted and accepted an <a href="https://wiki.php.net/rfc/release_cycle_update">RFC</a> to update our Release Cycle policy.</p>

<p>The PHP Core team provided two years of active support, followed by only one year of security fixes. We now have a new release cycle that, from PHP 8.1 (released in 2021 November), all PHP versions now get <strong>two years of security fixes instead of one year</strong>. The two-year active support period remains the same.</p>

<p>Further, we have changed the active-support and End-Of-Life dates to align to December 31st of the calendar year. This makes the support and EOL dates more predictable.</p>

<p>Here are the updated active-support and EOL dates for the current line-up of PHP versions. Dates changed from the previously set dates are in bold.</p>

<table>
<thead>
<tr>
  <th align="center">PHP version</th>
  <th align="center">Release date</th>
  <th align="center">Active maintenance until</th>
  <th align="center">EOL date</th>
</tr>
</thead>
<tbody>
<tr>
  <td align="center">PHP 8.1</td>
  <td align="center">2021-11-25</td>
  <td align="center">2023-11-25</td>
  <td align="center"><strong>2025-12-31</strong></td>
</tr>
<tr>
  <td align="center">PHP 8.2</td>
  <td align="center">2022-12-08</td>
  <td align="center"><strong>2024-12-31</strong></td>
  <td align="center"><strong>2026-12-31</strong></td>
</tr>
<tr>
  <td align="center">PHP 8.3</td>
  <td align="center">2023-11-23</td>
  <td align="center"><strong>2025-12-31</strong></td>
  <td align="center"><strong>2027-12-31</strong></td>
</tr>
<tr>
  <td align="center">PHP 8.4</td>
  <td align="center">2024-11-21</td>
  <td align="center">2026-12-31</td>
  <td align="center">2028-12-31</td>
</tr>
<tr>
  <td align="center">PHP 8.5</td>
  <td align="center">2025-11</td>
  <td align="center">2027-12-31</td>
  <td align="center">2029-12-31</td>
</tr>
</tbody>
</table>

<h2 id="php-core-developments">PHP Core Developments</h2>

<p>A few days ago, PHP 8.4 reached its feature-freeze. PHP 8.4 is slated to be released on November 21st of this year.</p>

<p>The first release candidate for PHP 8.4 is already out ‚Äî they are not production-ready, but they are available to try out and test PHP application on, either by compiling from <a href="https://github.com/php/php-src/tags">source</a>, using <a href="https://windows.php.net/qa/">Windows binaries</a>, or in <a href="https://hub.docker.com/_/php/tags?name=8.4-">Docker containers</a>.</p>

<h3 id="highlights-for-php-8.4">Highlights for PHP 8.4</h3>

<p>PHP 8.4 is an important release that brings major new features, several updates to the build dependencies and underlying libraries, and a fair bit of deprecations to iron out some of the legacy and undesirable behaviors and features in legacy PHP versions.</p>

<p>Using various approaches, each PHP version brings a lot of performance improvements and security tightening too. In PHP 8.4, we continue this in this direction with several minor internal improvements as well as noticeable improvements in JIT, and PHP extensions such as mbstring, BCMath, XML extensions, PCRE, and more.</p>

<p>Further, PHP 8.4 unbundles IMAP, Pspell, OCI, and pdo_oci extensions. It means if you wanted to continue using them, you'll have to install via PECL.</p>

<h3 id="property-hooks-and-asymmetric-visibility">Property Hooks and Asymmetric Visibility</h3>

<p>One of the most important features in PHP 8.4 is that you can now use <a href="https://wiki.php.net/rfc/property-hooks">property hooks</a> and declare property <a href="https://wiki.php.net/rfc/asymmetric-visibility-v2">visibility separately</a> for get and set operations. Both of these features are thanks to the collaborative efforts of Ilija Tovilo and Larry Garfield. Ilija, funded by the foundation üíú, focused on the implementation. Meanwhile, Larry, a frequent contributor, worked on the specification and authored the RFC text.
Property hooks allow declaring virtual properties with "hooks" that get executed when the properties are accessed or set, and the hooks get called with the object in context, to run their own logic.</p>

<pre><code class="php">class User {
    public string $emailAddress {
        set {
            if (!filter_var($value, FILTER_VALIDATE_EMAIL)) {
                throw new ValueError('emailAddress property must be a valid email address');
            }
            $this-&gt;emailAddress = $value;
        }
    }
}

$user = new User();
$user-&gt;emailAddress = 'test@example.com'; // Allowed
$user-&gt;emailAddress = 'not an email address'; // Throws ValueError
</code></pre>

<p>Property hooks open up a vast possibilities to leading to less boilerplate code, improve readability, and make PHP classes and their APIs more intuitive.</p>

<p>The <a href="https://wiki.php.net/rfc/property-hooks">Property Hooks RFC</a> is perhaps our longest RFC ever, detailing use cases and syntax such as short functions, using them in constructor-promoted class properties, how a subclass can override or call parent property hooks, how they work with other mechanics such as readonly, magic methods, references, arrays, etc.</p>

<p>We will be covering more about details and mechaniscs of Property Hooks soon in future posts.</p>

<h3 id="asymmetric-visibility">Asymmetric Visibility</h3>

<p>Another useful feature added in PHP 8.4 is the ability to set different visibility scopes for get and set operations. This comes in situations where exposing a class property to be <em>read</em> is desired, but not to <em>write</em>.</p>

<pre><code class="php">class User {
    public private(set) int $userId;

    public function __construct() {
        $this-&gt;userId = 42; // e.g. set from a database value
    }
}

$user = new User();
echo $user-&gt;userId; // 42

$user-&gt;userId = 16; // Not allowed
// Error: Cannot modify private(set) property User::$userId from global scope
</code></pre>

<h3 id="improved-html5-parser">Improved HTML5 Parser</h3>

<p>The DOM Extension in PHP 8.4 received a massive feature-update as well. Previously, the DOM extension only offered libxml2 to parse HTML, which has not kept up with HTML5. The DOM extension now offers new <code>Dom\HTMLDocument</code> and <code>Dom\XMLDocument</code> classes with the former supporting HTML5-compliant parsing support.</p>

<p>There are lots of new improvements in this space, including not only the <a href="https://wiki.php.net/rfc/domdocument_html5_parser">HTML5 parsing support</a>, but also <a href="https://wiki.php.net/rfc/opt_in_dom_spec_compliance">DOM spec compliance</a> and several small <a href="https://wiki.php.net/rfc/dom_additions_84">additions</a> including adding support for CSS selectors.</p>

<h3 id="bcmath-extension-getting-%60number%60-class-and-new-functions">BCMath extension getting <code>Number</code> class and new functions</h3>

<p>The BCMath extension in PHP 8.4 now has classes with support for operator overloading support!</p>

<pre><code class="php">use BcMath\Number;

$num1 = new Number('22');  
$num2 = new Number('7'); 
$num3 = new Number('100');

$result = ($num1 / $num2) + $num1 - $num2;
echo $result; // 18.1428571428
</code></pre>

<p>Now, instead of using BCMath functions such as <code>bcadd</code>, <code>bcsub</code>, <code>bcdiv</code>, etc, you can now simply use standard operators (<code>+</code>, <code>-</code>, <code>/</code>, etc.).</p>

<p>The new <code>BcMath\Number</code> class supports operator overloading, which cannot be done by userland PHP classes yet, but the BCMath extension implements it, so you can use them as if they were regular numbers.</p>

<p>The <code>BcMath\Number</code> class implements <code>Stringable</code> interface, so the objects can be used where a string is expected (like how the example above uses it with an <code>echo</code> call). Further, the class implements all <code>bc*</code> functions. For example, it's also possible to call <code>$num-&gt;add($num2)</code> or <code>$num-&gt;add('5')</code> and it returns a new <code>BcMath\Number</code> object without modifying the original object, which makes them immutable.</p>

<p>This comes from Saki Takamachi üíú, one of our new PHP Foundation members. She also made several new improvements including adding new <code>bcfloor</code>, <code>bcceil</code>, <code>bcround</code>, and <code>bcdivmod</code> functions.</p>

<h3 id="...-and-more%21">... and more!</h3>

<p>PHP 8.4 is shaping up to be an impactful version, with features such as property hooks and asymmetric visibility we mentioned above, and a healthy amount of deprecations including deprecating <a href="https://php.watch/versions/8.4/implicitly-marking-parameter-type-nullable-deprecated">implicitly nullable parameter declarations</a>.</p>

<p>Further, PHP 8.4 will be released after some popular Linux distro versions in server space reach their EOL date (such as Ubuntu 18.04 and RHEL/CentOS 7), so we took this opportunity to bump the minimum required dependency versions for Curl (>= 7.61.0), OpenSSL (>= 1.1.1). The PHP 8.4 mbstring extension is also updated to with the latest Unicode Character Database version 16 data.</p>

<p>See the lengthy <a href="https://github.com/php/php-src/blob/PHP-8.4/UPGRADING"><code>UPGRADING</code></a> file for a complete list of changes, but we will also be covering the important ones in the upcoming PHP Core Roundup posts.</p>

<h2 id="what%27s-in-the-making">What's in the making</h2>

<p>On September 30th, PHP 8.4 reached its feature-freeze, which means PHP 8.4 syntax and features are now fixed; PHP 8.4 will get ironed out and the first GA release is scheduled for November 21st.</p>

<h3 id="pie-%3A-php-installer-for-extensions">PIE : PHP Installer for Extensions</h3>

<p>PIE is a new initiative to be an eventual replacement for PECL. It's still under development, but it will be able to download, build, and install PIE-compatible extensions.</p>

<h3 id="real-time-benchmarking">Real-time benchmarking</h3>

<p>M√°t√© Kocsis üíú <a href="https://externals.io/message/116323">was</a> working on a real-time fully-automated and reproducible <a href="https://github.com/kocsismate/php-version-benchmarks?tab=readme-ov-file#introduction">benchmark</a> for PHP. It is now active (with daily results available <a href="https://github.com/php/real-time-benchmark-data">here</a>).</p>

<p>Using these test suits, we now have reliable data on the performance improvements or degradation in each PHP version.</p>

<hr />

<h2 id="support-php-foundation">Support PHP Foundation</h2>

<p>At The PHP Foundation, we support, promote, and advance the PHP language. We financially support ten PHP core developers to contribute to the PHP project. You can help support PHP Foundation on <a href="https://opencollective.com/phpfoundation">OpenCollective</a> or via <a href="https://github.com/sponsors/ThePHPF">GitHub Sponsors</a>.</p>

<p>A big thanks to all our sponsors ‚Äî PHP Foundation is all of us!</p>

<p>Follow us on Twitter/X <a href="https://twitter.com/thephpf">@ThePHPF</a> or  <a href="https://phpc.social/@thephpf">Mastodon</a> to get the latest updates from the Foundation.</p>

<p>üíúÔ∏è üêò</p>

<blockquote>
  <p>PHP Roundup is prepared by Ayesh Karunaratne from <strong><a href="https://php.watch">PHP.Watch</a></strong>, a source for PHP News, Articles, Upcoming Changes, and more.</p>
</blockquote>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[The PHP Foundation Calls for Sponsors: Help&nbsp;Shape the Future of PHP]]></title>
            <link href="https://thephp.foundation/blog/2024/09/30/call-fo-sponsors/"/>
            <updated>2024-09-30T00:00:00+00:00</updated>
            <id>https://thephp.foundation/blog/2024/09/30/call-fo-sponsors/</id>
            <content type="html"><![CDATA[<p>Hey there, PHP enthusiasts and tech leaders&#33; It's that time of the year again when everyone's crunching numbers and deciding on budgets. We've got an opportunity for you to make a real impact on the PHP ecosystem. Let's dive in.</p>

<p><strong>Don't need convincing? <a href="https://thephp.foundation/sponsor/">Sponsor us now</a>!</strong></p>

<h2 id="join-us%5C%21-fund-the-future-of-web-development">Join us&#33; Fund the Future of Web Development</h2>

<p>We just opened applications for PHP core language contributors: <a href="https://thephp.foundation/blog/2024/09/17/application-form-2025/">The PHP Foundation application form for 2025 is now open</a>.</p>

<p>Here's the deal: <strong>the more sponsors we get, the more ambitious we can be with our plans</strong>. At a minimum, we finance maintenance and security support, but with more funding, we can continue high-reaching projects.</p>

<p>Your sponsorship could help us:</p>

<ul>
<li><strong>Tackle long-standing bugs</strong> that have been bothering developers for ages.</li>
<li><strong>Implement cool new features</strong> that will make PHP even more awesome.</li>
<li><strong>Improve performance and security</strong> (because who doesn't want a faster PHP).</li>
</ul>

<p>And if we get enough sponsors, we might even venture into some experimental territory. Your support could lead to the next big breakthrough in PHP development.</p>

<p><figure class="max-w-screen-md mx-auto text-center" id="quote-k√©vin-dunglas">
    <svg class="w-10 h-10 mx-auto mb-3 text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 14">
        <path d="M6 0H2a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v1a3 3 0 0 1-3 3H2a1 1 0 0 0 0 2h1a5.006 5.006 0 0 0 5-5V2a2 2 0 0 0-2-2Zm10 0h-4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v1a3 3 0 0 1-3 3h-1a1 1 0 0 0 0 2h1a5.006 5.006 0 0 0 5-5V2a2 2 0 0 0-2-2Z"/>
    </svg>
    <blockquote>
        <p class="text-xl italic text-gray-900">‚ÄúTo achieve exceptional performance and simplify application deployment, FrankenPHP pushes the PHP engine to its limits and uses it in atypical ways (ZTS, musl libc, specific timeout management...).<br />
<br />
This would not be possible without the excellent work done by the&nbsp;PHP&nbsp;Foundation's team: they correct the problems we report, continuously improve performance and make the engine always more generic and modular, which not only enables us to innovate in FrankenPHP, but also benefits the entire ecosystem by making PHP faster and more reliable.<br />
<br />
By sponsoring the foundation, you're investing in the future of PHP!‚Äù</p>
    </blockquote>
    <figcaption class="flex items-center justify-center mt-3 space-x-3 rtl:space-x-reverse">
        <img class="w-10 h-10 rounded-full" src="/assets/post-images/2024/report-2023/kevin_dunglas.png" alt="profile picture">
        <div class="flex items-center">
            <cite class="pl-0.5 font-medium text-gray-900">K√©vin Dunglas, </cite>
            <cite class="pl-1 text-gray-500">author of <a href="https://frankenphp.dev/">FrankenPHP</a></cite>
        </div>
    </figcaption>
</figure>
</p>

<h2 id="2025%3A-the-year-php-turns-30-and-it%27s-going-to-be-epic%5C%21">2025: The Year PHP Turns 30 (and It's Going to Be Epic&#33;)</h2>

<p>PHP is turning 30 in 2025, and we're planning a special celebration&#33; By sponsoring the PHP Foundation, you'll be front and center for this milestone year. Here's what we've got cooking:</p>

<ul>
<li>A massive collaboration with the marketing teams from Laravel, JetBrains, and Zend by Perforce. It's like the Avengers of the PHP world coming together.</li>
<li>A much-needed facelift for php.net. Let's make it shine for PHP‚Äôs 30th birthday&#33;</li>
</ul>

<p>Imagine your company being visible as a part of this historic moment. Pretty cool, right?</p>

<h2 id="why-sponsor-the-php-foundation%3F">Why Sponsor the PHP Foundation?</h2>

<p>You might be wondering, "Why should I sponsor the PHP Foundation?" Let us list some of the reasons:</p>

<ol>
<li><strong>Visibility:</strong> Your brand will be seen by millions of developers worldwide. That's a lot of eyeballs.</li>
<li><strong>Influence:</strong> Help shape the future of one of the most widely used programming languages on the web.</li>
<li><strong>Security:</strong> Without sufficient funding, the PHP language will lack the resources to promptly address bugs your company runs into.</li>
<li><strong>Recruitment:</strong> Attract top PHP talent by showing your commitment to the language.</li>
<li><strong>Giving Back:</strong> If PHP has helped your business grow, here's your chance to return the favor.</li>
<li><strong>Tech Cred:</strong> Nothing says "we're serious about web development" like sponsoring a major programming language.</li>
</ol>

<h2 id="ready-to-jump-in%3F">Ready to Jump In?</h2>

<p>Here's how you can get started:</p>

<ol>
<li>Check out our sponsorship tiers on our website: <a href="https://thephp.foundation/sponsor/">thephp.foundation/sponsor</a>.</li>
<li>Reach out to us at <a href="&#109;&#x61;i&#108;&#x74;&#111;&#58;&#x63;&#111;&#x6e;&#x74;&#97;&#x63;t&#64;&#x74;&#104;&#101;&#x70;&#104;&#x70;&#x2e;&#102;&#x6f;&#x75;&#110;&#x64;a&#116;&#x69;&#111;&#110;">contact@thephp.foundation</a>.</li>
<li>Let's chat about how we can make this partnership beneficial for both of us.<br />
Office hours call: <a href="http://cal.com/pronskiy/php-foundation-office-hours">cal.com/pronskiy/php-foundation-office-hours</a></li>
</ol>

<h2 id="stay-in-the-loop">Stay in the Loop</h2>

<p>Don't miss out on any PHP Foundation news. Follow us on:</p>

<ul>
<li>LinkedIn: <a href="https://www.linkedin.com/company/phpfoundation">PHP Foundation</a></li>
<li>Twitter/X: <a href="https://x.com/thephpf">@ThePHPF</a></li>
<li>Mastodon: <a href="https://phpc.social/@thephpf">@thephpf@phpc.social</a></li>
</ul>

<p>And for those who prefer their news in their inbox, subscribe to our email newsletter. We send ~1‚Äì2 emails a month ‚Äì just the good stuff about PHP and the Foundation.</p>

<p><div class="px-4 pt-3 border-b border-t -mx-4 border-gray-200">
    <div class="bg-white py-8">
        <div class="mx-auto grid max-w-7xl grid-cols-1 gap-10 lg:grid-cols-12 lg:gap-8">
            <div class="max-w-xl text-4xl font-medium tracking-tight text-gray-900 lg:col-span-6">
                Subscribe to The PHP Foundation newsletter
            </div>
            <form method="POST"
                  action="https://php-foundation.mailcoach.app/subscribe/9be4e2bd-f9d8-475c-b00e-2dcc4cf90056"
                  class="w-full max-w-md lg:col-span-6">
                <div class="flex gap-x-4">
                    <label for="email-address" class="sr-only">Email address</label>
                    <input id="email-address" name="email" type="email" autocomplete="email" required
                           class="min-w-0 flex-auto rounded-md border-0 px-3.5 py-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                           placeholder="Enter your email">
                    <button type="submit"
                            class="inline-block py-2 no-underline px-6 !text-white bg-[#7f52ff] rounded-3xl hover:bg-[rgba(127,82,255,.8)]">
                        Subscribe
                    </button>
                </div>
                <div class="mt-4 text-sm leading-6 text-gray-900">
                    No spam. We only send 1‚Äì2 emails per month.
                </div>
            </form>
        </div>
    </div>
</div>
</p>

<p>P.S. If you have any questions or wild ideas about how you'd like to support PHP, don't hesitate to reach out. We're all ears.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[The PHP Foundation application form for 2025 is now open]]></title>
            <link href="https://thephp.foundation/blog/2024/09/17/application-form-2025/"/>
            <updated>2024-09-17T00:00:00+00:00</updated>
            <id>https://thephp.foundation/blog/2024/09/17/application-form-2025/</id>
            <content type="html"><![CDATA[<p>The PHP Foundation is a non-profit organization, started in 2021 by Acquia, Automattic, Craft CMS, JetBrains, Laravel, PrestaShop, Private Packagist, Symfony, Tideways, and Zend by Perforce with a mission to support, advance, and develop the PHP language.</p>

<p>The foundation pays <a href="https://thephp.foundation/structure/#core_developers">10 developers</a> to work on the language. See what the foundation achieved in 2023 in the <a href="https://thephp.foundation/blog/2024/02/26/transparency-and-impact-report-2023/">Impact and transparency report</a>.</p>

<p>We‚Äôre opening a new round of applications for developer positions. We intend to decide on who we will hire by the end of October. If selected, you would start your work January 1st, 2025&#46;</p>

<p>The application form will be <strong>open until October 10, 2024</strong>.</p>

<p style="text-align: center;">
<a href="https://forms.gle/Ji7Vvj1y2bMf9pUz7" class="inline-block py-2 no-underline px-6 !text-white bg-[#7f52ff] rounded-3xl hover:bg-[rgba(127,82,255,.8)]">Apply</a>
</p>

<div class="alert">
    <span class="inline-block font-bold">Note: This is not a job for PHP developers or aspiring PHP developers.</span><br> 
The development of PHP is done in the –° programming language, and requires proficiency in system programming.
</div>

<h2 id="note%3A-team-size-is-unlikely-to-grow">Note: Team size is unlikely to grow</h2>

<p>While we won‚Äôt rule out the possibility of expanding our team, it‚Äôs likely we won‚Äôt pay more than the current number of 10 developers. Mindful of our budget limitations, we may rather consider restructuring or adjusting our team to make space for any outstanding applications that better help us meet our goals.</p>

<h2 id="what-are-the-requirements%3F">What are the requirements?</h2>

<p>As before, we require previous experience in PHP core development. Ideally you should have all, but at least some of the following:</p>

<ul>
<li>Pull-requests / commits to <a href="https://github.com/php/php-src/">php/php-src</a></li>
<li>Experience in writing PHP extensions</li>
<li>Participation in PHP mailing lists</li>
<li>Contributions to other open-source projects</li>
</ul>

<p>This time, however, we have a clearer idea of the tasks that can be engaged in and so the pool of considered candidates will be wider.</p>

<h2 id="what-are-you-going-to-work-on%3F">What are you going to work on?</h2>

<p>Strategic areas we‚Äôd like you to work on:</p>

<ul>
<li>Security</li>
<li>Performance</li>
<li>Infrastructure</li>
<li>Web APIs (json, PDO, streams, etc.)</li>
</ul>

<p>This is not an exhaustive list. We encourage you to <strong>provide as detailed a description of what you want to work on as possible</strong>.</p>

<p>Our primary selection criterion is <strong>pragmatism</strong>. We place greater emphasis on solutions that improve the developer experience and benefit businesses that rely on PHP, rather than new syntax features.</p>

<p>Out of scope:</p>

<ul>
<li>Pure documentation work</li>
<li>PHP packages</li>
<li>Websites</li>
<li>Translations</li>
</ul>

<h2 id="what-does-working-for-the-php-foundation-look-like%3F">What does working for the PHP Foundation look like?</h2>

<p>Working for the PHP Foundation offers a lot of freedom, but it also requires discipline. Your work will roughly consist of the following:</p>

<ul>
<li>40% Triaging issues and fixing bugs</li>
<li>30% Working on strategic areas</li>
<li>20% Code reviews</li>
<li>&#62;10% Preparing RFCs and developing new language features</li>
</ul>

<p>As you can see, developing new RFCs is a fairly small part of the job. Most of the work is typical maintenance of an open source project.</p>

<p>We are a fully distributed team. You can work from any place<strong>&#42;</strong> and at any time. All communication is asynchronous via Slack, GitHub, and Email. We meet for synchronous calls 1-2 times a month.</p>

<p>Your work should be in line with the foundation‚Äôs mission statement, and we expect you to follow <a href="https://thephp.foundation/code-of-conduct/">the code of conduct</a>.</p>

<blockquote>
  <p><strong>PHP Foundation Mission Statement</strong></p>
  
  <p>The PHP Foundation is a collective of people and organizations relying on the PHP language. Its mission is to ensure the long-term prosperity of the PHP language. The PHP Foundation focuses on providing financial support and guidance to PHP language developers to support its goals of improving the language for its users, providing high-quality maintenance, and improving the PHP language project to retain current contributors and to integrate new contributors. The PHP Foundation aims to promote the public image of the PHP language in the interest of retaining existing and gaining new users and contributors.</p>
</blockquote>

<p><em><strong>&#42;</strong> We do not consider applications from persons residing in sanctioned territories.</em></p>

<h2 id="how-to-apply%3F">How to apply?</h2>

<p>Submit your application now and we will get back to you shortly. If you have any questions or suggestions, reach out to contact@thephp.foundation.</p>

<p style="text-align: center;">
<a href="https://forms.gle/Ji7Vvj1y2bMf9pUz7" target="_blank" class="inline-block py-2 no-underline px-6 !text-white bg-[#7f52ff] rounded-3xl hover:bg-[rgba(127,82,255,.8)]">Open submission form</a>
</p>

<iframe src="https://docs.google.com/forms/d/e/1FAIpQLSeYNVQoK2r9c6EtoMnDaIpLzDc95egt1a1mcfiHTovqMDhFuw/viewform?embedded=true" width="100%" height="1693" frameborder="0" marginheight="0" marginwidth="0">Loading‚Ä¶</iframe>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP Foundation Update, September 2024]]></title>
            <link href="https://thephp.foundation/blog/2024/09/12/php-foundation-update-september-2024/"/>
            <updated>2024-09-12T00:00:00+00:00</updated>
            <id>https://thephp.foundation/blog/2024/09/12/php-foundation-update-september-2024/</id>
            <content type="html"><![CDATA[<p><code>&lt;?= 'Hello world!';</code></p>

<p>Here are some updates we‚Äôd like to share with you.</p>

<h2 id="generics-research-progress">Generics Research Progress</h2>

<p>One of our most anticipated projects is the research into generics for PHP. In August, we published a <a href="https://thephp.foundation/blog/2024/08/19/state-of-generics-and-collections/">comprehensive report on the state of generics and collections in PHP</a>. This research is a crucial step towards potentially implementing generics in future PHP.  The further direction has not been decided yet, so we encourage the PHP community to review the report and provide feedback.</p>

<h2 id="welcoming-ben-marks-as-official-php-foundation-ambassador">Welcoming Ben Marks as Official PHP Foundation Ambassador</h2>

<p>We are thrilled to announce that <a href="https://www.linkedin.com/in/bhmarks/">Ben Marks</a> has stepped up as the official PHP Foundation ambassador. Ben is Director Global Market Development at Shopware, and  was a co-Founder of the Magento Association.</p>

<p>In this role, Ben will:</p>

<ul>
<li>Serve as a liaison between the Foundation and the broader PHP community.</li>
<li>Represent the Foundation at conferences and events.</li>
<li>Help communicate our initiatives and gather feedback from the community.</li>
</ul>

<p>We're confident that Ben's contributions will strengthen our connections within the PHP world and help us better serve the community's needs.</p>

<p>Please give Ben a warm welcome&#33;</p>

<h2 id="website-updates-in-progress">Website Updates in Progress</h2>

<p>We‚Äôd like to make sure our <strong><em><a href="https://thephp.foundation">thephp.foundation</a></em></strong> website provides clear information about what we do, how sponsors can support the foundation, and what are the benefits on top of supporting the PHP language maintenance and development. Please share what you think is missing on the website or is not clearly described. Roast the website so we can improve&#33;</p>

<h2 id="shout-out-to-our-sponsors">Shout-out to our Sponsors</h2>

<p>We want to extend a big thank you to all the individuals and organizations supporting The PHP Foundation. This time, we‚Äôd like to give special recognition to <a href="https://www.sovereigntechfund.de/">Sovereign Tech Fund</a> for their incredible investment this year. And a big thank you to <a href="https://cybozu.co.jp/en/">Cybozu</a>, <a href="http://Les-Tilleuls.coop">Les-Tilleuls.coop</a>, <a href="https://www.pixiv.net/en/">pixiv Inc.</a>, <a href="https://www.mercari.com/">Mercari Inc.</a>, <a href="https://aternos.gmbh/en/">Aternos GmbH</a>, <a href="https://en.ardennes-etape.be/">Ardennes-√©tape</a>, <a href="https://chstudio.fr/">CH Studio</a>, and <a href="https://spysystem.dk/">SPY</a>.</p>

<p>We‚Äôre also deeply grateful to our major sponsors for their continued commitment: <a href="https://automattic.com/">Automattic</a>, <a href="https://www.jetbrains.com/">JetBrains</a>, <a href="https://packagist.com/">Private Packagist</a>, <a href="https://craftcms.com/">Craft CMS</a>, <a href="https://www.zend.com/">Zend by Perforce</a>, <a href="https://tideways.com/">Tideways</a>, and <a href="https://symfony.com/">Symfony</a>.</p>

<p>Thank you so much to <a href="https://thephp.foundation/#sponsors">everyone who sponsored</a> ‚Äì the PHP Foundation is all of us&#33;</p>

<p><br></p>

<p>That‚Äôs all for today. Follow us on X/Twitter <a href="https://twitter.com/thephpf">@ThePHPF</a>, Mastodon <a href="https://phpc.social/@thephpf">phpc.social/@thephpf</a>, and <a href="https://www.linkedin.com/company/phpfoundation/">LinkedIn</a> to get the latest updates from the PHP Foundation. 
üíúüêò</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[State of Generics and Collections]]></title>
            <link href="https://thephp.foundation/blog/2024/08/19/state-of-generics-and-collections/"/>
            <updated>2024-08-19T00:00:00+00:00</updated>
            <id>https://thephp.foundation/blog/2024/08/19/state-of-generics-and-collections/</id>
            <content type="html"><![CDATA[<p>Generics have been on the list of wanted features for a long time by numerous PHP developers. The topic is often brought up in "What's New in PHP?" talks as well during Q&amp;A.</p>

<p>In this article we will be exploring the different approaches, and what their current state is.</p>

<ul>
<li><a href="#full-reified-generics">Full Reified generics</a></li>
<li><a href="#collections">Collections</a></li>
<li><a href="#other-alternatives">Other alternatives</a>

<ul>
<li><a href="#static-analysis">Static Analysis</a></li>
<li><a href="#erased-generic-type-declarations">Erased Generic Type Declarations</a></li>
<li><a href="#fully-erased-type-declarations">Fully Erased Type Declarations</a></li>
</ul></li>
<li><a href="#generic-arrays">Generic Arrays</a>

<ul>
<li><a href="#fluid-arrays">Fluid Arrays</a></li>
<li><a href="#static-arrays">Static Arrays</a></li>
</ul></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>

<h1 id="full-reified-generics">Full Reified generics</h1>

<p>With generics you can define classes with placeholders for the types of their properties and methods. These can then be specified when instances of the class are created. This enables code reusability and type safety across different data types.  "Reified" generics are implementations where the generic type information is defined and carried through to runtime, allowing for runtime enforcement of generic requirements.</p>

<p>As PHP syntax, this could look like:</p>

<pre><code>class Entry&lt;KeyType, ValueType&gt;
{
    public function __construct(protected KeyType $key, protected ValueType $value)
    {
    }

    public function getKey(): KeyType
    {
        return $this-&gt;key;
    }

    public function getValue(): ValueType
    {
        return $this-&gt;value;
    }
}

new Entry&lt;int, BlogPost&gt;(123, new BlogPost());
</code></pre>

<p>In the instantiated class, the generic type <code>KeyType</code> will be replaced with <code>int</code>, and each instance of <code>ValueType</code> with <code>BlogPost</code>, resulting in an object behaving like the following class definition:</p>

<pre><code>class IntBlogPostEntry
{
    public function __construct(protected int $key, protected BlogPost $value)
    {
    }

    public function getKey(): int
    {
        return $this-&gt;key;
    }

    public function getValue(): BlogPost
    {
        return $this-&gt;value;
    }
}
</code></pre>

<p>There have been a few attempts in the past to add this functionality to PHP as well. Nikita Popov attempted the <a href="https://github.com/PHPGenerics/php-generics-rfc/issues/45">most comprehensive experimental implementation</a> in 2020/2021, following up on <a href="https://wiki.php.net/rfc/generics">a draft RFC</a> from 2016, and a <a href="https://www.reddit.com/r/PHP/comments/j65968/comment/g83skiz/">reddit post</a> summarizing the remaining challenges.</p>

<p>At the start of this year, under the auspices of the PHP Foundation, Arnaud Le Blanc <a href="https://github.com/arnaud-lb/php-src/pull/4">restarted this effort</a>, using Nikita's work as a starting point. Although many technical issues have been addressed, plenty of them are still unresolved.</p>

<p>A key challenge is type inference. The use of generics tends to increase code verbosity because it requires type arguments to be specified each time a generic type is referenced. This is demonstrated in the following PHP code snippet:</p>

<pre><code>function f(List&lt;Entry&lt;int,BlogPost&gt;&gt; $entries): Map&lt;int, BlogPost&gt;
{
    return new Map&lt;int, BlogPost&gt;($entries);
}

function g(List&lt;BlogPostId&gt; $ids): List&lt;BlogPost&gt;
{
    return map&lt;int, BlogPostId, BlogPost&gt;($ids, $repository-&gt;find(...));
}
</code></pre>

<p>Type inference can reduce this verbosity by letting the compiler deduce the appropriate types automatically for us. For instance, in the examples above, the compiler might automatically determine the correct types for <code>new Map()</code> and <code>map()</code>. However, this is hard in PHP. Quoting Nikita, "primarily due to the very limited view of the codebase the PHP compiler has (it only sees one file at a time)".</p>

<p>Consider the following example:</p>

<pre><code>class Box&lt;T&gt;
{
    public function __construct(public T $value) {}
}

new Box(getValue());
</code></pre>

<p>In this scenario, the type of the getValue() expression is unknown until the function is loaded at runtime, making it impossible to infer <code>T</code> in <code>new Box(...)</code> during compilation.</p>

<p>We could assign <code>T</code> at runtime based on the return <em>value</em> of the function, but this would result in unstable typing. In the previous example the type of <code>new Box()</code> would depend on the <em>implementation</em> of the return value of <code>getValue()</code>, which may be too specific: combine that with the fact that Box is invariant, and this code would break very quickly when trying to do anything useful with the Box instance:</p>

<pre><code>interface ValueInterface {}
class A implements ValueInterface {}
class B implements ValueInterface {}

function getValue(): ValueInterface
{
    return new A();
}

function doSomething(Box&lt;ValueInterface&gt; $box)
{
}

$box = new Box(getValue()) // runtime: Box&lt;A&gt;, statically: Box&lt;ValueInterface&gt;
doSomething($box); // accepts Box&lt;ValueInterface&gt;, not Box&lt;A&gt;
</code></pre>

<p>Typing is most useful when it‚Äôs based on compile-time / static information that doesn‚Äôt depend on the implementation.</p>

<p>Note: In this example, <code>Box</code> is invariant, as it is often the case of generic classes. This means that <code>Box&lt;X&gt;</code> is neither a sub-type or a super-type of <code>Box&lt;Y&gt;</code> regardless of the relationship between <code>X</code> and <code>Y</code>, so <code>Box&lt;A&gt;</code> is not a sub-type of <code>Box&lt;ValueInterface&gt;</code>, and <code>doSomething()</code> can not accept a <code>Box&lt;A&gt;</code>.</p>

<p>A generic class is invariant when one of its type placeholders is used both in read (e.g. as a return type) and write (e.g. a parameter type) positions at the same time. A property type is both in read and write position.</p>

<p>To understand why, consider the following example:</p>

<pre><code>function changeValue(Box&lt;ValueInterface&gt; $box)
{
    $box-&gt;value = new B();
}
</code></pre>

<p>The <code>changeValue()</code> function accepts a <code>Box&lt;ValueInterface&gt;</code>, thus should be able to assign any sub-type of <code>ValueInterface</code> to <code>$box-&gt;value</code>. However, if we pass a <code>Box&lt;A&gt;</code> (with <code>A</code> a sub-type of <code>ValueInterface</code>), this contract breaks when we assign a value that is a sub-type of <code>ValueInterface</code> but not of <code>A</code>.</p>

<p>The common solution in other generic languages is to allow a type parameter to be marked variant in only one direction (typically "in" or "out"), provided it is used only in a parameter or return position, respectively.  That allows that type parameter to be contravariant or covariant, as appropriate.</p>

<h3 id="hybrid-approach-to-type-inference">Hybrid Approach to Type Inference</h3>

<p>To address these challenges, we explored a hybrid approach, that lets us implement static type inference of generic parameters without having the full information available at compile time. This approach represents unknown types as symbols at compile time (e.g. the type of the expression <code>getValue()</code> is represented as <code>fcall&lt;getValue&gt;</code>). Symbolic types can be resolved at runtime when needed after functions and classes have been loaded, at a fraction of the cost of running the entire analysis at runtime. This operation can be cached (in inline caches) for the duration of the request, and maybe in caches similar to the inheritance cache.</p>

<p>A proof of concept was implemented, and used to implement data-flow based, local, unidirectional type inference of generic type parameters, with the same behaviour as PHPStan/Psalm. The approach works, and could be used to experiment with other flavours of type inference.</p>

<h3 id="performance-considerations">Performance Considerations</h3>

<p>Another concern with generics is their impact on performance. Preliminary benchmarks indicated:</p>

<ul>
<li>Generics do not affect the performance of non-generic code.</li>
<li>Simple generic code shows a modest performance degradation of about 1-2% compared to specialized code.</li>
</ul>

<p>However, later exploration has shown that compound types (such as unions) can lead to super-linear time complexity in type checking, potentially resulting in more substantial performance drawbacks. For example, checking whether <code>A|B</code> accepts <code>B</code> is linear, but checking <code>Box&lt;A|B&gt;()</code> against <code>Box&lt;A|B&gt;()</code> is O(nm).</p>

<p>Super-linear complexity is also reached when merging compound types during the resolution of symbolic types.</p>

<h3 id="future-directions">Future Directions</h3>

<p>Ongoing challenges for reified generics include:</p>

<ul>
<li>Evaluating the effects of compound types and extreme cases</li>
<li>Implement type-checking inline caches, and research more sophisticated algorithms for checking compound types</li>
<li>Exploring eager-autoloading (preloading, but automatic), or inheritance-cache alike, to reduce the amount of symbolic types</li>
</ul>

<h1 id="collections">Collections</h1>

<p>One of the main use cases for generics that often gets brought up is the need for typed arrays. In PHP, the swiss-army knife array type can be used (and abused) for lots of reasons. But you can't currently enforce the types to be used as key or value.</p>

<p>In a parallel project, we have been working on a dedicated Collections syntax as a less-challenging alternative to full generics.</p>

<p>Collections would come in three flavours: sets, sequences, and dictionaries. Sets and Sequences only define a value type, whereas Dictionaries have key and value types. The syntax of these could be as follows:</p>

<pre><code>class Article
{
    public function __construct(public string $subject) {}
}

collection(Seq) Articles&lt;Article&gt;
{
}

collection(Dict) YearBooks&lt;int =&gt; Book&gt;
{
}
</code></pre>

<p>You can then instantiate sequences and collections like you would do with a normal class:</p>

<pre><code>$a1 = new Articles();
$b1 = new YearBooks();
</code></pre>

<p>Sequences and Dictionaries will automatically have <a href="https://github.com/php/php-src/compare/master...derickr:php-src:collections&#35;diff-eeb1e0848e9a25b7492398bf5ddf9be15995a67d44a23c336869bf9f36910d1b">many methods defined</a> on them, providing a base functionality like PHP already has with the myriad of <code>array_*</code> functions. If you use the defined methods to add or update elements in the collection, then the type for keys and values have to match the ones as defined on the collection.</p>

<p>In the example above, the <code>add()</code> method for the YearBooks dictionary then requires int to be used as key, and Book as value. For the main manipulation methods (add, get, unset, and isset), ArrayAccess style overloaded operations will also work, as well as potentially operator overloads.</p>

<p>One of the drawbacks of Collections is that you need to declare them. Following adopted practise, that would mean a single line declaration in a separate file for each collection.</p>

<p>Another concern is potentially higher memory usage, as for each class PHP will have to keep a corresponding class entry, including a list of all the associated methods.</p>

<p>And a third concern is that there is no instanceof/is-a relationship between collections of compatible types, for example:</p>

<pre><code>class A {}
class B extends A {}

seq As&lt;A&gt; {}
seq Bs&lt;B&gt; {}

new B() instanceof A // true
new Bs() instanceof As // false
</code></pre>

<p>Or:</p>

<pre><code>namespace Foo;
seq As&lt;A&gt; {}

namespace Bar;
seq As&lt;A&gt; {}

namespace;
new Foo\As instanceof Bar\As; // false
</code></pre>

<p>Collections, although less powerful, can be an alternative to generics in many use cases, but without much of the complexity. The implementation as outline above is also significantly easier. An <a href="https://github.com/derickr/php-src/tree/collections">experimental branch is also available</a>.  However, if full generics are found to be viable and supported, implementing Seq, Set, and Dict directly on standard generics would be significantly preferable.</p>

<p>Larry Garfield has <a href="https://github.com/Crell/php-rfcs/blob/master/collections/research-notes.md">conducted research</a> into other languages and how expansive their collection APIs are.  It's still in rough form, but the consensus seems to be "include everything", possibly broken up into discrete interfaces.  The rough recommendations at the end of the document suggest a likely way forward.</p>

<p>You can find a patch for collections at <a href="https://github.com/php/php-src/pull/15429">https://github.com/php/php-src/pull/15429</a></p>

<h1 id="other-alternatives">Other alternatives</h1>

<h2 id="static-analysis">Static Analysis</h2>

<p>Recent years have seen the emergence of static analysers. Both <a href="https://phpstan.org/blog/generics-in-php-using-phpdocs">PHPStan</a> and <a href="https://psalm.dev/docs/annotating_code/templated_annotations/">Psalm</a> support generics via doc block annotations, and are frequently used in open source libraries and private projects.</p>

<p>Here is an example of a generic Dict class when using PHPStan and Psalm:</p>

<pre><code>/**
 * @template Key
 * @template Value
 */
class Dict
{
    /**
     * @param array&lt;Key,Value&gt; $entries
     */
    public function __construct(private array $entries) {}

    /**
     * @param Key $key
     * @param Value $value
     */
    public function set($key, $value): self
    {
        $this-&gt;entries[$key] = $value;
        return $this;
    }
}

/** @param Dict&lt;string,string&gt; $dict */
function f($dict) {}

$dict = new Dict([1 =&gt; 'foo']);
$dict-&gt;set("foo", "bar"); // Static analyser error
$dict-&gt;set(1, "bar");     // Ok
f($dict);                 // Static analyser error
</code></pre>

<p>The docblock annotations are named ‚Äútemplate‚Äù for historical reasons, but they implement a generics flavour very close to Java‚Äôs: Generic types are checked at static analysis time, and are not visible at runtime.</p>

<p>This offers some benefits of generics, such as type safety, with the following drawbacks:</p>

<ul>
<li>Docblocks can be verbose</li>
<li>Type checking requires running a separate tool (like PHPStan or Psalm)</li>
<li>Generic type information is entirely unavailable at runtime.</li>
<li>Generic type information is not enforced at runtime (so if you don't run a static analysis tool in advance, they accomplish nothing).</li>
</ul>

<h2 id="erased-generic-type-declarations">Erased Generic Type Declarations</h2>

<p>Seeing the difficulties with implementing reified generics in PHP core, it has been proposed to implement them only syntactically, leaving the task of type checking to static analysers.</p>

<p>In this alternative, the PHP syntax would be changed so that type declarations, class declarations, and function declarations accept generic syntax, but the PHP engine would not check them.</p>

<p>We can call these ‚ÄúErased‚Äù type declarations because the engine will simply ignore them at runtime. This alternative could be implemented in various ways:</p>

<ul>
<li>As part of php-src</li>
<li>In an extension</li>
<li>In an autoloader</li>
<li>etc</li>
</ul>

<p>Here is what the same Dict class as above would look like:</p>

<pre><code>class Dict&lt;Key,Value&gt;
{
    public function __construct(private array&lt;Key,Value&gt; $entries) {}

    public function set(Key $key, Value $value): self
    {
        $this-&gt;entries[$key] = $value;
        return $this;
    }
}

function f(Dict&lt;string,string&gt; $dict) {}

$dict = new Dict([1 =&gt; 'foo']);
$dict-&gt;set("foo", "bar"); // Static analyser error
$dict-&gt;set(1, "bar");     // Ok
f($dict);                 // Static analyser error
</code></pre>

<p>This addresses the docblock verbosity issue of the Static Analysis alternative, but this introduces an inconsistency: Type declarations cause coercion, but erased generic type declarations will not.</p>

<p>Consider the following example:</p>

<pre><code>class StringList
{
    public function add(string $value)
    {
        $this-&gt;values[] = $value;
    }
}

class List&lt;T&gt;
{
    public function add(T $value)
    {
        $this-&gt;values[] = $value;
    }
}

$list = new StringList();
$list-&gt;add(123); // coerced to string

$list = new List&lt;string&gt;();
$list-&gt;add(123); // NOT coerced to string
</code></pre>

<p>In this scenario, the first call to <code>add()</code> will coerce the argument to string, but not the second one.</p>

<p>In languages like Java, which has erased generics on top of a traditional type system, the compiler does type checking, so inconsistencies like the above do not exist. However, in PHP these are unavoidable.</p>

<p>Another drawback of erased generics is they are not visible at runtime. This would prevent pattern matching from seeing generic type arguments, for example.</p>

<h2 id="fully-erased-type-declarations">Fully Erased Type Declarations</h2>

<p>One way to address the inconsistency issue of Erased Generics is to change all type declarations to be erased. This could be opt-in with a <code>declare()</code> statement:</p>

<pre><code>declare(types=erased);
</code></pre>

<p>In this alternative, the engine would stop checking types at runtime. In the previous example, both calls to <code>add()</code> would have the same behaviour: the value is not coerced. It is then up to the user to check types with an analyser.</p>

<p>This is not uncommon in mainstream interpreted languages, as all of Javascript (via TypeScript), Python, and Ruby have fully erased type declarations.</p>

<p>Letting users opt-in for fully erased typing and generics on a per-file basis would be another option to look at, and would make working with PHPStan/Psalm generics less verbose. Some additional benefits of this solution include:</p>

<ul>
<li>Short-term performance improvements due to the lack of type checking at runtime in opted-in code.</li>
<li>The potential for extending the type system with advanced types like non-empty-string, list, int<range>, class-string, conditional types, and more.</li>
</ul>

<p>However, there would also be significant downsides:</p>

<ul>
<li>It's unclear what impact erased types would have on reflection, or libraries that depend on reflection.</li>
<li>It would make type enforcement dependent on a developer actively choosing to run a static analysis tool, and the majority of the ecosystem right now doesn't use one to begin with.</li>
<li>It effectively creates a third "type mode" that developers would have to account for, in addition to strict and weak typing today.  (Since code with user-defined pseudo types wouldn't be compatible with the type-enforced modes.)</li>
<li>It would not actually resolve the "some types are enforced but not others" question, as anyone who wanted to use generics but not fully-erased types would still be left with partial-enforcement.</li>
<li>PHP is currently unique among major scripting languages for having enforced types. That's a benefit and market advantage we would lose.</li>
</ul>

<h1 id="generic-arrays">Generic Arrays</h1>

<p>This blog post discusses generic objects, but what about arrays?</p>

<h2 id="fluid-arrays">Fluid Arrays</h2>

<p>Arrays are copy on write: Modifying them creates a new copy (if they are referenced elsewhere), and modifies the copy instead. This makes arrays safe to pass around as you don‚Äôt need to worry about other functions modifying them (unless passed by reference).</p>

<p>From a typing perspective this means that the type of an array is always defined by its content, and this type can not change because modifying an array creates a new one.</p>

<p>From a generics perspective this is a very convenient property, as this makes arrays variant: They can have supertypes and subtypes, just like any (non-generic) class. In other words, the following code is type safe:</p>

<pre><code>class A {}
class B extends A {}

function f(array $a) {}
function g(array&lt;A&gt; $a) {}
function h(array&lt;B&gt; $a) {}

$array = [new B()];

f($array);
g($array);
h($array);
</code></pre>

<p>Usually, generic containers are invariant because their type placeholders are used in both read and write positions. This is not the case for arrays because they are semantically immutable / copy on write.</p>

<p>So the natural way to implement generic arrays is just as explained above: Let their content define their type. This is illustrated in the example below:</p>

<pre><code>$a = [1];       // array&lt;int&gt;
$b = [new A()]; // array&lt;A&gt;
$c = $b;        // array&lt;A&gt;
$c[] = new B(); // array&lt;A|B&gt;
$b;             // array&lt;A&gt;
</code></pre>

<p>This does provide type safety, because what matters is that types are checked at API boundaries‚Äîwhen passing arguments to functions, returning values, updating object properties:</p>

<pre><code>function f(array&lt;int&gt; $a) {}

$a = [1];
f($a); // ok

$b = [new A()];
f($b); // error
</code></pre>

<p>A PoC has been implemented, but the performance impact is still uncertain. Another issue is that supporting references and/or typed properties may not be possible.</p>

<h2 id="static-arrays">Static Arrays</h2>

<p>An alternative to Fluid Arrays is to fix the type at instantiation time:</p>

<pre><code>$a = array&lt;int&gt;(1); // array&lt;int&gt;
$a[] = new A();     // error
</code></pre>

<p>However, this alternative is very orthogonal to how arrays are used in PHP code today. It also makes arrays invariant:</p>

<pre><code>function f(array&lt;int&gt; $a) {}
function g(array $a) {}

$a = [1];

f($a); // ok
g($a); // error
</code></pre>

<p>To understand why <code>g($a)</code> is an error, remember the explanation about invariance in the Generics section. <code>g()</code> accepts an <code>array</code> (<code>array&lt;mixed&gt;</code>), which means it should be able to add an element of any type to it. However, if we pass an <code>array&lt;int&gt;</code> to it, this contract is broken. Therefore, <code>array</code> can not accept <code>array&lt;int&gt;</code>.</p>

<p>Invariance would make arrays very difficult to adopt, as a library can not start type hinting generic arrays without breaking user code, and users can not pass generic arrays to libraries until they start using generic arrays type declarations.</p>

<p>These pitfalls are why it may also be preferable to focus on object-based collections. Either with the custom syntax above described as Collections, or with the more complete full generics, as are present in most modern languages.  However, the two approaches are mutually-compatible.</p>

<h1 id="conclusion">Conclusion</h1>

<p>We hope to have explained in this article what different options are available for the implementation of generic objects, collections, or related features into PHP. More work is required, and ongoing, to determine which options are most desireable, or even feasible.</p>

<p>The next steps for investigation are:</p>

<ul>
<li>Further investigate type inference for reified generics.  If that turns out to be feasible with acceptable trade-offs, that is most likely the best option, and would imply building collections on top of them.</li>
<li>Determine if erased generics would have any additional drawbacks not noted here that would make them infeasible.</li>
<li>Determine if fully-erased types would have additional drawbacks not noted here that would make them infeasible.</li>
<li>Further develop an optimal feature set for collections, which would be applicable either in the dedicated syntax or as an application of generics (reified or erased).</li>
<li>Investigate the feasibility of using internal data structures in collections other than a hashmap (array) for better performance and simplicity.  (This would be a reason collections could not be done fully in user-space.)</li>
<li>Halt efforts on typed arrays, as our current thoughts are that it is probably not worth doing, due to the complexities of how arrays work, and the minimal functionality that it would bring.</li>
</ul>

<p>Right now, we‚Äôre focused on gathering feedback specifically related to the questions below, to help guide our next steps:</p>

<ul>
<li>If reified generics turn out to be infeasible, would erased generics be acceptable, or should that continue to be left to user-space tooling?</li>
<li>What generic features are acceptable to leave out to make the implementation more feasible?  (Eg, don't allow generics over union types; unioned generics are slow and we don't care; don't support in/out variance markers; etc.)</li>
<li>If erased generics are included, would that necessitate an official linter to validate them, or continue to leave that to user-space tooling?</li>
<li>If reified generics turn out to be infeasible, would the dedicated collections syntax shown here be acceptable?</li>
<li>Would "erased generics now, and we can <em>probably</em> convert them to reified in the future" be an acceptable strategy, if it is determined to be feasible?</li>
</ul>

<h1 id="discussions">Discussions</h1>

<ul>
<li><a href="https://externals.io/message/125049">PHP Internals mailing list</a></li>
<li><a href="https://www.reddit.com/r/PHP/comments/1ew7hik/state_of_generics_and_collections/">Reddit</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Joining Forces for Open Source Cybersecurity Standards]]></title>
            <link href="https://thephp.foundation/blog/2024/04/02/open-source-community-cra-compliance-initiative/"/>
            <updated>2024-04-02T00:00:00+00:00</updated>
            <id>https://thephp.foundation/blog/2024/04/02/open-source-community-cra-compliance-initiative/</id>
            <content type="html"><![CDATA[<p>The PHP Foundation, alongside leading open source organizations including the <a href="https://www.apache.org/">Apache Software Foundation</a>, <a href="https://www.blender.org/about/foundation/">Blender Foundation</a>, <a href="https://www.openssl.org/">OpenSSL Software Foundation</a>, <a href="https://www.python.org/psf-landing/">Python Software Foundation</a>, <a href="https://foundation.rust-lang.org/">Rust Foundation</a>, and <a href="https://www.eclipse.org/">Eclipse Foundation</a>, is excited to announce a collaborative initiative aimed at establishing common cybersecurity standards in alignment with the European Union‚Äôs <a href="https://digital-strategy.ec.europa.eu/en/library/cyber-resilience-act">Cyber Resilience Act (CRA)</a>.</p>

<p>This initiative, hosted by the Eclipse Foundation, will focus on creating specifications for secure software development rooted in open source best practices.</p>

<blockquote>
  <p>We hope that our specifications could inform the formal standardisation processes of at least one of the European Standards Organisations. Given the tight time horizon for implementation of the CRA, we believe that this immediate start will provide a constructive environment to host the technical discussions necessary for the stewards, contributors, and adopters of open source to meet the requirements set forth in these new regulations.</p>
</blockquote>

<p>At The PHP Foundation, we are committed to supporting the open source community, ensuring that the PHP language and its ecosystem are prepared for the upcoming regulatory changes.</p>

<p>For more information, see the <a href="https://eclipse-foundation.blog/2024/04/02/open-source-community-cra-compliance/">full announcement on the Eclipse Foundation website</a>.</p>
]]></content>
        </entry>
    </feed>